   1               		.file	"hal_adc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.adcInit,"ax",@progbits
  11               	.global	adcInit
  13               	adcInit:
  14               	.LFB180:
  15               		.file 1 "../../../os/hal/src/hal_adc.c"
   1:../../../os/hal/src/hal_adc.c **** /*
   2:../../../os/hal/src/hal_adc.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_adc.c **** 
   4:../../../os/hal/src/hal_adc.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_adc.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_adc.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_adc.c **** 
   8:../../../os/hal/src/hal_adc.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_adc.c **** 
  10:../../../os/hal/src/hal_adc.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_adc.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_adc.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_adc.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_adc.c ****     limitations under the License.
  15:../../../os/hal/src/hal_adc.c **** */
  16:../../../os/hal/src/hal_adc.c **** 
  17:../../../os/hal/src/hal_adc.c **** /**
  18:../../../os/hal/src/hal_adc.c ****  * @file    hal_adc.c
  19:../../../os/hal/src/hal_adc.c ****  * @brief   ADC Driver code.
  20:../../../os/hal/src/hal_adc.c ****  *
  21:../../../os/hal/src/hal_adc.c ****  * @addtogroup ADC
  22:../../../os/hal/src/hal_adc.c ****  * @{
  23:../../../os/hal/src/hal_adc.c ****  */
  24:../../../os/hal/src/hal_adc.c **** 
  25:../../../os/hal/src/hal_adc.c **** #include "hal.h"
  26:../../../os/hal/src/hal_adc.c **** 
  27:../../../os/hal/src/hal_adc.c **** #if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_adc.c **** 
  29:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_adc.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_adc.c **** 
  33:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_adc.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_adc.c **** 
  37:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_adc.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_adc.c **** 
  41:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_adc.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_adc.c **** 
  45:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_adc.c **** /* Driver exported functions.                                                */
  47:../../../os/hal/src/hal_adc.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_adc.c **** 
  49:../../../os/hal/src/hal_adc.c **** /**
  50:../../../os/hal/src/hal_adc.c ****  * @brief   ADC Driver initialization.
  51:../../../os/hal/src/hal_adc.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
  52:../../../os/hal/src/hal_adc.c ****  *          no need to explicitly initialize the driver.
  53:../../../os/hal/src/hal_adc.c ****  *
  54:../../../os/hal/src/hal_adc.c ****  * @init
  55:../../../os/hal/src/hal_adc.c ****  */
  56:../../../os/hal/src/hal_adc.c **** void adcInit(void) {
  16               		.loc 1 56 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  57:../../../os/hal/src/hal_adc.c **** 
  58:../../../os/hal/src/hal_adc.c ****   adc_lld_init();
  22               		.loc 1 58 0
  23 0000 0C94 0000 		jmp adc_lld_init
  24               	.LVL0:
  25               		.cfi_endproc
  26               	.LFE180:
  28               		.section	.text.adcObjectInit,"ax",@progbits
  29               	.global	adcObjectInit
  31               	adcObjectInit:
  32               	.LFB181:
  59:../../../os/hal/src/hal_adc.c **** }
  60:../../../os/hal/src/hal_adc.c **** 
  61:../../../os/hal/src/hal_adc.c **** /**
  62:../../../os/hal/src/hal_adc.c ****  * @brief   Initializes the standard part of a @p ADCDriver structure.
  63:../../../os/hal/src/hal_adc.c ****  *
  64:../../../os/hal/src/hal_adc.c ****  * @param[out] adcp     pointer to the @p ADCDriver object
  65:../../../os/hal/src/hal_adc.c ****  *
  66:../../../os/hal/src/hal_adc.c ****  * @init
  67:../../../os/hal/src/hal_adc.c ****  */
  68:../../../os/hal/src/hal_adc.c **** void adcObjectInit(ADCDriver *adcp) {
  33               		.loc 1 68 0
  34               		.cfi_startproc
  35               	.LVL1:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40 0000 FC01      		movw r30,r24
  69:../../../os/hal/src/hal_adc.c **** 
  70:../../../os/hal/src/hal_adc.c ****   adcp->state    = ADC_STOP;
  41               		.loc 1 70 0
  42 0002 81E0      		ldi r24,lo8(1)
  43               	.LVL2:
  44 0004 8083      		st Z,r24
  71:../../../os/hal/src/hal_adc.c ****   adcp->config   = NULL;
  45               		.loc 1 71 0
  46 0006 1282      		std Z+2,__zero_reg__
  47 0008 1182      		std Z+1,__zero_reg__
  72:../../../os/hal/src/hal_adc.c ****   adcp->samples  = NULL;
  48               		.loc 1 72 0
  49 000a 1482      		std Z+4,__zero_reg__
  50 000c 1382      		std Z+3,__zero_reg__
  73:../../../os/hal/src/hal_adc.c ****   adcp->depth    = 0;
  51               		.loc 1 73 0
  52 000e 1682      		std Z+6,__zero_reg__
  53 0010 1582      		std Z+5,__zero_reg__
  74:../../../os/hal/src/hal_adc.c ****   adcp->grpp     = NULL;
  54               		.loc 1 74 0
  55 0012 1086      		std Z+8,__zero_reg__
  56 0014 1782      		std Z+7,__zero_reg__
  75:../../../os/hal/src/hal_adc.c **** #if ADC_USE_WAIT == TRUE
  76:../../../os/hal/src/hal_adc.c ****   adcp->thread   = NULL;
  57               		.loc 1 76 0
  58 0016 1286      		std Z+10,__zero_reg__
  59 0018 1186      		std Z+9,__zero_reg__
  60               	.LVL3:
  61               	.LBB85:
  62               	.LBB86:
  63               		.file 2 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if 0
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:../../../os/hal/osal/rt/osal.h ****  */
 176:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:../../../os/hal/osal/rt/osal.h **** #endif
 178:../../../os/hal/osal/rt/osal.h **** 
 179:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:../../../os/hal/osal/rt/osal.h **** /**
 181:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:../../../os/hal/osal/rt/osal.h ****  */
 188:../../../os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:../../../os/hal/osal/rt/osal.h **** 
 190:../../../os/hal/osal/rt/osal.h **** /**
 191:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:../../../os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:../../../os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:../../../os/hal/osal/rt/osal.h ****  */
 195:../../../os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:../../../os/hal/osal/rt/osal.h **** 
 197:../../../os/hal/osal/rt/osal.h **** /**
 198:../../../os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:../../../os/hal/osal/rt/osal.h ****  */
 205:../../../os/hal/osal/rt/osal.h **** struct event_source {
 206:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:../../../os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:../../../os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:../../../os/hal/osal/rt/osal.h **** };
 210:../../../os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /**
 213:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:../../../os/hal/osal/rt/osal.h ****  */
 217:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:../../../os/hal/osal/rt/osal.h **** #else
 221:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:../../../os/hal/osal/rt/osal.h **** #endif
 223:../../../os/hal/osal/rt/osal.h **** 
 224:../../../os/hal/osal/rt/osal.h **** #if 0
 225:../../../os/hal/osal/rt/osal.h **** /**
 226:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:../../../os/hal/osal/rt/osal.h ****  */
 232:../../../os/hal/osal/rt/osal.h **** typedef struct {
 233:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:../../../os/hal/osal/rt/osal.h **** #endif
 236:../../../os/hal/osal/rt/osal.h **** 
 237:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:../../../os/hal/osal/rt/osal.h **** 
 241:../../../os/hal/osal/rt/osal.h **** /**
 242:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:../../../os/hal/osal/rt/osal.h ****  * @{
 244:../../../os/hal/osal/rt/osal.h ****  */
 245:../../../os/hal/osal/rt/osal.h **** /**
 246:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 249:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:../../../os/hal/osal/rt/osal.h ****  *
 254:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:../../../os/hal/osal/rt/osal.h ****  *
 257:../../../os/hal/osal/rt/osal.h ****  * @api
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 266:../../../os/hal/osal/rt/osal.h ****  *
 267:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:../../../os/hal/osal/rt/osal.h ****  *
 269:../../../os/hal/osal/rt/osal.h ****  * @api
 270:../../../os/hal/osal/rt/osal.h ****  */
 271:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:../../../os/hal/osal/rt/osal.h **** 
 273:../../../os/hal/osal/rt/osal.h **** /**
 274:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:../../../os/hal/osal/rt/osal.h ****  */
 277:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:../../../os/hal/osal/rt/osal.h **** 
 279:../../../os/hal/osal/rt/osal.h **** /**
 280:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:../../../os/hal/osal/rt/osal.h ****  */
 283:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:../../../os/hal/osal/rt/osal.h **** /** @} */
 285:../../../os/hal/osal/rt/osal.h **** 
 286:../../../os/hal/osal/rt/osal.h **** /**
 287:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:../../../os/hal/osal/rt/osal.h ****  * @{
 289:../../../os/hal/osal/rt/osal.h ****  */
 290:../../../os/hal/osal/rt/osal.h **** /**
 291:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:../../../os/hal/osal/rt/osal.h ****  */
 293:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:../../../os/hal/osal/rt/osal.h **** 
 295:../../../os/hal/osal/rt/osal.h **** /**
 296:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:../../../os/hal/osal/rt/osal.h ****  */
 299:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:../../../os/hal/osal/rt/osal.h **** 
 301:../../../os/hal/osal/rt/osal.h **** /**
 302:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:../../../os/hal/osal/rt/osal.h ****  */
 305:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:../../../os/hal/osal/rt/osal.h **** 
 307:../../../os/hal/osal/rt/osal.h **** /**
 308:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:../../../os/hal/osal/rt/osal.h ****  *
 311:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:../../../os/hal/osal/rt/osal.h ****  */
 313:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:../../../os/hal/osal/rt/osal.h **** /** @} */
 315:../../../os/hal/osal/rt/osal.h **** 
 316:../../../os/hal/osal/rt/osal.h **** /**
 317:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:../../../os/hal/osal/rt/osal.h ****  * @{
 319:../../../os/hal/osal/rt/osal.h ****  */
 320:../../../os/hal/osal/rt/osal.h **** /**
 321:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/hal/osal/rt/osal.h ****  *
 325:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:../../../os/hal/osal/rt/osal.h ****  *
 328:../../../os/hal/osal/rt/osal.h ****  * @api
 329:../../../os/hal/osal/rt/osal.h ****  */
 330:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:../../../os/hal/osal/rt/osal.h **** 
 332:../../../os/hal/osal/rt/osal.h **** /**
 333:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:../../../os/hal/osal/rt/osal.h ****  *
 337:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:../../../os/hal/osal/rt/osal.h ****  *
 340:../../../os/hal/osal/rt/osal.h ****  * @api
 341:../../../os/hal/osal/rt/osal.h ****  */
 342:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:../../../os/hal/osal/rt/osal.h **** 
 344:../../../os/hal/osal/rt/osal.h **** /**
 345:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:../../../os/hal/osal/rt/osal.h ****  *
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:../../../os/hal/osal/rt/osal.h **** /** @} */
 356:../../../os/hal/osal/rt/osal.h **** 
 357:../../../os/hal/osal/rt/osal.h **** /**
 358:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:../../../os/hal/osal/rt/osal.h ****  * @{
 360:../../../os/hal/osal/rt/osal.h ****  */
 361:../../../os/hal/osal/rt/osal.h **** /**
 362:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:../../../os/hal/osal/rt/osal.h ****  *
 370:../../../os/hal/osal/rt/osal.h ****  * @api
 371:../../../os/hal/osal/rt/osal.h ****  */
 372:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:../../../os/hal/osal/rt/osal.h **** 
 374:../../../os/hal/osal/rt/osal.h **** /**
 375:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:../../../os/hal/osal/rt/osal.h ****  *
 384:../../../os/hal/osal/rt/osal.h ****  * @api
 385:../../../os/hal/osal/rt/osal.h ****  */
 386:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:../../../os/hal/osal/rt/osal.h **** 
 388:../../../os/hal/osal/rt/osal.h **** /**
 389:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:../../../os/hal/osal/rt/osal.h ****  *
 394:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:../../../os/hal/osal/rt/osal.h ****  *
 398:../../../os/hal/osal/rt/osal.h ****  * @api
 399:../../../os/hal/osal/rt/osal.h ****  */
 400:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:../../../os/hal/osal/rt/osal.h **** /** @} */
 402:../../../os/hal/osal/rt/osal.h **** 
 403:../../../os/hal/osal/rt/osal.h **** /**
 404:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:../../../os/hal/osal/rt/osal.h ****  * @{
 406:../../../os/hal/osal/rt/osal.h ****  */
 407:../../../os/hal/osal/rt/osal.h **** /**
 408:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:../../../os/hal/osal/rt/osal.h ****  *
 413:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:../../../os/hal/osal/rt/osal.h ****  *
 415:../../../os/hal/osal/rt/osal.h ****  * @api
 416:../../../os/hal/osal/rt/osal.h ****  */
 417:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:../../../os/hal/osal/rt/osal.h **** 
 419:../../../os/hal/osal/rt/osal.h **** /**
 420:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:../../../os/hal/osal/rt/osal.h ****  *
 426:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:../../../os/hal/osal/rt/osal.h ****  *
 428:../../../os/hal/osal/rt/osal.h ****  * @api
 429:../../../os/hal/osal/rt/osal.h ****  */
 430:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** /**
 433:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 435:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:../../../os/hal/osal/rt/osal.h ****  *
 439:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:../../../os/hal/osal/rt/osal.h ****  *
 441:../../../os/hal/osal/rt/osal.h ****  * @api
 442:../../../os/hal/osal/rt/osal.h ****  */
 443:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:../../../os/hal/osal/rt/osal.h **** /** @} */
 445:../../../os/hal/osal/rt/osal.h **** 
 446:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:../../../os/hal/osal/rt/osal.h **** 
 450:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:../../../os/hal/osal/rt/osal.h **** extern "C" {
 452:../../../os/hal/osal/rt/osal.h **** #endif
 453:../../../os/hal/osal/rt/osal.h **** 
 454:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:../../../os/hal/osal/rt/osal.h **** }
 456:../../../os/hal/osal/rt/osal.h **** #endif
 457:../../../os/hal/osal/rt/osal.h **** 
 458:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h **** /**
 463:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:../../../os/hal/osal/rt/osal.h ****  *
 465:../../../os/hal/osal/rt/osal.h ****  * @api
 466:../../../os/hal/osal/rt/osal.h ****  */
 467:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:../../../os/hal/osal/rt/osal.h **** 
 469:../../../os/hal/osal/rt/osal.h **** }
 470:../../../os/hal/osal/rt/osal.h **** 
 471:../../../os/hal/osal/rt/osal.h **** /**
 472:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:../../../os/hal/osal/rt/osal.h ****  *
 474:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:../../../os/hal/osal/rt/osal.h ****  *
 476:../../../os/hal/osal/rt/osal.h ****  * @api
 477:../../../os/hal/osal/rt/osal.h ****  */
 478:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:../../../os/hal/osal/rt/osal.h **** 
 480:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:../../../os/hal/osal/rt/osal.h **** }
 482:../../../os/hal/osal/rt/osal.h **** 
 483:../../../os/hal/osal/rt/osal.h **** /**
 484:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:../../../os/hal/osal/rt/osal.h ****  *
 486:../../../os/hal/osal/rt/osal.h ****  * @special
 487:../../../os/hal/osal/rt/osal.h ****  */
 488:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:../../../os/hal/osal/rt/osal.h **** 
 490:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 491:../../../os/hal/osal/rt/osal.h **** }
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h **** /**
 494:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:../../../os/hal/osal/rt/osal.h ****  *
 496:../../../os/hal/osal/rt/osal.h ****  * @special
 497:../../../os/hal/osal/rt/osal.h ****  */
 498:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:../../../os/hal/osal/rt/osal.h **** 
 500:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 501:../../../os/hal/osal/rt/osal.h **** }
 502:../../../os/hal/osal/rt/osal.h **** 
 503:../../../os/hal/osal/rt/osal.h **** /**
 504:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:../../../os/hal/osal/rt/osal.h ****  *
 507:../../../os/hal/osal/rt/osal.h ****  * @special
 508:../../../os/hal/osal/rt/osal.h ****  */
 509:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 510:../../../os/hal/osal/rt/osal.h **** 
 511:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 512:../../../os/hal/osal/rt/osal.h **** }
 513:../../../os/hal/osal/rt/osal.h **** 
 514:../../../os/hal/osal/rt/osal.h **** /**
 515:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:../../../os/hal/osal/rt/osal.h ****  *
 518:../../../os/hal/osal/rt/osal.h ****  * @special
 519:../../../os/hal/osal/rt/osal.h ****  */
 520:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 521:../../../os/hal/osal/rt/osal.h **** 
 522:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 523:../../../os/hal/osal/rt/osal.h **** }
 524:../../../os/hal/osal/rt/osal.h **** 
 525:../../../os/hal/osal/rt/osal.h **** /**
 526:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 527:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 528:../../../os/hal/osal/rt/osal.h ****  *
 529:../../../os/hal/osal/rt/osal.h ****  * @special
 530:../../../os/hal/osal/rt/osal.h ****  */
 531:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 532:../../../os/hal/osal/rt/osal.h **** 
 533:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 534:../../../os/hal/osal/rt/osal.h **** }
 535:../../../os/hal/osal/rt/osal.h **** 
 536:../../../os/hal/osal/rt/osal.h **** /**
 537:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 538:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @special
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 550:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 551:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 552:../../../os/hal/osal/rt/osal.h ****  *          is known.
 553:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 554:../../../os/hal/osal/rt/osal.h ****  *
 555:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 556:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 557:../../../os/hal/osal/rt/osal.h ****  *
 558:../../../os/hal/osal/rt/osal.h ****  * @xclass
 559:../../../os/hal/osal/rt/osal.h ****  */
 560:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 561:../../../os/hal/osal/rt/osal.h **** 
 562:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 563:../../../os/hal/osal/rt/osal.h **** }
 564:../../../os/hal/osal/rt/osal.h **** 
 565:../../../os/hal/osal/rt/osal.h **** /**
 566:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 567:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 568:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 569:../../../os/hal/osal/rt/osal.h ****  *
 570:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 571:../../../os/hal/osal/rt/osal.h ****  *
 572:../../../os/hal/osal/rt/osal.h ****  * @xclass
 573:../../../os/hal/osal/rt/osal.h ****  */
 574:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 575:../../../os/hal/osal/rt/osal.h **** 
 576:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 577:../../../os/hal/osal/rt/osal.h **** }
 578:../../../os/hal/osal/rt/osal.h **** 
 579:../../../os/hal/osal/rt/osal.h **** /**
 580:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 581:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 582:../../../os/hal/osal/rt/osal.h ****  *          value.
 583:../../../os/hal/osal/rt/osal.h ****  *
 584:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 585:../../../os/hal/osal/rt/osal.h ****  *
 586:../../../os/hal/osal/rt/osal.h ****  * @xclass
 587:../../../os/hal/osal/rt/osal.h ****  */
 588:../../../os/hal/osal/rt/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 589:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 590:../../../os/hal/osal/rt/osal.h **** 
 591:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 592:../../../os/hal/osal/rt/osal.h **** }
 593:../../../os/hal/osal/rt/osal.h **** #endif
 594:../../../os/hal/osal/rt/osal.h **** 
 595:../../../os/hal/osal/rt/osal.h **** /**
 596:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 597:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 598:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 599:../../../os/hal/osal/rt/osal.h ****  */
 600:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 601:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 604:../../../os/hal/osal/rt/osal.h **** }
 605:../../../os/hal/osal/rt/osal.h **** #endif
 606:../../../os/hal/osal/rt/osal.h **** 
 607:../../../os/hal/osal/rt/osal.h **** /**
 608:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 609:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 610:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 611:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 612:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @sclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 623:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 624:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 626:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 627:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 628:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 629:../../../os/hal/osal/rt/osal.h ****  *
 630:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 631:../../../os/hal/osal/rt/osal.h ****  *
 632:../../../os/hal/osal/rt/osal.h ****  * @xclass
 633:../../../os/hal/osal/rt/osal.h ****  */
 634:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 635:../../../os/hal/osal/rt/osal.h **** 
 636:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 637:../../../os/hal/osal/rt/osal.h **** }
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h **** /**
 640:../../../os/hal/osal/rt/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 641:../../../os/hal/osal/rt/osal.h ****  *
 642:../../../os/hal/osal/rt/osal.h ****  * @param[in] systime   base system time
 643:../../../os/hal/osal/rt/osal.h ****  * @param[in] interval  interval to be added
 644:../../../os/hal/osal/rt/osal.h ****  * @return              The new system time.
 645:../../../os/hal/osal/rt/osal.h ****  *
 646:../../../os/hal/osal/rt/osal.h ****  * @xclass
 647:../../../os/hal/osal/rt/osal.h ****  */
 648:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 649:../../../os/hal/osal/rt/osal.h ****                                      sysinterval_t interval) {
 650:../../../os/hal/osal/rt/osal.h **** 
 651:../../../os/hal/osal/rt/osal.h ****   return chTimeAddX(systime, interval);
 652:../../../os/hal/osal/rt/osal.h **** }
 653:../../../os/hal/osal/rt/osal.h **** 
 654:../../../os/hal/osal/rt/osal.h **** /**
 655:../../../os/hal/osal/rt/osal.h ****  * @brief   Subtracts two system times returning an interval.
 656:../../../os/hal/osal/rt/osal.h ****  *
 657:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     first system time
 658:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       second system time
 659:../../../os/hal/osal/rt/osal.h ****  * @return              The interval representing the time difference.
 660:../../../os/hal/osal/rt/osal.h ****  *
 661:../../../os/hal/osal/rt/osal.h ****  * @xclass
 662:../../../os/hal/osal/rt/osal.h ****  */
 663:../../../os/hal/osal/rt/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 664:../../../os/hal/osal/rt/osal.h **** 
 665:../../../os/hal/osal/rt/osal.h ****   return chTimeDiffX(start, end);
 666:../../../os/hal/osal/rt/osal.h **** }
 667:../../../os/hal/osal/rt/osal.h **** 
 668:../../../os/hal/osal/rt/osal.h **** /**
 669:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 670:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 671:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 672:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 673:../../../os/hal/osal/rt/osal.h ****  *
 674:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 675:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 676:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 677:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 678:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 679:../../../os/hal/osal/rt/osal.h ****  *
 680:../../../os/hal/osal/rt/osal.h ****  * @xclass
 681:../../../os/hal/osal/rt/osal.h ****  */
 682:../../../os/hal/osal/rt/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 683:../../../os/hal/osal/rt/osal.h ****                                       systime_t start,
 684:../../../os/hal/osal/rt/osal.h ****                                       systime_t end) {
 685:../../../os/hal/osal/rt/osal.h **** 
 686:../../../os/hal/osal/rt/osal.h ****   return chTimeIsInRangeX(time, start, end);
 687:../../../os/hal/osal/rt/osal.h **** }
 688:../../../os/hal/osal/rt/osal.h **** 
 689:../../../os/hal/osal/rt/osal.h **** /**
 690:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 691:../../../os/hal/osal/rt/osal.h ****  *
 692:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 693:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 694:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 695:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 696:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 697:../../../os/hal/osal/rt/osal.h ****  *                      .
 698:../../../os/hal/osal/rt/osal.h ****  *
 699:../../../os/hal/osal/rt/osal.h ****  * @sclass
 700:../../../os/hal/osal/rt/osal.h ****  */
 701:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 702:../../../os/hal/osal/rt/osal.h **** 
 703:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(delay);
 704:../../../os/hal/osal/rt/osal.h **** }
 705:../../../os/hal/osal/rt/osal.h **** 
 706:../../../os/hal/osal/rt/osal.h **** /**
 707:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 708:../../../os/hal/osal/rt/osal.h ****  *
 709:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 710:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 711:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 712:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 713:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 714:../../../os/hal/osal/rt/osal.h ****  *                      .
 715:../../../os/hal/osal/rt/osal.h ****  *
 716:../../../os/hal/osal/rt/osal.h ****  * @api
 717:../../../os/hal/osal/rt/osal.h ****  */
 718:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 719:../../../os/hal/osal/rt/osal.h **** 
 720:../../../os/hal/osal/rt/osal.h ****   chThdSleep(delay);
 721:../../../os/hal/osal/rt/osal.h **** }
 722:../../../os/hal/osal/rt/osal.h **** 
 723:../../../os/hal/osal/rt/osal.h **** /**
 724:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/hal/osal/rt/osal.h ****  *          context.
 727:../../../os/hal/osal/rt/osal.h ****  *
 728:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 730:../../../os/hal/osal/rt/osal.h ****  *
 731:../../../os/hal/osal/rt/osal.h ****  * @sclass
 732:../../../os/hal/osal/rt/osal.h ****  */
 733:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 734:../../../os/hal/osal/rt/osal.h **** 
 735:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 736:../../../os/hal/osal/rt/osal.h **** }
 737:../../../os/hal/osal/rt/osal.h **** 
 738:../../../os/hal/osal/rt/osal.h **** /**
 739:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 740:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 741:../../../os/hal/osal/rt/osal.h ****  *          context.
 742:../../../os/hal/osal/rt/osal.h ****  *
 743:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 744:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 745:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 746:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 747:../../../os/hal/osal/rt/osal.h ****  *                        state.
 748:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 749:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 750:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 751:../../../os/hal/osal/rt/osal.h ****  *                      .
 752:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 753:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 754:../../../os/hal/osal/rt/osal.h ****  *
 755:../../../os/hal/osal/rt/osal.h ****  * @sclass
 756:../../../os/hal/osal/rt/osal.h ****  */
 757:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 758:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 759:../../../os/hal/osal/rt/osal.h **** 
 760:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 761:../../../os/hal/osal/rt/osal.h **** }
 762:../../../os/hal/osal/rt/osal.h **** 
 763:../../../os/hal/osal/rt/osal.h **** /**
 764:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 765:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 766:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 767:../../../os/hal/osal/rt/osal.h ****  *
 768:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 769:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 770:../../../os/hal/osal/rt/osal.h ****  *
 771:../../../os/hal/osal/rt/osal.h ****  * @iclass
 772:../../../os/hal/osal/rt/osal.h ****  */
 773:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 774:../../../os/hal/osal/rt/osal.h **** 
 775:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 776:../../../os/hal/osal/rt/osal.h **** }
 777:../../../os/hal/osal/rt/osal.h **** 
 778:../../../os/hal/osal/rt/osal.h **** /**
 779:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 780:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 781:../../../os/hal/osal/rt/osal.h ****  *          context.
 782:../../../os/hal/osal/rt/osal.h ****  *
 783:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 784:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 785:../../../os/hal/osal/rt/osal.h ****  *
 786:../../../os/hal/osal/rt/osal.h ****  * @iclass
 787:../../../os/hal/osal/rt/osal.h ****  */
 788:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 789:../../../os/hal/osal/rt/osal.h **** 
 790:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 791:../../../os/hal/osal/rt/osal.h **** }
 792:../../../os/hal/osal/rt/osal.h **** 
 793:../../../os/hal/osal/rt/osal.h **** /**
 794:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 795:../../../os/hal/osal/rt/osal.h ****  *
 796:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 797:../../../os/hal/osal/rt/osal.h ****  *
 798:../../../os/hal/osal/rt/osal.h ****  * @init
 799:../../../os/hal/osal/rt/osal.h ****  */
 800:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 801:../../../os/hal/osal/rt/osal.h **** 
 802:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 803:../../../os/hal/osal/rt/osal.h **** }
 804:../../../os/hal/osal/rt/osal.h **** 
 805:../../../os/hal/osal/rt/osal.h **** /**
 806:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 807:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 808:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 809:../../../os/hal/osal/rt/osal.h ****  *
 810:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 811:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 812:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 813:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 814:../../../os/hal/osal/rt/osal.h ****  *                        state.
 815:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 816:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 817:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 818:../../../os/hal/osal/rt/osal.h ****  *                      .
 819:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 820:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 821:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 822:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 823:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 824:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 825:../../../os/hal/osal/rt/osal.h ****  *
 826:../../../os/hal/osal/rt/osal.h ****  * @sclass
 827:../../../os/hal/osal/rt/osal.h ****  */
 828:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 829:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 830:../../../os/hal/osal/rt/osal.h **** 
 831:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 832:../../../os/hal/osal/rt/osal.h **** }
 833:../../../os/hal/osal/rt/osal.h **** 
 834:../../../os/hal/osal/rt/osal.h **** /**
 835:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 836:../../../os/hal/osal/rt/osal.h ****  *
 837:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 838:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 839:../../../os/hal/osal/rt/osal.h ****  *
 840:../../../os/hal/osal/rt/osal.h ****  * @iclass
 841:../../../os/hal/osal/rt/osal.h ****  */
 842:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 843:../../../os/hal/osal/rt/osal.h **** 
 844:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 845:../../../os/hal/osal/rt/osal.h **** }
 846:../../../os/hal/osal/rt/osal.h **** 
 847:../../../os/hal/osal/rt/osal.h **** /**
 848:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 849:../../../os/hal/osal/rt/osal.h ****  *
 850:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 851:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 852:../../../os/hal/osal/rt/osal.h ****  *
 853:../../../os/hal/osal/rt/osal.h ****  * @iclass
 854:../../../os/hal/osal/rt/osal.h ****  */
 855:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 856:../../../os/hal/osal/rt/osal.h **** 
 857:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 858:../../../os/hal/osal/rt/osal.h **** }
 859:../../../os/hal/osal/rt/osal.h **** 
 860:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 861:../../../os/hal/osal/rt/osal.h **** /**
 862:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes an event source object.
 863:../../../os/hal/osal/rt/osal.h ****  *
 864:../../../os/hal/osal/rt/osal.h ****  * @param[out] esp      pointer to the event source object
 865:../../../os/hal/osal/rt/osal.h ****  *
 866:../../../os/hal/osal/rt/osal.h ****  * @init
 867:../../../os/hal/osal/rt/osal.h ****  */
 868:../../../os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 869:../../../os/hal/osal/rt/osal.h **** 
 870:../../../os/hal/osal/rt/osal.h ****   chEvtObjectInit(esp);
 871:../../../os/hal/osal/rt/osal.h **** }
 872:../../../os/hal/osal/rt/osal.h **** #else
 873:../../../os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 874:../../../os/hal/osal/rt/osal.h **** 
 875:../../../os/hal/osal/rt/osal.h ****   osalDbgCheck(esp != NULL);
 876:../../../os/hal/osal/rt/osal.h **** 
 877:../../../os/hal/osal/rt/osal.h ****   esp->flags = (eventflags_t)0;
 878:../../../os/hal/osal/rt/osal.h ****   esp->cb    = NULL;
 879:../../../os/hal/osal/rt/osal.h ****   esp->param = NULL;
 880:../../../os/hal/osal/rt/osal.h **** }
 881:../../../os/hal/osal/rt/osal.h **** #endif
 882:../../../os/hal/osal/rt/osal.h **** 
 883:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 884:../../../os/hal/osal/rt/osal.h **** /**
 885:../../../os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 886:../../../os/hal/osal/rt/osal.h ****  *
 887:../../../os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 888:../../../os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 889:../../../os/hal/osal/rt/osal.h ****  *
 890:../../../os/hal/osal/rt/osal.h ****  * @iclass
 891:../../../os/hal/osal/rt/osal.h ****  */
 892:../../../os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 893:../../../os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 894:../../../os/hal/osal/rt/osal.h **** 
 895:../../../os/hal/osal/rt/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 896:../../../os/hal/osal/rt/osal.h **** }
 897:../../../os/hal/osal/rt/osal.h **** #else
 898:../../../os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 899:../../../os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 900:../../../os/hal/osal/rt/osal.h **** 
 901:../../../os/hal/osal/rt/osal.h ****   osalDbgCheck(esp != NULL);
 902:../../../os/hal/osal/rt/osal.h **** 
 903:../../../os/hal/osal/rt/osal.h ****   esp->flags |= flags;
 904:../../../os/hal/osal/rt/osal.h ****   if (esp->cb != NULL) {
 905:../../../os/hal/osal/rt/osal.h ****     esp->cb(esp);
 906:../../../os/hal/osal/rt/osal.h ****   }
 907:../../../os/hal/osal/rt/osal.h **** }
 908:../../../os/hal/osal/rt/osal.h **** #endif
 909:../../../os/hal/osal/rt/osal.h **** 
 910:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 911:../../../os/hal/osal/rt/osal.h **** /**
 912:../../../os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 913:../../../os/hal/osal/rt/osal.h ****  *
 914:../../../os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 915:../../../os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 916:../../../os/hal/osal/rt/osal.h ****  *
 917:../../../os/hal/osal/rt/osal.h ****  * @iclass
 918:../../../os/hal/osal/rt/osal.h ****  */
 919:../../../os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlags(event_source_t *esp,
 920:../../../os/hal/osal/rt/osal.h ****                                            eventflags_t flags) {
 921:../../../os/hal/osal/rt/osal.h **** 
 922:../../../os/hal/osal/rt/osal.h ****   chEvtBroadcastFlags(esp, flags);
 923:../../../os/hal/osal/rt/osal.h **** }
 924:../../../os/hal/osal/rt/osal.h **** #else
 925:../../../os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlags(event_source_t *esp,
 926:../../../os/hal/osal/rt/osal.h ****                                            eventflags_t flags) {
 927:../../../os/hal/osal/rt/osal.h **** 
 928:../../../os/hal/osal/rt/osal.h ****   osalDbgCheck(esp != NULL);
 929:../../../os/hal/osal/rt/osal.h **** 
 930:../../../os/hal/osal/rt/osal.h ****   osalSysLock();
 931:../../../os/hal/osal/rt/osal.h ****   esp->flags |= flags;
 932:../../../os/hal/osal/rt/osal.h ****   if (esp->cb != NULL) {
 933:../../../os/hal/osal/rt/osal.h ****     esp->cb(esp);
 934:../../../os/hal/osal/rt/osal.h ****   }
 935:../../../os/hal/osal/rt/osal.h ****   osalSysUnlock();
 936:../../../os/hal/osal/rt/osal.h **** }
 937:../../../os/hal/osal/rt/osal.h **** #endif
 938:../../../os/hal/osal/rt/osal.h **** 
 939:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 940:../../../os/hal/osal/rt/osal.h **** /**
 941:../../../os/hal/osal/rt/osal.h ****  * @brief   Event callback setup.
 942:../../../os/hal/osal/rt/osal.h ****  * @note    The callback is invoked from ISR context and can
 943:../../../os/hal/osal/rt/osal.h ****  *          only invoke I-Class functions. The callback is meant
 944:../../../os/hal/osal/rt/osal.h ****  *          to wakeup the task that will handle the event by
 945:../../../os/hal/osal/rt/osal.h ****  *          calling @p osalEventGetAndClearFlagsI().
 946:../../../os/hal/osal/rt/osal.h ****  *
 947:../../../os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 948:../../../os/hal/osal/rt/osal.h ****  * @param[in] cb        pointer to the callback function
 949:../../../os/hal/osal/rt/osal.h ****  * @param[in] param     parameter to be passed to the callback function
 950:../../../os/hal/osal/rt/osal.h ****  *
 951:../../../os/hal/osal/rt/osal.h ****  * @api
 952:../../../os/hal/osal/rt/osal.h ****  */
 953:../../../os/hal/osal/rt/osal.h **** static inline void osalEventSetCallback(event_source_t *esp,
 954:../../../os/hal/osal/rt/osal.h ****                                         eventcallback_t cb,
 955:../../../os/hal/osal/rt/osal.h ****                                         void *param) {
 956:../../../os/hal/osal/rt/osal.h **** 
 957:../../../os/hal/osal/rt/osal.h ****   osalDbgCheck(esp != NULL);
 958:../../../os/hal/osal/rt/osal.h **** 
 959:../../../os/hal/osal/rt/osal.h ****   esp->cb    = cb;
 960:../../../os/hal/osal/rt/osal.h ****   esp->param = param;
 961:../../../os/hal/osal/rt/osal.h **** }
 962:../../../os/hal/osal/rt/osal.h **** #endif
 963:../../../os/hal/osal/rt/osal.h **** 
 964:../../../os/hal/osal/rt/osal.h **** /**
 965:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes s @p mutex_t object.
 966:../../../os/hal/osal/rt/osal.h ****  *
 967:../../../os/hal/osal/rt/osal.h ****  * @param[out] mp       pointer to the @p mutex_t object
 968:../../../os/hal/osal/rt/osal.h ****  *
 969:../../../os/hal/osal/rt/osal.h ****  * @init
 970:../../../os/hal/osal/rt/osal.h ****  */
 971:../../../os/hal/osal/rt/osal.h **** static inline void osalMutexObjectInit(mutex_t *mp) {
 972:../../../os/hal/osal/rt/osal.h **** 
 973:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES
 974:../../../os/hal/osal/rt/osal.h ****   chMtxObjectInit(mp);
  64               		.loc 2 974 0
  65 001a CF01      		movw r24,r30
  66 001c 0B96      		adiw r24,11
  67               	.LVL4:
  68 001e 0C94 0000 		jmp chMtxObjectInit
  69               	.LVL5:
  70               	.LBE86:
  71               	.LBE85:
  72               		.cfi_endproc
  73               	.LFE181:
  75               		.section	.text.adcStart,"ax",@progbits
  76               	.global	adcStart
  78               	adcStart:
  79               	.LFB182:
  77:../../../os/hal/src/hal_adc.c **** #endif
  78:../../../os/hal/src/hal_adc.c **** #if ADC_USE_MUTUAL_EXCLUSION == TRUE
  79:../../../os/hal/src/hal_adc.c ****   osalMutexObjectInit(&adcp->mutex);
  80:../../../os/hal/src/hal_adc.c **** #endif
  81:../../../os/hal/src/hal_adc.c **** #if defined(ADC_DRIVER_EXT_INIT_HOOK)
  82:../../../os/hal/src/hal_adc.c ****   ADC_DRIVER_EXT_INIT_HOOK(adcp);
  83:../../../os/hal/src/hal_adc.c **** #endif
  84:../../../os/hal/src/hal_adc.c **** }
  85:../../../os/hal/src/hal_adc.c **** 
  86:../../../os/hal/src/hal_adc.c **** /**
  87:../../../os/hal/src/hal_adc.c ****  * @brief   Configures and activates the ADC peripheral.
  88:../../../os/hal/src/hal_adc.c ****  *
  89:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
  90:../../../os/hal/src/hal_adc.c ****  * @param[in] config    pointer to the @p ADCConfig object. Depending on
  91:../../../os/hal/src/hal_adc.c ****  *                      the implementation the value can be @p NULL.
  92:../../../os/hal/src/hal_adc.c ****  *
  93:../../../os/hal/src/hal_adc.c ****  * @api
  94:../../../os/hal/src/hal_adc.c ****  */
  95:../../../os/hal/src/hal_adc.c **** void adcStart(ADCDriver *adcp, const ADCConfig *config) {
  80               		.loc 1 95 0
  81               		.cfi_startproc
  82               	.LVL6:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
  96               	.LBB87:
  97               	.LBB88:
  98               	.LBB89:
  99               	.LBB90:
 100               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 101               		.loc 3 437 0
 102               	/* #APP */
 103               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 104 0006 F894      		cli
 105               	 ;  0 "" 2
 106               	/* #NOAPP */
 107               	.LBE90:
 108               	.LBE89:
 109               	.LBE88:
 110               	.LBE87:
  96:../../../os/hal/src/hal_adc.c **** 
  97:../../../os/hal/src/hal_adc.c ****   osalDbgCheck(adcp != NULL);
  98:../../../os/hal/src/hal_adc.c **** 
  99:../../../os/hal/src/hal_adc.c ****   osalSysLock();
 100:../../../os/hal/src/hal_adc.c ****   osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 101:../../../os/hal/src/hal_adc.c ****                 "invalid state");
 102:../../../os/hal/src/hal_adc.c ****   adcp->config = config;
 111               		.loc 1 102 0
 112 0008 7A83      		std Y+2,r23
 113 000a 6983      		std Y+1,r22
 103:../../../os/hal/src/hal_adc.c ****   adc_lld_start(adcp);
 114               		.loc 1 103 0
 115 000c 0E94 0000 		call adc_lld_start
 116               	.LVL7:
 104:../../../os/hal/src/hal_adc.c ****   adcp->state = ADC_READY;
 117               		.loc 1 104 0
 118 0010 82E0      		ldi r24,lo8(2)
 119 0012 8883      		st Y,r24
 120               	.LBB91:
 121               	.LBB92:
 122               	.LBB93:
 123               	.LBB94:
 124               	.LBB95:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 125               		.loc 3 447 0
 126               	/* #APP */
 127               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 128 0014 7894      		sei
 129               	 ;  0 "" 2
 130               	/* epilogue start */
 131               	/* #NOAPP */
 132               	.LBE95:
 133               	.LBE94:
 134               	.LBE93:
 135               	.LBE92:
 136               	.LBE91:
 105:../../../os/hal/src/hal_adc.c ****   osalSysUnlock();
 106:../../../os/hal/src/hal_adc.c **** }
 137               		.loc 1 106 0
 138 0016 DF91      		pop r29
 139 0018 CF91      		pop r28
 140               	.LVL8:
 141 001a 0895      		ret
 142               		.cfi_endproc
 143               	.LFE182:
 145               		.section	.text.adcStop,"ax",@progbits
 146               	.global	adcStop
 148               	adcStop:
 149               	.LFB183:
 107:../../../os/hal/src/hal_adc.c **** 
 108:../../../os/hal/src/hal_adc.c **** /**
 109:../../../os/hal/src/hal_adc.c ****  * @brief   Deactivates the ADC peripheral.
 110:../../../os/hal/src/hal_adc.c ****  *
 111:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 112:../../../os/hal/src/hal_adc.c ****  *
 113:../../../os/hal/src/hal_adc.c ****  * @api
 114:../../../os/hal/src/hal_adc.c ****  */
 115:../../../os/hal/src/hal_adc.c **** void adcStop(ADCDriver *adcp) {
 150               		.loc 1 115 0
 151               		.cfi_startproc
 152               	.LVL9:
 153 0000 CF93      		push r28
 154               	.LCFI2:
 155               		.cfi_def_cfa_offset 3
 156               		.cfi_offset 28, -2
 157 0002 DF93      		push r29
 158               	.LCFI3:
 159               		.cfi_def_cfa_offset 4
 160               		.cfi_offset 29, -3
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 163               	/* stack size = 2 */
 164               	.L__stack_usage = 2
 165 0004 EC01      		movw r28,r24
 166               	.LBB96:
 167               	.LBB97:
 168               	.LBB98:
 169               	.LBB99:
 437:../../../os/common/ports/AVR/chcore.h **** }
 170               		.loc 3 437 0
 171               	/* #APP */
 172               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 173 0006 F894      		cli
 174               	 ;  0 "" 2
 175               	/* #NOAPP */
 176               	.LBE99:
 177               	.LBE98:
 178               	.LBE97:
 179               	.LBE96:
 116:../../../os/hal/src/hal_adc.c **** 
 117:../../../os/hal/src/hal_adc.c ****   osalDbgCheck(adcp != NULL);
 118:../../../os/hal/src/hal_adc.c **** 
 119:../../../os/hal/src/hal_adc.c ****   osalSysLock();
 120:../../../os/hal/src/hal_adc.c **** 
 121:../../../os/hal/src/hal_adc.c ****   osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 122:../../../os/hal/src/hal_adc.c ****                 "invalid state");
 123:../../../os/hal/src/hal_adc.c **** 
 124:../../../os/hal/src/hal_adc.c ****   adc_lld_stop(adcp);
 180               		.loc 1 124 0
 181 0008 0E94 0000 		call adc_lld_stop
 182               	.LVL10:
 125:../../../os/hal/src/hal_adc.c ****   adcp->config = NULL;
 183               		.loc 1 125 0
 184 000c 1A82      		std Y+2,__zero_reg__
 185 000e 1982      		std Y+1,__zero_reg__
 126:../../../os/hal/src/hal_adc.c ****   adcp->state  = ADC_STOP;
 186               		.loc 1 126 0
 187 0010 81E0      		ldi r24,lo8(1)
 188 0012 8883      		st Y,r24
 189               	.LBB100:
 190               	.LBB101:
 191               	.LBB102:
 192               	.LBB103:
 193               	.LBB104:
 194               		.loc 3 447 0
 195               	/* #APP */
 196               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 197 0014 7894      		sei
 198               	 ;  0 "" 2
 199               	/* epilogue start */
 200               	/* #NOAPP */
 201               	.LBE104:
 202               	.LBE103:
 203               	.LBE102:
 204               	.LBE101:
 205               	.LBE100:
 127:../../../os/hal/src/hal_adc.c **** 
 128:../../../os/hal/src/hal_adc.c ****   osalSysUnlock();
 129:../../../os/hal/src/hal_adc.c **** }
 206               		.loc 1 129 0
 207 0016 DF91      		pop r29
 208 0018 CF91      		pop r28
 209               	.LVL11:
 210 001a 0895      		ret
 211               		.cfi_endproc
 212               	.LFE183:
 214               		.section	.text.adcStartConversion,"ax",@progbits
 215               	.global	adcStartConversion
 217               	adcStartConversion:
 218               	.LFB184:
 130:../../../os/hal/src/hal_adc.c **** 
 131:../../../os/hal/src/hal_adc.c **** /**
 132:../../../os/hal/src/hal_adc.c ****  * @brief   Starts an ADC conversion.
 133:../../../os/hal/src/hal_adc.c ****  * @details Starts an asynchronous conversion operation.
 134:../../../os/hal/src/hal_adc.c ****  * @note    The buffer is organized as a matrix of M*N elements where M is the
 135:../../../os/hal/src/hal_adc.c ****  *          channels number configured into the conversion group and N is the
 136:../../../os/hal/src/hal_adc.c ****  *          buffer depth. The samples are sequentially written into the buffer
 137:../../../os/hal/src/hal_adc.c ****  *          with no gaps.
 138:../../../os/hal/src/hal_adc.c ****  *
 139:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 140:../../../os/hal/src/hal_adc.c ****  * @param[in] grpp      pointer to a @p ADCConversionGroup object
 141:../../../os/hal/src/hal_adc.c ****  * @param[out] samples  pointer to the samples buffer
 142:../../../os/hal/src/hal_adc.c ****  * @param[in] depth     buffer depth (matrix rows number). The buffer depth
 143:../../../os/hal/src/hal_adc.c ****  *                      must be one or an even number.
 144:../../../os/hal/src/hal_adc.c ****  *
 145:../../../os/hal/src/hal_adc.c ****  * @api
 146:../../../os/hal/src/hal_adc.c ****  */
 147:../../../os/hal/src/hal_adc.c **** void adcStartConversion(ADCDriver *adcp,
 148:../../../os/hal/src/hal_adc.c ****                         const ADCConversionGroup *grpp,
 149:../../../os/hal/src/hal_adc.c ****                         adcsample_t *samples,
 150:../../../os/hal/src/hal_adc.c ****                         size_t depth) {
 219               		.loc 1 150 0
 220               		.cfi_startproc
 221               	.LVL12:
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
 226               	.LBB105:
 227               	.LBB106:
 228               	.LBB107:
 229               	.LBB108:
 437:../../../os/common/ports/AVR/chcore.h **** }
 230               		.loc 3 437 0
 231               	/* #APP */
 232               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 233 0000 F894      		cli
 234               	 ;  0 "" 2
 235               	.LVL13:
 236               	/* #NOAPP */
 237               	.LBE108:
 238               	.LBE107:
 239               	.LBE106:
 240               	.LBE105:
 241               	.LBB109:
 242               	.LBB110:
 151:../../../os/hal/src/hal_adc.c **** 
 152:../../../os/hal/src/hal_adc.c ****   osalSysLock();
 153:../../../os/hal/src/hal_adc.c ****   adcStartConversionI(adcp, grpp, samples, depth);
 154:../../../os/hal/src/hal_adc.c ****   osalSysUnlock();
 155:../../../os/hal/src/hal_adc.c **** }
 156:../../../os/hal/src/hal_adc.c **** 
 157:../../../os/hal/src/hal_adc.c **** /**
 158:../../../os/hal/src/hal_adc.c ****  * @brief   Starts an ADC conversion.
 159:../../../os/hal/src/hal_adc.c ****  * @details Starts an asynchronous conversion operation.
 160:../../../os/hal/src/hal_adc.c ****  * @post    The callbacks associated to the conversion group will be invoked
 161:../../../os/hal/src/hal_adc.c ****  *          on buffer fill and error events.
 162:../../../os/hal/src/hal_adc.c ****  * @note    The buffer is organized as a matrix of M*N elements where M is the
 163:../../../os/hal/src/hal_adc.c ****  *          channels number configured into the conversion group and N is the
 164:../../../os/hal/src/hal_adc.c ****  *          buffer depth. The samples are sequentially written into the buffer
 165:../../../os/hal/src/hal_adc.c ****  *          with no gaps.
 166:../../../os/hal/src/hal_adc.c ****  *
 167:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 168:../../../os/hal/src/hal_adc.c ****  * @param[in] grpp      pointer to a @p ADCConversionGroup object
 169:../../../os/hal/src/hal_adc.c ****  * @param[out] samples  pointer to the samples buffer
 170:../../../os/hal/src/hal_adc.c ****  * @param[in] depth     buffer depth (matrix rows number). The buffer depth
 171:../../../os/hal/src/hal_adc.c ****  *                      must be one or an even number.
 172:../../../os/hal/src/hal_adc.c ****  *
 173:../../../os/hal/src/hal_adc.c ****  * @iclass
 174:../../../os/hal/src/hal_adc.c ****  */
 175:../../../os/hal/src/hal_adc.c **** void adcStartConversionI(ADCDriver *adcp,
 176:../../../os/hal/src/hal_adc.c ****                          const ADCConversionGroup *grpp,
 177:../../../os/hal/src/hal_adc.c ****                          adcsample_t *samples,
 178:../../../os/hal/src/hal_adc.c ****                          size_t depth) {
 179:../../../os/hal/src/hal_adc.c **** 
 180:../../../os/hal/src/hal_adc.c ****   osalDbgCheckClassI();
 181:../../../os/hal/src/hal_adc.c ****   osalDbgCheck((adcp != NULL) && (grpp != NULL) && (samples != NULL) &&
 182:../../../os/hal/src/hal_adc.c ****                (depth > 0U) && ((depth == 1U) || ((depth & 1U) == 0U)));
 183:../../../os/hal/src/hal_adc.c ****   osalDbgAssert((adcp->state == ADC_READY) ||
 184:../../../os/hal/src/hal_adc.c ****                 (adcp->state == ADC_COMPLETE) ||
 185:../../../os/hal/src/hal_adc.c ****                 (adcp->state == ADC_ERROR),
 186:../../../os/hal/src/hal_adc.c ****                 "not ready");
 187:../../../os/hal/src/hal_adc.c **** 
 188:../../../os/hal/src/hal_adc.c ****   adcp->samples  = samples;
 243               		.loc 1 188 0
 244 0002 FC01      		movw r30,r24
 245 0004 5483      		std Z+4,r21
 246 0006 4383      		std Z+3,r20
 189:../../../os/hal/src/hal_adc.c ****   adcp->depth    = depth;
 247               		.loc 1 189 0
 248 0008 3683      		std Z+6,r19
 249 000a 2583      		std Z+5,r18
 190:../../../os/hal/src/hal_adc.c ****   adcp->grpp     = grpp;
 250               		.loc 1 190 0
 251 000c 7087      		std Z+8,r23
 252 000e 6783      		std Z+7,r22
 191:../../../os/hal/src/hal_adc.c ****   adcp->state    = ADC_ACTIVE;
 253               		.loc 1 191 0
 254 0010 23E0      		ldi r18,lo8(3)
 255               	.LVL14:
 256 0012 2083      		st Z,r18
 192:../../../os/hal/src/hal_adc.c ****   adc_lld_start_conversion(adcp);
 257               		.loc 1 192 0
 258 0014 0E94 0000 		call adc_lld_start_conversion
 259               	.LVL15:
 260               	.LBE110:
 261               	.LBE109:
 262               	.LBB111:
 263               	.LBB112:
 264               	.LBB113:
 265               	.LBB114:
 266               	.LBB115:
 267               		.loc 3 447 0
 268               	/* #APP */
 269               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 270 0018 7894      		sei
 271               	 ;  0 "" 2
 272               	/* #NOAPP */
 273 001a 0895      		ret
 274               	.LBE115:
 275               	.LBE114:
 276               	.LBE113:
 277               	.LBE112:
 278               	.LBE111:
 279               		.cfi_endproc
 280               	.LFE184:
 282               		.section	.text.adcStartConversionI,"ax",@progbits
 283               	.global	adcStartConversionI
 285               	adcStartConversionI:
 286               	.LFB185:
 178:../../../os/hal/src/hal_adc.c **** 
 287               		.loc 1 178 0
 288               		.cfi_startproc
 289               	.LVL16:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 188:../../../os/hal/src/hal_adc.c ****   adcp->depth    = depth;
 294               		.loc 1 188 0
 295 0000 FC01      		movw r30,r24
 296 0002 5483      		std Z+4,r21
 297 0004 4383      		std Z+3,r20
 189:../../../os/hal/src/hal_adc.c ****   adcp->grpp     = grpp;
 298               		.loc 1 189 0
 299 0006 3683      		std Z+6,r19
 300 0008 2583      		std Z+5,r18
 190:../../../os/hal/src/hal_adc.c ****   adcp->state    = ADC_ACTIVE;
 301               		.loc 1 190 0
 302 000a 7087      		std Z+8,r23
 303 000c 6783      		std Z+7,r22
 191:../../../os/hal/src/hal_adc.c ****   adc_lld_start_conversion(adcp);
 304               		.loc 1 191 0
 305 000e 23E0      		ldi r18,lo8(3)
 306               	.LVL17:
 307 0010 2083      		st Z,r18
 308               		.loc 1 192 0
 309 0012 0C94 0000 		jmp adc_lld_start_conversion
 310               	.LVL18:
 311               		.cfi_endproc
 312               	.LFE185:
 314               		.section	.text.adcStopConversion,"ax",@progbits
 315               	.global	adcStopConversion
 317               	adcStopConversion:
 318               	.LFB186:
 193:../../../os/hal/src/hal_adc.c **** }
 194:../../../os/hal/src/hal_adc.c **** 
 195:../../../os/hal/src/hal_adc.c **** /**
 196:../../../os/hal/src/hal_adc.c ****  * @brief   Stops an ongoing conversion.
 197:../../../os/hal/src/hal_adc.c ****  * @details This function stops the currently ongoing conversion and returns
 198:../../../os/hal/src/hal_adc.c ****  *          the driver in the @p ADC_READY state. If there was no conversion
 199:../../../os/hal/src/hal_adc.c ****  *          being processed then the function does nothing.
 200:../../../os/hal/src/hal_adc.c ****  *
 201:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 202:../../../os/hal/src/hal_adc.c ****  *
 203:../../../os/hal/src/hal_adc.c ****  * @api
 204:../../../os/hal/src/hal_adc.c ****  */
 205:../../../os/hal/src/hal_adc.c **** void adcStopConversion(ADCDriver *adcp) {
 319               		.loc 1 205 0
 320               		.cfi_startproc
 321               	.LVL19:
 322 0000 CF93      		push r28
 323               	.LCFI4:
 324               		.cfi_def_cfa_offset 3
 325               		.cfi_offset 28, -2
 326 0002 DF93      		push r29
 327               	.LCFI5:
 328               		.cfi_def_cfa_offset 4
 329               		.cfi_offset 29, -3
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 2 */
 333               	.L__stack_usage = 2
 334               	.LBB116:
 335               	.LBB117:
 336               	.LBB118:
 337               	.LBB119:
 437:../../../os/common/ports/AVR/chcore.h **** }
 338               		.loc 3 437 0
 339               	/* #APP */
 340               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 341 0004 F894      		cli
 342               	 ;  0 "" 2
 343               	/* #NOAPP */
 344               	.LBE119:
 345               	.LBE118:
 346               	.LBE117:
 347               	.LBE116:
 206:../../../os/hal/src/hal_adc.c **** 
 207:../../../os/hal/src/hal_adc.c ****   osalDbgCheck(adcp != NULL);
 208:../../../os/hal/src/hal_adc.c **** 
 209:../../../os/hal/src/hal_adc.c ****   osalSysLock();
 210:../../../os/hal/src/hal_adc.c ****   osalDbgAssert((adcp->state == ADC_READY) || (adcp->state == ADC_ACTIVE),
 211:../../../os/hal/src/hal_adc.c ****                 "invalid state");
 212:../../../os/hal/src/hal_adc.c ****   if (adcp->state != ADC_READY) {
 348               		.loc 1 212 0
 349 0006 FC01      		movw r30,r24
 350 0008 2081      		ld r18,Z
 351 000a 2230      		cpi r18,lo8(2)
 352 000c 01F0      		breq .L8
 353 000e EC01      		movw r28,r24
 213:../../../os/hal/src/hal_adc.c ****     adc_lld_stop_conversion(adcp);
 354               		.loc 1 213 0
 355 0010 0E94 0000 		call adc_lld_stop_conversion
 356               	.LVL20:
 214:../../../os/hal/src/hal_adc.c ****     adcp->grpp  = NULL;
 357               		.loc 1 214 0
 358 0014 1886      		std Y+8,__zero_reg__
 359 0016 1F82      		std Y+7,__zero_reg__
 215:../../../os/hal/src/hal_adc.c ****     adcp->state = ADC_READY;
 360               		.loc 1 215 0
 361 0018 82E0      		ldi r24,lo8(2)
 362 001a 8883      		st Y,r24
 363               	.LVL21:
 364               	.LBB120:
 365               	.LBB121:
 790:../../../os/hal/osal/rt/osal.h **** }
 366               		.loc 2 790 0
 367 001c 6EEF      		ldi r22,lo8(-2)
 368 001e 7FEF      		ldi r23,lo8(-1)
 369 0020 CE01      		movw r24,r28
 370 0022 0996      		adiw r24,9
 371               	.LVL22:
 372 0024 0E94 0000 		call chThdResumeS
 373               	.LVL23:
 374               	.L8:
 375               	.LBE121:
 376               	.LBE120:
 377               	.LBB122:
 378               	.LBB123:
 379               	.LBB124:
 380               	.LBB125:
 381               	.LBB126:
 382               		.loc 3 447 0
 383               	/* #APP */
 384               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 385 0028 7894      		sei
 386               	 ;  0 "" 2
 387               	/* epilogue start */
 388               	/* #NOAPP */
 389               	.LBE126:
 390               	.LBE125:
 391               	.LBE124:
 392               	.LBE123:
 393               	.LBE122:
 216:../../../os/hal/src/hal_adc.c ****     _adc_reset_s(adcp);
 217:../../../os/hal/src/hal_adc.c ****   }
 218:../../../os/hal/src/hal_adc.c ****   osalSysUnlock();
 219:../../../os/hal/src/hal_adc.c **** }
 394               		.loc 1 219 0
 395 002a DF91      		pop r29
 396 002c CF91      		pop r28
 397 002e 0895      		ret
 398               		.cfi_endproc
 399               	.LFE186:
 401               		.section	.text.adcStopConversionI,"ax",@progbits
 402               	.global	adcStopConversionI
 404               	adcStopConversionI:
 405               	.LFB187:
 220:../../../os/hal/src/hal_adc.c **** 
 221:../../../os/hal/src/hal_adc.c **** /**
 222:../../../os/hal/src/hal_adc.c ****  * @brief   Stops an ongoing conversion.
 223:../../../os/hal/src/hal_adc.c ****  * @details This function stops the currently ongoing conversion and returns
 224:../../../os/hal/src/hal_adc.c ****  *          the driver in the @p ADC_READY state. If there was no conversion
 225:../../../os/hal/src/hal_adc.c ****  *          being processed then the function does nothing.
 226:../../../os/hal/src/hal_adc.c ****  *
 227:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 228:../../../os/hal/src/hal_adc.c ****  *
 229:../../../os/hal/src/hal_adc.c ****  * @iclass
 230:../../../os/hal/src/hal_adc.c ****  */
 231:../../../os/hal/src/hal_adc.c **** void adcStopConversionI(ADCDriver *adcp) {
 406               		.loc 1 231 0
 407               		.cfi_startproc
 408               	.LVL24:
 409 0000 CF93      		push r28
 410               	.LCFI6:
 411               		.cfi_def_cfa_offset 3
 412               		.cfi_offset 28, -2
 413 0002 DF93      		push r29
 414               	.LCFI7:
 415               		.cfi_def_cfa_offset 4
 416               		.cfi_offset 29, -3
 417               	/* prologue: function */
 418               	/* frame size = 0 */
 419               	/* stack size = 2 */
 420               	.L__stack_usage = 2
 232:../../../os/hal/src/hal_adc.c **** 
 233:../../../os/hal/src/hal_adc.c ****   osalDbgCheckClassI();
 234:../../../os/hal/src/hal_adc.c ****   osalDbgCheck(adcp != NULL);
 235:../../../os/hal/src/hal_adc.c ****   osalDbgAssert((adcp->state == ADC_READY) ||
 236:../../../os/hal/src/hal_adc.c ****                 (adcp->state == ADC_ACTIVE) ||
 237:../../../os/hal/src/hal_adc.c ****                 (adcp->state == ADC_COMPLETE),
 238:../../../os/hal/src/hal_adc.c ****                 "invalid state");
 239:../../../os/hal/src/hal_adc.c **** 
 240:../../../os/hal/src/hal_adc.c ****   if (adcp->state != ADC_READY) {
 421               		.loc 1 240 0
 422 0004 FC01      		movw r30,r24
 423 0006 2081      		ld r18,Z
 424 0008 2230      		cpi r18,lo8(2)
 425 000a 01F0      		breq .L13
 426 000c EC01      		movw r28,r24
 241:../../../os/hal/src/hal_adc.c ****     adc_lld_stop_conversion(adcp);
 427               		.loc 1 241 0
 428 000e 0E94 0000 		call adc_lld_stop_conversion
 429               	.LVL25:
 242:../../../os/hal/src/hal_adc.c ****     adcp->grpp  = NULL;
 430               		.loc 1 242 0
 431 0012 1886      		std Y+8,__zero_reg__
 432 0014 1F82      		std Y+7,__zero_reg__
 243:../../../os/hal/src/hal_adc.c ****     adcp->state = ADC_READY;
 433               		.loc 1 243 0
 434 0016 82E0      		ldi r24,lo8(2)
 435 0018 8883      		st Y,r24
 436               	.LVL26:
 437               	.LBB127:
 438               	.LBB128:
 775:../../../os/hal/osal/rt/osal.h **** }
 439               		.loc 2 775 0
 440 001a 6EEF      		ldi r22,lo8(-2)
 441 001c 7FEF      		ldi r23,lo8(-1)
 442 001e CE01      		movw r24,r28
 443 0020 0996      		adiw r24,9
 444               	.LVL27:
 445               	/* epilogue start */
 446               	.LBE128:
 447               	.LBE127:
 244:../../../os/hal/src/hal_adc.c ****     _adc_reset_i(adcp);
 245:../../../os/hal/src/hal_adc.c ****   }
 246:../../../os/hal/src/hal_adc.c **** }
 448               		.loc 1 246 0
 449 0022 DF91      		pop r29
 450 0024 CF91      		pop r28
 451               	.LVL28:
 452               	.LBB130:
 453               	.LBB129:
 775:../../../os/hal/osal/rt/osal.h **** }
 454               		.loc 2 775 0
 455 0026 0C94 0000 		jmp chThdResumeI
 456               	.LVL29:
 457               	.L13:
 458               	/* epilogue start */
 459               	.LBE129:
 460               	.LBE130:
 461               		.loc 1 246 0
 462 002a DF91      		pop r29
 463 002c CF91      		pop r28
 464 002e 0895      		ret
 465               		.cfi_endproc
 466               	.LFE187:
 468               		.section	.text.adcConvert,"ax",@progbits
 469               	.global	adcConvert
 471               	adcConvert:
 472               	.LFB188:
 247:../../../os/hal/src/hal_adc.c **** 
 248:../../../os/hal/src/hal_adc.c **** #if (ADC_USE_WAIT == TRUE) || defined(__DOXYGEN__)
 249:../../../os/hal/src/hal_adc.c **** /**
 250:../../../os/hal/src/hal_adc.c ****  * @brief   Performs an ADC conversion.
 251:../../../os/hal/src/hal_adc.c ****  * @details Performs a synchronous conversion operation.
 252:../../../os/hal/src/hal_adc.c ****  * @note    The buffer is organized as a matrix of M*N elements where M is the
 253:../../../os/hal/src/hal_adc.c ****  *          channels number configured into the conversion group and N is the
 254:../../../os/hal/src/hal_adc.c ****  *          buffer depth. The samples are sequentially written into the buffer
 255:../../../os/hal/src/hal_adc.c ****  *          with no gaps.
 256:../../../os/hal/src/hal_adc.c ****  *
 257:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 258:../../../os/hal/src/hal_adc.c ****  * @param[in] grpp      pointer to a @p ADCConversionGroup object
 259:../../../os/hal/src/hal_adc.c ****  * @param[out] samples  pointer to the samples buffer
 260:../../../os/hal/src/hal_adc.c ****  * @param[in] depth     buffer depth (matrix rows number). The buffer depth
 261:../../../os/hal/src/hal_adc.c ****  *                      must be one or an even number.
 262:../../../os/hal/src/hal_adc.c ****  * @return              The operation result.
 263:../../../os/hal/src/hal_adc.c ****  * @retval MSG_OK       Conversion finished.
 264:../../../os/hal/src/hal_adc.c ****  * @retval MSG_RESET    The conversion has been stopped using
 265:../../../os/hal/src/hal_adc.c ****  *                      @p acdStopConversion() or @p acdStopConversionI(),
 266:../../../os/hal/src/hal_adc.c ****  *                      the result buffer may contain incorrect data.
 267:../../../os/hal/src/hal_adc.c ****  * @retval MSG_TIMEOUT  The conversion has been stopped because an hardware
 268:../../../os/hal/src/hal_adc.c ****  *                      error.
 269:../../../os/hal/src/hal_adc.c ****  *
 270:../../../os/hal/src/hal_adc.c ****  * @api
 271:../../../os/hal/src/hal_adc.c ****  */
 272:../../../os/hal/src/hal_adc.c **** msg_t adcConvert(ADCDriver *adcp,
 273:../../../os/hal/src/hal_adc.c ****                  const ADCConversionGroup *grpp,
 274:../../../os/hal/src/hal_adc.c ****                  adcsample_t *samples,
 275:../../../os/hal/src/hal_adc.c ****                  size_t depth) {
 473               		.loc 1 275 0
 474               		.cfi_startproc
 475               	.LVL30:
 476 0000 CF93      		push r28
 477               	.LCFI8:
 478               		.cfi_def_cfa_offset 3
 479               		.cfi_offset 28, -2
 480 0002 DF93      		push r29
 481               	.LCFI9:
 482               		.cfi_def_cfa_offset 4
 483               		.cfi_offset 29, -3
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486               	/* stack size = 2 */
 487               	.L__stack_usage = 2
 488 0004 EC01      		movw r28,r24
 489               	.LBB131:
 490               	.LBB132:
 491               	.LBB133:
 492               	.LBB134:
 437:../../../os/common/ports/AVR/chcore.h **** }
 493               		.loc 3 437 0
 494               	/* #APP */
 495               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 496 0006 F894      		cli
 497               	 ;  0 "" 2
 498               	.LVL31:
 499               	/* #NOAPP */
 500               	.LBE134:
 501               	.LBE133:
 502               	.LBE132:
 503               	.LBE131:
 504               	.LBB135:
 505               	.LBB136:
 188:../../../os/hal/src/hal_adc.c ****   adcp->depth    = depth;
 506               		.loc 1 188 0
 507 0008 5C83      		std Y+4,r21
 508 000a 4B83      		std Y+3,r20
 189:../../../os/hal/src/hal_adc.c ****   adcp->grpp     = grpp;
 509               		.loc 1 189 0
 510 000c 3E83      		std Y+6,r19
 511 000e 2D83      		std Y+5,r18
 190:../../../os/hal/src/hal_adc.c ****   adcp->state    = ADC_ACTIVE;
 512               		.loc 1 190 0
 513 0010 7887      		std Y+8,r23
 514 0012 6F83      		std Y+7,r22
 191:../../../os/hal/src/hal_adc.c ****   adc_lld_start_conversion(adcp);
 515               		.loc 1 191 0
 516 0014 83E0      		ldi r24,lo8(3)
 517               	.LVL32:
 518 0016 8883      		st Y,r24
 192:../../../os/hal/src/hal_adc.c **** }
 519               		.loc 1 192 0
 520 0018 CE01      		movw r24,r28
 521 001a 0E94 0000 		call adc_lld_start_conversion
 522               	.LVL33:
 523               	.LBE136:
 524               	.LBE135:
 525               	.LBB137:
 526               	.LBB138:
 735:../../../os/hal/osal/rt/osal.h **** }
 527               		.loc 2 735 0
 528 001e 6FEF      		ldi r22,lo8(-1)
 529 0020 7FEF      		ldi r23,lo8(-1)
 530 0022 CE01      		movw r24,r28
 531 0024 0996      		adiw r24,9
 532               	.LVL34:
 533 0026 0E94 0000 		call chThdSuspendTimeoutS
 534               	.LVL35:
 535               	.LBE138:
 536               	.LBE137:
 537               	.LBB139:
 538               	.LBB140:
 539               	.LBB141:
 540               	.LBB142:
 541               	.LBB143:
 542               		.loc 3 447 0
 543               	/* #APP */
 544               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 545 002a 7894      		sei
 546               	 ;  0 "" 2
 547               	/* epilogue start */
 548               	/* #NOAPP */
 549               	.LBE143:
 550               	.LBE142:
 551               	.LBE141:
 552               	.LBE140:
 553               	.LBE139:
 276:../../../os/hal/src/hal_adc.c ****   msg_t msg;
 277:../../../os/hal/src/hal_adc.c **** 
 278:../../../os/hal/src/hal_adc.c ****   osalSysLock();
 279:../../../os/hal/src/hal_adc.c ****   osalDbgAssert(adcp->thread == NULL, "already waiting");
 280:../../../os/hal/src/hal_adc.c ****   adcStartConversionI(adcp, grpp, samples, depth);
 281:../../../os/hal/src/hal_adc.c ****   msg = osalThreadSuspendS(&adcp->thread);
 282:../../../os/hal/src/hal_adc.c ****   osalSysUnlock();
 283:../../../os/hal/src/hal_adc.c ****   return msg;
 284:../../../os/hal/src/hal_adc.c **** }
 554               		.loc 1 284 0
 555 002c DF91      		pop r29
 556 002e CF91      		pop r28
 557               	.LVL36:
 558 0030 0895      		ret
 559               		.cfi_endproc
 560               	.LFE188:
 562               		.section	.text.adcAcquireBus,"ax",@progbits
 563               	.global	adcAcquireBus
 565               	adcAcquireBus:
 566               	.LFB189:
 285:../../../os/hal/src/hal_adc.c **** #endif /* ADC_USE_WAIT == TRUE */
 286:../../../os/hal/src/hal_adc.c **** 
 287:../../../os/hal/src/hal_adc.c **** #if (ADC_USE_MUTUAL_EXCLUSION == TRUE) || defined(__DOXYGEN__)
 288:../../../os/hal/src/hal_adc.c **** /**
 289:../../../os/hal/src/hal_adc.c ****  * @brief   Gains exclusive access to the ADC peripheral.
 290:../../../os/hal/src/hal_adc.c ****  * @details This function tries to gain ownership to the ADC bus, if the bus
 291:../../../os/hal/src/hal_adc.c ****  *          is already being used then the invoking thread is queued.
 292:../../../os/hal/src/hal_adc.c ****  * @pre     In order to use this function the option
 293:../../../os/hal/src/hal_adc.c ****  *          @p ADC_USE_MUTUAL_EXCLUSION must be enabled.
 294:../../../os/hal/src/hal_adc.c ****  *
 295:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 296:../../../os/hal/src/hal_adc.c ****  *
 297:../../../os/hal/src/hal_adc.c ****  * @api
 298:../../../os/hal/src/hal_adc.c ****  */
 299:../../../os/hal/src/hal_adc.c **** void adcAcquireBus(ADCDriver *adcp) {
 567               		.loc 1 299 0
 568               		.cfi_startproc
 569               	.LVL37:
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 0 */
 573               	.L__stack_usage = 0
 574               	.LBB144:
 575               	.LBB145:
 975:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 976:../../../os/hal/osal/rt/osal.h ****   chSemObjectInit((semaphore_t *)mp, 1);
 977:../../../os/hal/osal/rt/osal.h **** #else
 978:../../../os/hal/osal/rt/osal.h ****  *mp = 0;
 979:../../../os/hal/osal/rt/osal.h **** #endif
 980:../../../os/hal/osal/rt/osal.h **** }
 981:../../../os/hal/osal/rt/osal.h **** 
 982:../../../os/hal/osal/rt/osal.h **** /**
 983:../../../os/hal/osal/rt/osal.h ****  * @brief   Locks the specified mutex.
 984:../../../os/hal/osal/rt/osal.h ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 985:../../../os/hal/osal/rt/osal.h ****  *          mutexes.
 986:../../../os/hal/osal/rt/osal.h ****  *
 987:../../../os/hal/osal/rt/osal.h ****  * @param[in,out] mp    pointer to the @p mutex_t object
 988:../../../os/hal/osal/rt/osal.h ****  *
 989:../../../os/hal/osal/rt/osal.h ****  * @api
 990:../../../os/hal/osal/rt/osal.h ****  */
 991:../../../os/hal/osal/rt/osal.h **** static inline void osalMutexLock(mutex_t *mp) {
 992:../../../os/hal/osal/rt/osal.h **** 
 993:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES
 994:../../../os/hal/osal/rt/osal.h ****   chMtxLock(mp);
 576               		.loc 2 994 0
 577 0000 0B96      		adiw r24,11
 578               	.LVL38:
 579 0002 0C94 0000 		jmp chMtxLock
 580               	.LVL39:
 581               	.LBE145:
 582               	.LBE144:
 583               		.cfi_endproc
 584               	.LFE189:
 586               		.section	.text.adcReleaseBus,"ax",@progbits
 587               	.global	adcReleaseBus
 589               	adcReleaseBus:
 590               	.LFB190:
 300:../../../os/hal/src/hal_adc.c **** 
 301:../../../os/hal/src/hal_adc.c ****   osalDbgCheck(adcp != NULL);
 302:../../../os/hal/src/hal_adc.c **** 
 303:../../../os/hal/src/hal_adc.c ****   osalMutexLock(&adcp->mutex);
 304:../../../os/hal/src/hal_adc.c **** }
 305:../../../os/hal/src/hal_adc.c **** 
 306:../../../os/hal/src/hal_adc.c **** /**
 307:../../../os/hal/src/hal_adc.c ****  * @brief   Releases exclusive access to the ADC peripheral.
 308:../../../os/hal/src/hal_adc.c ****  * @pre     In order to use this function the option
 309:../../../os/hal/src/hal_adc.c ****  *          @p ADC_USE_MUTUAL_EXCLUSION must be enabled.
 310:../../../os/hal/src/hal_adc.c ****  *
 311:../../../os/hal/src/hal_adc.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 312:../../../os/hal/src/hal_adc.c ****  *
 313:../../../os/hal/src/hal_adc.c ****  * @api
 314:../../../os/hal/src/hal_adc.c ****  */
 315:../../../os/hal/src/hal_adc.c **** void adcReleaseBus(ADCDriver *adcp) {
 591               		.loc 1 315 0
 592               		.cfi_startproc
 593               	.LVL40:
 594               	/* prologue: function */
 595               	/* frame size = 0 */
 596               	/* stack size = 0 */
 597               	.L__stack_usage = 0
 598               	.LBB146:
 599               	.LBB147:
 995:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 996:../../../os/hal/osal/rt/osal.h ****   chSemWait((semaphore_t *)mp);
 997:../../../os/hal/osal/rt/osal.h **** #else
 998:../../../os/hal/osal/rt/osal.h ****   *mp = 1;
 999:../../../os/hal/osal/rt/osal.h **** #endif
1000:../../../os/hal/osal/rt/osal.h **** }
1001:../../../os/hal/osal/rt/osal.h **** 
1002:../../../os/hal/osal/rt/osal.h **** /**
1003:../../../os/hal/osal/rt/osal.h ****  * @brief   Unlocks the specified mutex.
1004:../../../os/hal/osal/rt/osal.h ****  * @note    The HAL guarantees to release mutex in reverse lock order. The
1005:../../../os/hal/osal/rt/osal.h ****  *          mutex being unlocked is guaranteed to be the last locked mutex
1006:../../../os/hal/osal/rt/osal.h ****  *          by the invoking thread.
1007:../../../os/hal/osal/rt/osal.h ****  *          The implementation can rely on this behavior and eventually
1008:../../../os/hal/osal/rt/osal.h ****  *          ignore the @p mp parameter which is supplied in order to support
1009:../../../os/hal/osal/rt/osal.h ****  *          those OSes not supporting a stack of the owned mutexes.
1010:../../../os/hal/osal/rt/osal.h ****  *
1011:../../../os/hal/osal/rt/osal.h ****  * @param[in,out] mp    pointer to the @p mutex_t object
1012:../../../os/hal/osal/rt/osal.h ****  *
1013:../../../os/hal/osal/rt/osal.h ****  * @api
1014:../../../os/hal/osal/rt/osal.h ****  */
1015:../../../os/hal/osal/rt/osal.h **** static inline void osalMutexUnlock(mutex_t *mp) {
1016:../../../os/hal/osal/rt/osal.h **** 
1017:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES
1018:../../../os/hal/osal/rt/osal.h ****   chMtxUnlock(mp);
 600               		.loc 2 1018 0
 601 0000 0B96      		adiw r24,11
 602               	.LVL41:
 603 0002 0C94 0000 		jmp chMtxUnlock
 604               	.LVL42:
 605               	.LBE147:
 606               	.LBE146:
 607               		.cfi_endproc
 608               	.LFE190:
 610               		.text
 611               	.Letext0:
 612               		.file 4 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 613               		.file 5 "/usr/lib/avr/include/stdint.h"
 614               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 615               		.file 7 "../../../os/rt/include/chsystypes.h"
 616               		.file 8 "../../../os/rt/include/chschd.h"
 617               		.file 9 "../../../os/rt/include/chtime.h"
 618               		.file 10 "../../../os/rt/include/chsem.h"
 619               		.file 11 "../../../os/rt/include/chmtx.h"
 620               		.file 12 "../../../os/hal/include/hal_adc.h"
 621               		.file 13 "../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.h"
 622               		.file 14 "../../../os/rt/include/chsys.h"
 623               		.file 15 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_adc.c
     /tmp/ccfGHttC.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfGHttC.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfGHttC.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfGHttC.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfGHttC.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfGHttC.s:13     .text.adcInit:0000000000000000 adcInit
     /tmp/ccfGHttC.s:31     .text.adcObjectInit:0000000000000000 adcObjectInit
     /tmp/ccfGHttC.s:78     .text.adcStart:0000000000000000 adcStart
     /tmp/ccfGHttC.s:148    .text.adcStop:0000000000000000 adcStop
     /tmp/ccfGHttC.s:217    .text.adcStartConversion:0000000000000000 adcStartConversion
     /tmp/ccfGHttC.s:285    .text.adcStartConversionI:0000000000000000 adcStartConversionI
     /tmp/ccfGHttC.s:317    .text.adcStopConversion:0000000000000000 adcStopConversion
     /tmp/ccfGHttC.s:404    .text.adcStopConversionI:0000000000000000 adcStopConversionI
     /tmp/ccfGHttC.s:471    .text.adcConvert:0000000000000000 adcConvert
     /tmp/ccfGHttC.s:565    .text.adcAcquireBus:0000000000000000 adcAcquireBus
     /tmp/ccfGHttC.s:589    .text.adcReleaseBus:0000000000000000 adcReleaseBus

UNDEFINED SYMBOLS
adc_lld_init
chMtxObjectInit
adc_lld_start
adc_lld_stop
adc_lld_start_conversion
adc_lld_stop_conversion
chThdResumeS
chThdResumeI
chThdSuspendTimeoutS
chMtxLock
chMtxUnlock
