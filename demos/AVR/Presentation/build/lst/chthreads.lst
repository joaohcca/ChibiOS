   1               		.file	"chthreads.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._thread_init,"ax",@progbits
  11               	.global	_thread_init
  13               	_thread_init:
  14               	.LFB148:
  15               		.file 1 "../../../os/rt/src/chthreads.c"
   1:../../../os/rt/src/chthreads.c **** /*
   2:../../../os/rt/src/chthreads.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chthreads.c **** 
   4:../../../os/rt/src/chthreads.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chthreads.c **** 
   6:../../../os/rt/src/chthreads.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chthreads.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chthreads.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chthreads.c ****     (at your option) any later version.
  10:../../../os/rt/src/chthreads.c **** 
  11:../../../os/rt/src/chthreads.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chthreads.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chthreads.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chthreads.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chthreads.c **** 
  16:../../../os/rt/src/chthreads.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chthreads.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chthreads.c **** */
  19:../../../os/rt/src/chthreads.c **** 
  20:../../../os/rt/src/chthreads.c **** /**
  21:../../../os/rt/src/chthreads.c ****  * @file    chthreads.c
  22:../../../os/rt/src/chthreads.c ****  * @brief   Threads code.
  23:../../../os/rt/src/chthreads.c ****  *
  24:../../../os/rt/src/chthreads.c ****  * @addtogroup threads
  25:../../../os/rt/src/chthreads.c ****  * @details Threads related APIs and services.
  26:../../../os/rt/src/chthreads.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chthreads.c ****  *          A thread is an abstraction of an independent instructions flow.
  28:../../../os/rt/src/chthreads.c ****  *          In ChibiOS/RT a thread is represented by a "C" function owning
  29:../../../os/rt/src/chthreads.c ****  *          a processor context, state informations and a dedicated stack
  30:../../../os/rt/src/chthreads.c ****  *          area. In this scenario static variables are shared among all
  31:../../../os/rt/src/chthreads.c ****  *          threads while automatic variables are local to the thread.<br>
  32:../../../os/rt/src/chthreads.c ****  *          Operations defined for threads:
  33:../../../os/rt/src/chthreads.c ****  *          - <b>Create</b>, a thread is started on the specified thread
  34:../../../os/rt/src/chthreads.c ****  *            function. This operation is available in multiple variants,
  35:../../../os/rt/src/chthreads.c ****  *            both static and dynamic.
  36:../../../os/rt/src/chthreads.c ****  *          - <b>Exit</b>, a thread terminates by returning from its top
  37:../../../os/rt/src/chthreads.c ****  *            level function or invoking a specific API, the thread can
  38:../../../os/rt/src/chthreads.c ****  *            return a value that can be retrieved by other threads.
  39:../../../os/rt/src/chthreads.c ****  *          - <b>Wait</b>, a thread waits for the termination of another
  40:../../../os/rt/src/chthreads.c ****  *            thread and retrieves its return value.
  41:../../../os/rt/src/chthreads.c ****  *          - <b>Resume</b>, a thread created in suspended state is started.
  42:../../../os/rt/src/chthreads.c ****  *          - <b>Sleep</b>, the execution of a thread is suspended for the
  43:../../../os/rt/src/chthreads.c ****  *            specified amount of time or the specified future absolute time
  44:../../../os/rt/src/chthreads.c ****  *            is reached.
  45:../../../os/rt/src/chthreads.c ****  *          - <b>SetPriority</b>, a thread changes its own priority level.
  46:../../../os/rt/src/chthreads.c ****  *          - <b>Yield</b>, a thread voluntarily renounces to its time slot.
  47:../../../os/rt/src/chthreads.c ****  *          .
  48:../../../os/rt/src/chthreads.c ****  * @{
  49:../../../os/rt/src/chthreads.c ****  */
  50:../../../os/rt/src/chthreads.c **** 
  51:../../../os/rt/src/chthreads.c **** #include "ch.h"
  52:../../../os/rt/src/chthreads.c **** 
  53:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  54:../../../os/rt/src/chthreads.c **** /* Module local definitions.                                                 */
  55:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  56:../../../os/rt/src/chthreads.c **** 
  57:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  58:../../../os/rt/src/chthreads.c **** /* Module exported variables.                                                */
  59:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  60:../../../os/rt/src/chthreads.c **** 
  61:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  62:../../../os/rt/src/chthreads.c **** /* Module local types.                                                       */
  63:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  64:../../../os/rt/src/chthreads.c **** 
  65:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  66:../../../os/rt/src/chthreads.c **** /* Module local variables.                                                   */
  67:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  68:../../../os/rt/src/chthreads.c **** 
  69:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  70:../../../os/rt/src/chthreads.c **** /* Module local functions.                                                   */
  71:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  72:../../../os/rt/src/chthreads.c **** 
  73:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  74:../../../os/rt/src/chthreads.c **** /* Module exported functions.                                                */
  75:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  76:../../../os/rt/src/chthreads.c **** 
  77:../../../os/rt/src/chthreads.c **** /**
  78:../../../os/rt/src/chthreads.c ****  * @brief   Initializes a thread structure.
  79:../../../os/rt/src/chthreads.c ****  * @note    This is an internal functions, do not use it in application code.
  80:../../../os/rt/src/chthreads.c ****  *
  81:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
  82:../../../os/rt/src/chthreads.c ****  * @param[in] name      thread name
  83:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
  84:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter.
  85:../../../os/rt/src/chthreads.c ****  *
  86:../../../os/rt/src/chthreads.c ****  * @notapi
  87:../../../os/rt/src/chthreads.c ****  */
  88:../../../os/rt/src/chthreads.c **** thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
  16               		.loc 1 88 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 FC01      		movw r30,r24
  89:../../../os/rt/src/chthreads.c **** 
  90:../../../os/rt/src/chthreads.c ****   tp->prio      = prio;
  32               		.loc 1 90 0
  33 0006 4483      		std Z+4,r20
  91:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
  34               		.loc 1 91 0
  35 0008 82E0      		ldi r24,lo8(2)
  36               	.LVL1:
  37 000a 8587      		std Z+13,r24
  92:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
  38               		.loc 1 92 0
  39 000c 1686      		std Z+14,__zero_reg__
  93:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
  94:../../../os/rt/src/chthreads.c ****   tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
  95:../../../os/rt/src/chthreads.c **** #endif
  96:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
  97:../../../os/rt/src/chthreads.c ****   tp->realprio  = prio;
  40               		.loc 1 97 0
  41 000e 438F      		std Z+27,r20
  98:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
  42               		.loc 1 98 0
  43 0010 128E      		std Z+26,__zero_reg__
  44 0012 118E      		std Z+25,__zero_reg__
  99:../../../os/rt/src/chthreads.c **** #endif
 100:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_EVENTS == TRUE
 101:../../../os/rt/src/chthreads.c ****   tp->epending  = (eventmask_t)0;
  45               		.loc 1 101 0
  46 0014 108E      		std Z+24,__zero_reg__
 102:../../../os/rt/src/chthreads.c **** #endif
 103:../../../os/rt/src/chthreads.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 104:../../../os/rt/src/chthreads.c ****   tp->time      = (systime_t)0;
 105:../../../os/rt/src/chthreads.c **** #endif
 106:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 107:../../../os/rt/src/chthreads.c ****   tp->refs      = (trefs_t)1;
  47               		.loc 1 107 0
  48 0016 81E0      		ldi r24,lo8(1)
  49 0018 8787      		std Z+15,r24
 108:../../../os/rt/src/chthreads.c ****   tp->name      = name;
  50               		.loc 1 108 0
  51 001a 7487      		std Z+12,r23
  52 001c 6387      		std Z+11,r22
 109:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
  53               		.loc 1 109 0
  54 001e A0E0      		ldi r26,lo8(ch)
  55 0020 B0E0      		ldi r27,hi8(ch)
  56 0022 B087      		std Z+8,r27
  57 0024 A783      		std Z+7,r26
  58 0026 1996      		adiw r26,9
  59 0028 CD91      		ld r28,X+
  60 002a DC91      		ld r29,X
  61 002c 1A97      		sbiw r26,9+1
  62 002e D287      		std Z+10,r29
  63 0030 C187      		std Z+9,r28
  64 0032 F887      		std Y+8,r31
  65 0034 EF83      		std Y+7,r30
  66 0036 1A96      		adiw r26,9+1
  67 0038 FC93      		st X,r31
  68 003a EE93      		st -X,r30
  69 003c 1997      		sbiw r26,9
  70               	.LVL2:
 110:../../../os/rt/src/chthreads.c **** #else
 111:../../../os/rt/src/chthreads.c ****   (void)name;
 112:../../../os/rt/src/chthreads.c **** #endif
 113:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 114:../../../os/rt/src/chthreads.c ****   list_init(&tp->waiting);
  71               		.loc 1 114 0
  72 003e CF01      		movw r24,r30
  73 0040 4296      		adiw r24,18
  74               	.LVL3:
  75               	.LBB218:
  76               	.LBB219:
  77               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
  78               		.loc 2 501 0
  79 0042 938B      		std Z+19,r25
  80 0044 828B      		std Z+18,r24
  81               	.LVL4:
  82               	.LBE219:
  83               	.LBE218:
 115:../../../os/rt/src/chthreads.c **** #endif
 116:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MESSAGES == TRUE
 117:../../../os/rt/src/chthreads.c ****   queue_init(&tp->msgqueue);
  84               		.loc 1 117 0
  85 0046 0296      		adiw r24,2
  86               	.LVL5:
  87               	.LBB220:
  88               	.LBB221:
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  89               		.loc 2 539 0
  90 0048 958B      		std Z+21,r25
  91 004a 848B      		std Z+20,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  92               		.loc 2 540 0
  93 004c 978B      		std Z+23,r25
  94 004e 868B      		std Z+22,r24
  95               	.LVL6:
  96               	.LBE221:
  97               	.LBE220:
 118:../../../os/rt/src/chthreads.c **** #endif
 119:../../../os/rt/src/chthreads.c **** #if CH_DBG_STATISTICS == TRUE
 120:../../../os/rt/src/chthreads.c ****   chTMObjectInit(&tp->stats);
 121:../../../os/rt/src/chthreads.c **** #endif
 122:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_INIT_HOOK(tp);
 123:../../../os/rt/src/chthreads.c ****   return tp;
 124:../../../os/rt/src/chthreads.c **** }
  98               		.loc 1 124 0
  99 0050 CF01      		movw r24,r30
 100               	/* epilogue start */
 101 0052 DF91      		pop r29
 102 0054 CF91      		pop r28
 103 0056 0895      		ret
 104               		.cfi_endproc
 105               	.LFE148:
 107               		.section	.text.chThdCreateSuspendedI,"ax",@progbits
 108               	.global	chThdCreateSuspendedI
 110               	chThdCreateSuspendedI:
 111               	.LFB149:
 125:../../../os/rt/src/chthreads.c **** 
 126:../../../os/rt/src/chthreads.c **** #if (CH_DBG_FILL_THREADS == TRUE) || defined(__DOXYGEN__)
 127:../../../os/rt/src/chthreads.c **** /**
 128:../../../os/rt/src/chthreads.c ****  * @brief   Memory fill utility.
 129:../../../os/rt/src/chthreads.c ****  *
 130:../../../os/rt/src/chthreads.c ****  * @param[in] startp    first address to fill
 131:../../../os/rt/src/chthreads.c ****  * @param[in] endp      last address to fill +1
 132:../../../os/rt/src/chthreads.c ****  * @param[in] v         filler value
 133:../../../os/rt/src/chthreads.c ****  *
 134:../../../os/rt/src/chthreads.c ****  * @notapi
 135:../../../os/rt/src/chthreads.c ****  */
 136:../../../os/rt/src/chthreads.c **** void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 137:../../../os/rt/src/chthreads.c **** 
 138:../../../os/rt/src/chthreads.c ****   while (startp < endp) {
 139:../../../os/rt/src/chthreads.c ****     *startp++ = v;
 140:../../../os/rt/src/chthreads.c ****   }
 141:../../../os/rt/src/chthreads.c **** }
 142:../../../os/rt/src/chthreads.c **** #endif /* CH_DBG_FILL_THREADS == TRUE */
 143:../../../os/rt/src/chthreads.c **** 
 144:../../../os/rt/src/chthreads.c **** /**
 145:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 146:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 147:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 148:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 149:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 150:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 151:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 152:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 153:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 154:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 155:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 156:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 157:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 158:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 159:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 160:../../../os/rt/src/chthreads.c ****  *
 161:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 162:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 163:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 164:../../../os/rt/src/chthreads.c ****  *
 165:../../../os/rt/src/chthreads.c ****  * @iclass
 166:../../../os/rt/src/chthreads.c ****  */
 167:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 112               		.loc 1 167 0
 113               		.cfi_startproc
 114               	.LVL7:
 115 0000 CF93      		push r28
 116               	.LCFI2:
 117               		.cfi_def_cfa_offset 3
 118               		.cfi_offset 28, -2
 119 0002 DF93      		push r29
 120               	.LCFI3:
 121               		.cfi_def_cfa_offset 4
 122               		.cfi_offset 29, -3
 123               	/* prologue: function */
 124               	/* frame size = 0 */
 125               	/* stack size = 2 */
 126               	.L__stack_usage = 2
 127 0004 EC01      		movw r28,r24
 168:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 169:../../../os/rt/src/chthreads.c **** 
 170:../../../os/rt/src/chthreads.c ****   chDbgCheckClassI();
 171:../../../os/rt/src/chthreads.c ****   chDbgCheck(tdp != NULL);
 172:../../../os/rt/src/chthreads.c ****   chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 173:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
 174:../../../os/rt/src/chthreads.c ****              (tdp->wend > tdp->wbase) &&
 175:../../../os/rt/src/chthreads.c ****              (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
 176:../../../os/rt/src/chthreads.c ****   chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 177:../../../os/rt/src/chthreads.c **** 
 178:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 179:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 180:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 181:../../../os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)tdp->wend -
 128               		.loc 1 181 0
 129 0006 4C81      		ldd r20,Y+4
 130 0008 5D81      		ldd r21,Y+5
 131 000a FA01      		movw r30,r20
 132 000c 7C97      		sbiw r30,28
 133               	.LVL8:
 182:../../../os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 183:../../../os/rt/src/chthreads.c **** 
 184:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 185:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 186:../../../os/rt/src/chthreads.c ****   tp->wabase = tdp->wbase;
 187:../../../os/rt/src/chthreads.c **** #endif
 188:../../../os/rt/src/chthreads.c **** 
 189:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 190:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 134               		.loc 1 190 0
 135 000e CA01      		movw r24,r20
 136               	.LVL9:
 137 0010 C197      		sbiw r24,49
 138 0012 9683      		std Z+6,r25
 139 0014 8583      		std Z+5,r24
 140 0016 2F81      		ldd r18,Y+7
 141 0018 DC01      		movw r26,r24
 142 001a 5296      		adiw r26,18
 143 001c 2C93      		st X,r18
 144 001e 5297      		sbiw r26,18
 145 0020 2885      		ldd r18,Y+8
 146 0022 5196      		adiw r26,17
 147 0024 2C93      		st X,r18
 148 0026 5197      		sbiw r26,17
 149 0028 2985      		ldd r18,Y+9
 150 002a 5096      		adiw r26,16
 151 002c 2C93      		st X,r18
 152 002e 5097      		sbiw r26,16
 153 0030 2A85      		ldd r18,Y+10
 154 0032 1F96      		adiw r26,15
 155 0034 2C93      		st X,r18
 156 0036 1F97      		sbiw r26,15
 157 0038 20E0      		ldi r18,lo8(gs(_port_thread_start))
 158 003a 30E0      		ldi r19,hi8(gs(_port_thread_start))
 159 003c 5396      		adiw r26,19
 160 003e 3C93      		st X,r19
 161 0040 5397      		sbiw r26,19
 162 0042 5496      		adiw r26,20
 163 0044 2C93      		st X,r18
 191:../../../os/rt/src/chthreads.c **** 
 192:../../../os/rt/src/chthreads.c ****   /* The driver object is initialized but not started.*/
 193:../../../os/rt/src/chthreads.c ****   return _thread_init(tp, tdp->name, tdp->prio);
 164               		.loc 1 193 0
 165 0046 8E81      		ldd r24,Y+6
 166 0048 2881      		ld r18,Y
 167 004a 3981      		ldd r19,Y+1
 168               	.LVL10:
 169               	.LBB222:
 170               	.LBB223:
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 171               		.loc 1 90 0
 172 004c 8483      		std Z+4,r24
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 173               		.loc 1 91 0
 174 004e 92E0      		ldi r25,lo8(2)
 175 0050 9587      		std Z+13,r25
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 176               		.loc 1 92 0
 177 0052 1686      		std Z+14,__zero_reg__
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 178               		.loc 1 97 0
 179 0054 838F      		std Z+27,r24
  98:../../../os/rt/src/chthreads.c **** #endif
 180               		.loc 1 98 0
 181 0056 128E      		std Z+26,__zero_reg__
 182 0058 118E      		std Z+25,__zero_reg__
 101:../../../os/rt/src/chthreads.c **** #endif
 183               		.loc 1 101 0
 184 005a 108E      		std Z+24,__zero_reg__
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 185               		.loc 1 107 0
 186 005c 81E0      		ldi r24,lo8(1)
 187               	.LVL11:
 188 005e 8787      		std Z+15,r24
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 189               		.loc 1 108 0
 190 0060 3487      		std Z+12,r19
 191 0062 2387      		std Z+11,r18
 109:../../../os/rt/src/chthreads.c **** #else
 192               		.loc 1 109 0
 193 0064 C0E0      		ldi r28,lo8(ch)
 194 0066 D0E0      		ldi r29,hi8(ch)
 195               	.LVL12:
 196 0068 D087      		std Z+8,r29
 197 006a C783      		std Z+7,r28
 198 006c 8985      		ldd r24,Y+9
 199 006e 9A85      		ldd r25,Y+10
 200 0070 9287      		std Z+10,r25
 201 0072 8187      		std Z+9,r24
 202 0074 DC01      		movw r26,r24
 203 0076 1896      		adiw r26,7+1
 204 0078 FC93      		st X,r31
 205 007a EE93      		st -X,r30
 206 007c 1797      		sbiw r26,7
 207               	.LVL13:
 208 007e FA87      		std Y+10,r31
 209 0080 E987      		std Y+9,r30
 210               	.LVL14:
 211               	.LBB224:
 212               	.LBB225:
 501:../../../os/rt/include/chschd.h **** }
 213               		.loc 2 501 0
 214 0082 EA01      		movw r28,r20
 215 0084 2A97      		sbiw r28,10
 216               	.LVL15:
 217 0086 D983      		std Y+1,r29
 218 0088 C883      		st Y,r28
 219               	.LVL16:
 220               	.LBE225:
 221               	.LBE224:
 117:../../../os/rt/src/chthreads.c **** #endif
 222               		.loc 1 117 0
 223 008a DA01      		movw r26,r20
 224 008c 1897      		sbiw r26,8
 225               	.LVL17:
 226               	.LBB226:
 227               	.LBB227:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 228               		.loc 2 539 0
 229 008e 0B2E      		mov __tmp_reg__,r27
 230 0090 1196      		adiw r26,1
 231 0092 0C92      		st X,__tmp_reg__
 232 0094 1197      		sbiw r26,1
 233 0096 AC93      		st X,r26
 234               		.loc 2 540 0
 235 0098 0A2E      		mov __tmp_reg__,r26
 236 009a 1B2E      		mov __zero_reg__,r27
 237 009c 1396      		adiw r26,2+1
 238 009e 1C92      		st X,__zero_reg__
 239 00a0 0E92      		st -X,__tmp_reg__
 240 00a2 1124      		clr __zero_reg__
 241 00a4 1297      		sbiw r26,2
 242               	.LVL18:
 243               	.LBE227:
 244               	.LBE226:
 245               	.LBE223:
 246               	.LBE222:
 194:../../../os/rt/src/chthreads.c **** }
 247               		.loc 1 194 0
 248 00a6 CF01      		movw r24,r30
 249               	/* epilogue start */
 250 00a8 DF91      		pop r29
 251 00aa CF91      		pop r28
 252 00ac 0895      		ret
 253               		.cfi_endproc
 254               	.LFE149:
 256               		.section	.text.chThdCreateSuspended,"ax",@progbits
 257               	.global	chThdCreateSuspended
 259               	chThdCreateSuspended:
 260               	.LFB150:
 195:../../../os/rt/src/chthreads.c **** 
 196:../../../os/rt/src/chthreads.c **** /**
 197:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 198:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 199:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 200:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 201:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 202:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 203:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 204:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 205:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 206:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 207:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 208:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 209:../../../os/rt/src/chthreads.c ****  *
 210:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 211:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 212:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 213:../../../os/rt/src/chthreads.c ****  *
 214:../../../os/rt/src/chthreads.c ****  * @api
 215:../../../os/rt/src/chthreads.c ****  */
 216:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 261               		.loc 1 216 0
 262               		.cfi_startproc
 263               	.LVL19:
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
 268               	.LBB228:
 269               	.LBB229:
 270               	.LBB230:
 271               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 272               		.loc 3 437 0
 273               	/* #APP */
 274               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 275 0000 F894      		cli
 276               	 ;  0 "" 2
 277               	/* #NOAPP */
 278               	.LBE230:
 279               	.LBE229:
 280               	.LBE228:
 217:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 218:../../../os/rt/src/chthreads.c **** 
 219:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 220:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 221:../../../os/rt/src/chthreads.c ****               "working area in use");
 222:../../../os/rt/src/chthreads.c **** #endif
 223:../../../os/rt/src/chthreads.c **** 
 224:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 225:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 226:../../../os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 227:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 228:../../../os/rt/src/chthreads.c **** #endif
 229:../../../os/rt/src/chthreads.c **** 
 230:../../../os/rt/src/chthreads.c ****   chSysLock();
 231:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 281               		.loc 1 231 0
 282 0002 0E94 0000 		call chThdCreateSuspendedI
 283               	.LVL20:
 284               	.LBB231:
 285               	.LBB232:
 286               	.LBB233:
 287               	.LBB234:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 288               		.loc 3 447 0
 289               	/* #APP */
 290               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 291 0006 7894      		sei
 292               	 ;  0 "" 2
 293               	/* #NOAPP */
 294               	.LBE234:
 295               	.LBE233:
 296               	.LBE232:
 297               	.LBE231:
 232:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 233:../../../os/rt/src/chthreads.c **** 
 234:../../../os/rt/src/chthreads.c ****   return tp;
 235:../../../os/rt/src/chthreads.c **** }
 298               		.loc 1 235 0
 299 0008 0895      		ret
 300               		.cfi_endproc
 301               	.LFE150:
 303               		.section	.text.chThdCreateI,"ax",@progbits
 304               	.global	chThdCreateI
 306               	chThdCreateI:
 307               	.LFB151:
 236:../../../os/rt/src/chthreads.c **** 
 237:../../../os/rt/src/chthreads.c **** /**
 238:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 239:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 240:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 241:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 242:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 243:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 244:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 245:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 246:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 247:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 248:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 249:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 250:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 251:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 252:../../../os/rt/src/chthreads.c ****  *
 253:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 254:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 255:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 256:../../../os/rt/src/chthreads.c ****  *
 257:../../../os/rt/src/chthreads.c ****  * @iclass
 258:../../../os/rt/src/chthreads.c ****  */
 259:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 308               		.loc 1 259 0
 309               		.cfi_startproc
 310               	.LVL21:
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 260:../../../os/rt/src/chthreads.c **** 
 261:../../../os/rt/src/chthreads.c ****   return chSchReadyI(chThdCreateSuspendedI(tdp));
 315               		.loc 1 261 0
 316 0000 0E94 0000 		call chThdCreateSuspendedI
 317               	.LVL22:
 318 0004 0C94 0000 		jmp chSchReadyI
 319               	.LVL23:
 320               		.cfi_endproc
 321               	.LFE151:
 323               		.section	.text.chThdCreate,"ax",@progbits
 324               	.global	chThdCreate
 326               	chThdCreate:
 327               	.LFB152:
 262:../../../os/rt/src/chthreads.c **** }
 263:../../../os/rt/src/chthreads.c **** 
 264:../../../os/rt/src/chthreads.c **** /**
 265:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 266:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 267:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 268:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 269:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 270:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 271:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 272:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 273:../../../os/rt/src/chthreads.c ****  *
 274:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 275:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 276:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 277:../../../os/rt/src/chthreads.c ****  *
 278:../../../os/rt/src/chthreads.c ****  * @iclass
 279:../../../os/rt/src/chthreads.c ****  */
 280:../../../os/rt/src/chthreads.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 328               		.loc 1 280 0
 329               		.cfi_startproc
 330               	.LVL24:
 331 0000 CF93      		push r28
 332               	.LCFI4:
 333               		.cfi_def_cfa_offset 3
 334               		.cfi_offset 28, -2
 335 0002 DF93      		push r29
 336               	.LCFI5:
 337               		.cfi_def_cfa_offset 4
 338               		.cfi_offset 29, -3
 339               	/* prologue: function */
 340               	/* frame size = 0 */
 341               	/* stack size = 2 */
 342               	.L__stack_usage = 2
 343               	.LBB235:
 344               	.LBB236:
 345               	.LBB237:
 437:../../../os/common/ports/AVR/chcore.h **** }
 346               		.loc 3 437 0
 347               	/* #APP */
 348               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 349 0004 F894      		cli
 350               	 ;  0 "" 2
 351               	/* #NOAPP */
 352               	.LBE237:
 353               	.LBE236:
 354               	.LBE235:
 281:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 282:../../../os/rt/src/chthreads.c **** 
 283:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 284:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 285:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 286:../../../os/rt/src/chthreads.c ****               "working area in use");
 287:../../../os/rt/src/chthreads.c **** #endif
 288:../../../os/rt/src/chthreads.c **** 
 289:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 290:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 291:../../../os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 292:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 293:../../../os/rt/src/chthreads.c **** #endif
 294:../../../os/rt/src/chthreads.c **** 
 295:../../../os/rt/src/chthreads.c ****   chSysLock();
 296:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 355               		.loc 1 296 0
 356 0006 0E94 0000 		call chThdCreateSuspendedI
 357               	.LVL25:
 358 000a EC01      		movw r28,r24
 359               	.LVL26:
 297:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 360               		.loc 1 297 0
 361 000c 60E0      		ldi r22,0
 362 000e 70E0      		ldi r23,0
 363 0010 0E94 0000 		call chSchWakeupS
 364               	.LVL27:
 365               	.LBB238:
 366               	.LBB239:
 367               	.LBB240:
 368               	.LBB241:
 369               		.loc 3 447 0
 370               	/* #APP */
 371               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 372 0014 7894      		sei
 373               	 ;  0 "" 2
 374               	/* #NOAPP */
 375               	.LBE241:
 376               	.LBE240:
 377               	.LBE239:
 378               	.LBE238:
 298:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 299:../../../os/rt/src/chthreads.c **** 
 300:../../../os/rt/src/chthreads.c ****   return tp;
 301:../../../os/rt/src/chthreads.c **** }
 379               		.loc 1 301 0
 380 0016 CE01      		movw r24,r28
 381               	/* epilogue start */
 382 0018 DF91      		pop r29
 383 001a CF91      		pop r28
 384               	.LVL28:
 385 001c 0895      		ret
 386               		.cfi_endproc
 387               	.LFE152:
 389               		.section	.rodata.str1.1,"aMS",@progbits,1
 390               	.LC0:
 391 0000 6E6F 6E61 		.string	"noname"
 391      6D65 00
 392               		.section	.text.chThdCreateStatic,"ax",@progbits
 393               	.global	chThdCreateStatic
 395               	chThdCreateStatic:
 396               	.LFB153:
 302:../../../os/rt/src/chthreads.c **** 
 303:../../../os/rt/src/chthreads.c **** /**
 304:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 305:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 306:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 307:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 308:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 309:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 310:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 311:../../../os/rt/src/chthreads.c ****  *
 312:../../../os/rt/src/chthreads.c ****  * @param[out] wsp      pointer to a working area dedicated to the thread stack
 313:../../../os/rt/src/chthreads.c ****  * @param[in] size      size of the working area
 314:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
 315:../../../os/rt/src/chthreads.c ****  * @param[in] pf        the thread function
 316:../../../os/rt/src/chthreads.c ****  * @param[in] arg       an argument passed to the thread function. It can be
 317:../../../os/rt/src/chthreads.c ****  *                      @p NULL.
 318:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 319:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 320:../../../os/rt/src/chthreads.c ****  *
 321:../../../os/rt/src/chthreads.c ****  * @api
 322:../../../os/rt/src/chthreads.c ****  */
 323:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateStatic(void *wsp, size_t size,
 324:../../../os/rt/src/chthreads.c ****                             tprio_t prio, tfunc_t pf, void *arg) {
 397               		.loc 1 324 0
 398               		.cfi_startproc
 399               	.LVL29:
 400 0000 0F93      		push r16
 401               	.LCFI6:
 402               		.cfi_def_cfa_offset 3
 403               		.cfi_offset 16, -2
 404 0002 1F93      		push r17
 405               	.LCFI7:
 406               		.cfi_def_cfa_offset 4
 407               		.cfi_offset 17, -3
 408 0004 CF93      		push r28
 409               	.LCFI8:
 410               		.cfi_def_cfa_offset 5
 411               		.cfi_offset 28, -4
 412 0006 DF93      		push r29
 413               	.LCFI9:
 414               		.cfi_def_cfa_offset 6
 415               		.cfi_offset 29, -5
 416               	/* prologue: function */
 417               	/* frame size = 0 */
 418               	/* stack size = 4 */
 419               	.L__stack_usage = 4
 420               	.LBB242:
 421               	.LBB243:
 422               	.LBB244:
 437:../../../os/common/ports/AVR/chcore.h **** }
 423               		.loc 3 437 0
 424               	/* #APP */
 425               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 426 0008 F894      		cli
 427               	 ;  0 "" 2
 428               	/* #NOAPP */
 429               	.LBE244:
 430               	.LBE243:
 431               	.LBE242:
 325:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 326:../../../os/rt/src/chthreads.c **** 
 327:../../../os/rt/src/chthreads.c ****   chDbgCheck((wsp != NULL) &&
 328:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(wsp, PORT_WORKING_AREA_ALIGN) &&
 329:../../../os/rt/src/chthreads.c ****              (size >= THD_WORKING_AREA_SIZE(0)) &&
 330:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
 331:../../../os/rt/src/chthreads.c ****              (prio <= HIGHPRIO) && (pf != NULL));
 332:../../../os/rt/src/chthreads.c **** 
 333:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 334:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 335:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 336:../../../os/rt/src/chthreads.c ****               "working area in use");
 337:../../../os/rt/src/chthreads.c **** #endif
 338:../../../os/rt/src/chthreads.c **** 
 339:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 340:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)wsp,
 341:../../../os/rt/src/chthreads.c ****                   (uint8_t *)wsp + size,
 342:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 343:../../../os/rt/src/chthreads.c **** #endif
 344:../../../os/rt/src/chthreads.c **** 
 345:../../../os/rt/src/chthreads.c ****   chSysLock();
 346:../../../os/rt/src/chthreads.c **** 
 347:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 348:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 349:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 350:../../../os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)wsp + size -
 432               		.loc 1 350 0
 433 000a 6C51      		subi r22,28
 434 000c 7109      		sbc r23,__zero_reg__
 435               	.LVL30:
 436 000e EC01      		movw r28,r24
 437 0010 C60F      		add r28,r22
 438 0012 D71F      		adc r29,r23
 439               	.LVL31:
 351:../../../os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 352:../../../os/rt/src/chthreads.c **** 
 353:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 354:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 355:../../../os/rt/src/chthreads.c ****   tp->wabase = (stkalign_t *)wsp;
 356:../../../os/rt/src/chthreads.c **** #endif
 357:../../../os/rt/src/chthreads.c **** 
 358:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 359:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 440               		.loc 1 359 0
 441 0014 FE01      		movw r30,r28
 442 0016 7597      		sbiw r30,21
 443 0018 FE83      		std Y+6,r31
 444 001a ED83      		std Y+5,r30
 445 001c 228B      		std Z+18,r18
 446 001e 318B      		std Z+17,r19
 447 0020 008B      		std Z+16,r16
 448 0022 1787      		std Z+15,r17
 449 0024 80E0      		ldi r24,lo8(gs(_port_thread_start))
 450 0026 90E0      		ldi r25,hi8(gs(_port_thread_start))
 451               	.LVL32:
 452 0028 938B      		std Z+19,r25
 453 002a 848B      		std Z+20,r24
 454               	.LVL33:
 455               	.LBB245:
 456               	.LBB246:
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 457               		.loc 1 90 0
 458 002c 4C83      		std Y+4,r20
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 459               		.loc 1 91 0
 460 002e 82E0      		ldi r24,lo8(2)
 461 0030 8D87      		std Y+13,r24
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 462               		.loc 1 92 0
 463 0032 1E86      		std Y+14,__zero_reg__
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 464               		.loc 1 97 0
 465 0034 4B8F      		std Y+27,r20
  98:../../../os/rt/src/chthreads.c **** #endif
 466               		.loc 1 98 0
 467 0036 1A8E      		std Y+26,__zero_reg__
 468 0038 198E      		std Y+25,__zero_reg__
 101:../../../os/rt/src/chthreads.c **** #endif
 469               		.loc 1 101 0
 470 003a 188E      		std Y+24,__zero_reg__
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 471               		.loc 1 107 0
 472 003c 81E0      		ldi r24,lo8(1)
 473 003e 8F87      		std Y+15,r24
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 474               		.loc 1 108 0
 475 0040 80E0      		ldi r24,lo8(.LC0)
 476 0042 90E0      		ldi r25,hi8(.LC0)
 477 0044 9C87      		std Y+12,r25
 478 0046 8B87      		std Y+11,r24
 109:../../../os/rt/src/chthreads.c **** #else
 479               		.loc 1 109 0
 480 0048 E0E0      		ldi r30,lo8(ch)
 481 004a F0E0      		ldi r31,hi8(ch)
 482 004c F887      		std Y+8,r31
 483 004e EF83      		std Y+7,r30
 484 0050 A185      		ldd r26,Z+9
 485 0052 B285      		ldd r27,Z+10
 486 0054 BA87      		std Y+10,r27
 487 0056 A987      		std Y+9,r26
 488 0058 1896      		adiw r26,7+1
 489 005a DC93      		st X,r29
 490 005c CE93      		st -X,r28
 491 005e 1797      		sbiw r26,7
 492 0060 D287      		std Z+10,r29
 493 0062 C187      		std Z+9,r28
 494               	.LVL34:
 114:../../../os/rt/src/chthreads.c **** #endif
 495               		.loc 1 114 0
 496 0064 CE01      		movw r24,r28
 497 0066 4296      		adiw r24,18
 498               	.LVL35:
 499               	.LBB247:
 500               	.LBB248:
 501:../../../os/rt/include/chschd.h **** }
 501               		.loc 2 501 0
 502 0068 9B8B      		std Y+19,r25
 503 006a 8A8B      		std Y+18,r24
 504               	.LVL36:
 505               	.LBE248:
 506               	.LBE247:
 117:../../../os/rt/src/chthreads.c **** #endif
 507               		.loc 1 117 0
 508 006c 0296      		adiw r24,2
 509               	.LVL37:
 510               	.LBB249:
 511               	.LBB250:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 512               		.loc 2 539 0
 513 006e 9D8B      		std Y+21,r25
 514 0070 8C8B      		std Y+20,r24
 515               		.loc 2 540 0
 516 0072 9F8B      		std Y+23,r25
 517 0074 8E8B      		std Y+22,r24
 518               	.LVL38:
 519               	.LBE250:
 520               	.LBE249:
 521               	.LBE246:
 522               	.LBE245:
 360:../../../os/rt/src/chthreads.c **** 
 361:../../../os/rt/src/chthreads.c ****   tp = _thread_init(tp, "noname", prio);
 362:../../../os/rt/src/chthreads.c **** 
 363:../../../os/rt/src/chthreads.c ****   /* Starting the thread immediately.*/
 364:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 523               		.loc 1 364 0
 524 0076 60E0      		ldi r22,0
 525 0078 70E0      		ldi r23,0
 526               	.LVL39:
 527 007a CE01      		movw r24,r28
 528 007c 0E94 0000 		call chSchWakeupS
 529               	.LVL40:
 530               	.LBB251:
 531               	.LBB252:
 532               	.LBB253:
 533               	.LBB254:
 534               		.loc 3 447 0
 535               	/* #APP */
 536               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 537 0080 7894      		sei
 538               	 ;  0 "" 2
 539               	/* #NOAPP */
 540               	.LBE254:
 541               	.LBE253:
 542               	.LBE252:
 543               	.LBE251:
 365:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 366:../../../os/rt/src/chthreads.c **** 
 367:../../../os/rt/src/chthreads.c ****   return tp;
 368:../../../os/rt/src/chthreads.c **** }
 544               		.loc 1 368 0
 545 0082 CE01      		movw r24,r28
 546               	/* epilogue start */
 547 0084 DF91      		pop r29
 548 0086 CF91      		pop r28
 549 0088 1F91      		pop r17
 550 008a 0F91      		pop r16
 551               	.LVL41:
 552 008c 0895      		ret
 553               		.cfi_endproc
 554               	.LFE153:
 556               		.section	.text.chThdStart,"ax",@progbits
 557               	.global	chThdStart
 559               	chThdStart:
 560               	.LFB154:
 369:../../../os/rt/src/chthreads.c **** 
 370:../../../os/rt/src/chthreads.c **** /**
 371:../../../os/rt/src/chthreads.c ****  * @brief   Resumes a thread created with @p chThdCreateI().
 372:../../../os/rt/src/chthreads.c ****  *
 373:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 374:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 375:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 376:../../../os/rt/src/chthreads.c ****  *
 377:../../../os/rt/src/chthreads.c ****  * @api
 378:../../../os/rt/src/chthreads.c ****  */
 379:../../../os/rt/src/chthreads.c **** thread_t *chThdStart(thread_t *tp) {
 561               		.loc 1 379 0
 562               		.cfi_startproc
 563               	.LVL42:
 564 0000 CF93      		push r28
 565               	.LCFI10:
 566               		.cfi_def_cfa_offset 3
 567               		.cfi_offset 28, -2
 568 0002 DF93      		push r29
 569               	.LCFI11:
 570               		.cfi_def_cfa_offset 4
 571               		.cfi_offset 29, -3
 572               	/* prologue: function */
 573               	/* frame size = 0 */
 574               	/* stack size = 2 */
 575               	.L__stack_usage = 2
 576 0004 EC01      		movw r28,r24
 577               	.LBB255:
 578               	.LBB256:
 579               	.LBB257:
 437:../../../os/common/ports/AVR/chcore.h **** }
 580               		.loc 3 437 0
 581               	/* #APP */
 582               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 583 0006 F894      		cli
 584               	 ;  0 "" 2
 585               	/* #NOAPP */
 586               	.LBE257:
 587               	.LBE256:
 588               	.LBE255:
 380:../../../os/rt/src/chthreads.c **** 
 381:../../../os/rt/src/chthreads.c ****   chSysLock();
 382:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 383:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 589               		.loc 1 383 0
 590 0008 60E0      		ldi r22,0
 591 000a 70E0      		ldi r23,0
 592 000c 0E94 0000 		call chSchWakeupS
 593               	.LVL43:
 594               	.LBB258:
 595               	.LBB259:
 596               	.LBB260:
 597               	.LBB261:
 598               		.loc 3 447 0
 599               	/* #APP */
 600               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 601 0010 7894      		sei
 602               	 ;  0 "" 2
 603               	/* #NOAPP */
 604               	.LBE261:
 605               	.LBE260:
 606               	.LBE259:
 607               	.LBE258:
 384:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 385:../../../os/rt/src/chthreads.c **** 
 386:../../../os/rt/src/chthreads.c ****   return tp;
 387:../../../os/rt/src/chthreads.c **** }
 608               		.loc 1 387 0
 609 0012 CE01      		movw r24,r28
 610               	/* epilogue start */
 611 0014 DF91      		pop r29
 612 0016 CF91      		pop r28
 613               	.LVL44:
 614 0018 0895      		ret
 615               		.cfi_endproc
 616               	.LFE154:
 618               		.section	.text.chThdAddRef,"ax",@progbits
 619               	.global	chThdAddRef
 621               	chThdAddRef:
 622               	.LFB155:
 388:../../../os/rt/src/chthreads.c **** 
 389:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 390:../../../os/rt/src/chthreads.c **** /**
 391:../../../os/rt/src/chthreads.c ****  * @brief   Adds a reference to a thread object.
 392:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 393:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 394:../../../os/rt/src/chthreads.c ****  *
 395:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 396:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter
 397:../../../os/rt/src/chthreads.c ****  *                      representing the new reference.
 398:../../../os/rt/src/chthreads.c ****  *
 399:../../../os/rt/src/chthreads.c ****  * @api
 400:../../../os/rt/src/chthreads.c ****  */
 401:../../../os/rt/src/chthreads.c **** thread_t *chThdAddRef(thread_t *tp) {
 623               		.loc 1 401 0
 624               		.cfi_startproc
 625               	.LVL45:
 626               	/* prologue: function */
 627               	/* frame size = 0 */
 628               	/* stack size = 0 */
 629               	.L__stack_usage = 0
 630               	.LBB262:
 631               	.LBB263:
 632               	.LBB264:
 437:../../../os/common/ports/AVR/chcore.h **** }
 633               		.loc 3 437 0
 634               	/* #APP */
 635               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 636 0000 F894      		cli
 637               	 ;  0 "" 2
 638               	/* #NOAPP */
 639               	.LBE264:
 640               	.LBE263:
 641               	.LBE262:
 402:../../../os/rt/src/chthreads.c **** 
 403:../../../os/rt/src/chthreads.c ****   chSysLock();
 404:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 405:../../../os/rt/src/chthreads.c ****   tp->refs++;
 642               		.loc 1 405 0
 643 0002 FC01      		movw r30,r24
 644 0004 2785      		ldd r18,Z+15
 645 0006 2F5F      		subi r18,lo8(-(1))
 646 0008 2787      		std Z+15,r18
 647               	.LBB265:
 648               	.LBB266:
 649               	.LBB267:
 650               	.LBB268:
 651               		.loc 3 447 0
 652               	/* #APP */
 653               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 654 000a 7894      		sei
 655               	 ;  0 "" 2
 656               	/* #NOAPP */
 657               	.LBE268:
 658               	.LBE267:
 659               	.LBE266:
 660               	.LBE265:
 406:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 407:../../../os/rt/src/chthreads.c **** 
 408:../../../os/rt/src/chthreads.c ****   return tp;
 409:../../../os/rt/src/chthreads.c **** }
 661               		.loc 1 409 0
 662 000c 0895      		ret
 663               		.cfi_endproc
 664               	.LFE155:
 666               		.section	.text.chThdRelease,"ax",@progbits
 667               	.global	chThdRelease
 669               	chThdRelease:
 670               	.LFB156:
 410:../../../os/rt/src/chthreads.c **** 
 411:../../../os/rt/src/chthreads.c **** /**
 412:../../../os/rt/src/chthreads.c ****  * @brief   Releases a reference to a thread object.
 413:../../../os/rt/src/chthreads.c ****  * @details If the references counter reaches zero <b>and</b> the thread
 414:../../../os/rt/src/chthreads.c ****  *          is in the @p CH_STATE_FINAL state then the thread's memory is
 415:../../../os/rt/src/chthreads.c ****  *          returned to the proper allocator and the thread is removed
 416:../../../os/rt/src/chthreads.c ****  *          from the registry.<br>
 417:../../../os/rt/src/chthreads.c ****  *          Threads whose counter reaches zero and are still active become
 418:../../../os/rt/src/chthreads.c ****  *          "detached" and will be removed from registry on termination.
 419:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 420:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 421:../../../os/rt/src/chthreads.c ****  * @note    Static threads are not affected.
 422:../../../os/rt/src/chthreads.c ****  *
 423:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 424:../../../os/rt/src/chthreads.c ****  *
 425:../../../os/rt/src/chthreads.c ****  * @api
 426:../../../os/rt/src/chthreads.c ****  */
 427:../../../os/rt/src/chthreads.c **** void chThdRelease(thread_t *tp) {
 671               		.loc 1 427 0
 672               		.cfi_startproc
 673               	.LVL46:
 674               	/* prologue: function */
 675               	/* frame size = 0 */
 676               	/* stack size = 0 */
 677               	.L__stack_usage = 0
 678 0000 FC01      		movw r30,r24
 679               	.LBB289:
 680               	.LBB290:
 681               	.LBB291:
 437:../../../os/common/ports/AVR/chcore.h **** }
 682               		.loc 3 437 0
 683               	/* #APP */
 684               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 685 0002 F894      		cli
 686               	 ;  0 "" 2
 687               	/* #NOAPP */
 688               	.LBE291:
 689               	.LBE290:
 690               	.LBE289:
 428:../../../os/rt/src/chthreads.c **** 
 429:../../../os/rt/src/chthreads.c ****   chSysLock();
 430:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 431:../../../os/rt/src/chthreads.c ****   tp->refs--;
 691               		.loc 1 431 0
 692 0004 9785      		ldd r25,Z+15
 693 0006 9150      		subi r25,lo8(-(-1))
 694 0008 9787      		std Z+15,r25
 432:../../../os/rt/src/chthreads.c **** 
 433:../../../os/rt/src/chthreads.c ****   /* If the references counter reaches zero and the thread is in its
 434:../../../os/rt/src/chthreads.c ****      terminated state then the memory can be returned to the proper
 435:../../../os/rt/src/chthreads.c ****      allocator.*/
 436:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 695               		.loc 1 436 0
 696 000a 9111      		cpse r25,__zero_reg__
 697 000c 00C0      		rjmp .L10
 698               		.loc 1 436 0 is_stmt 0 discriminator 1
 699 000e 8585      		ldd r24,Z+13
 700               	.LVL47:
 701 0010 8F30      		cpi r24,lo8(15)
 702 0012 01F0      		breq .L13
 703               	.L10:
 704               	.LBB292:
 705               	.LBB293:
 706               	.LBB294:
 707               	.LBB295:
 708               		.loc 3 447 0 is_stmt 1
 709               	/* #APP */
 710               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 711 0014 7894      		sei
 712               	 ;  0 "" 2
 713               	/* #NOAPP */
 714 0016 0895      		ret
 715               	.L13:
 716               	.LVL48:
 717               	.LBE295:
 718               	.LBE294:
 719               	.LBE293:
 720               	.LBE292:
 721               	.LBB296:
 722               	.LBB297:
 437:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 723               		.loc 1 437 0
 724 0018 A185      		ldd r26,Z+9
 725 001a B285      		ldd r27,Z+10
 726 001c 8781      		ldd r24,Z+7
 727 001e 9085      		ldd r25,Z+8
 728 0020 1896      		adiw r26,7+1
 729 0022 9C93      		st X,r25
 730 0024 8E93      		st -X,r24
 731 0026 1797      		sbiw r26,7
 732 0028 0780      		ldd __tmp_reg__,Z+7
 733 002a F085      		ldd r31,Z+8
 734 002c E02D      		mov r30,__tmp_reg__
 735               	.LVL49:
 736 002e B287      		std Z+10,r27
 737 0030 A187      		std Z+9,r26
 738               	.LBB298:
 739               	.LBB299:
 740               	.LBB300:
 741               	.LBB301:
 742               		.loc 3 447 0
 743               	/* #APP */
 744               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 745 0032 7894      		sei
 746               	 ;  0 "" 2
 747               	/* #NOAPP */
 748 0034 0895      		ret
 749               	.LBE301:
 750               	.LBE300:
 751               	.LBE299:
 752               	.LBE298:
 753               	.LBE297:
 754               	.LBE296:
 755               		.cfi_endproc
 756               	.LFE156:
 758               		.section	.text.chThdExitS,"ax",@progbits
 759               	.global	chThdExitS
 761               	chThdExitS:
 762               	.LFB158:
 438:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 439:../../../os/rt/src/chthreads.c **** 
 440:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 441:../../../os/rt/src/chthreads.c ****     switch (tp->flags & CH_FLAG_MODE_MASK) {
 442:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_HEAP == TRUE
 443:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_HEAP:
 444:../../../os/rt/src/chthreads.c ****       chHeapFree(chThdGetWorkingAreaX(tp));
 445:../../../os/rt/src/chthreads.c ****       break;
 446:../../../os/rt/src/chthreads.c **** #endif
 447:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MEMPOOLS == TRUE
 448:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_MPOOL:
 449:../../../os/rt/src/chthreads.c ****       chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 450:../../../os/rt/src/chthreads.c ****       break;
 451:../../../os/rt/src/chthreads.c **** #endif
 452:../../../os/rt/src/chthreads.c ****     default:
 453:../../../os/rt/src/chthreads.c ****       /* Nothing else to do for static threads.*/
 454:../../../os/rt/src/chthreads.c ****       break;
 455:../../../os/rt/src/chthreads.c ****     }
 456:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_DYNAMIC == TRUE */
 457:../../../os/rt/src/chthreads.c ****     return;
 458:../../../os/rt/src/chthreads.c ****   }
 459:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 460:../../../os/rt/src/chthreads.c **** }
 461:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 462:../../../os/rt/src/chthreads.c **** 
 463:../../../os/rt/src/chthreads.c **** /**
 464:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 465:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 466:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 467:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 468:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 469:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 470:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 471:../../../os/rt/src/chthreads.c ****  *          the dead code.
 472:../../../os/rt/src/chthreads.c ****  *
 473:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 474:../../../os/rt/src/chthreads.c ****  *
 475:../../../os/rt/src/chthreads.c ****  * @api
 476:../../../os/rt/src/chthreads.c ****  */
 477:../../../os/rt/src/chthreads.c **** void chThdExit(msg_t msg) {
 478:../../../os/rt/src/chthreads.c **** 
 479:../../../os/rt/src/chthreads.c ****   chSysLock();
 480:../../../os/rt/src/chthreads.c ****   chThdExitS(msg);
 481:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 482:../../../os/rt/src/chthreads.c **** }
 483:../../../os/rt/src/chthreads.c **** 
 484:../../../os/rt/src/chthreads.c **** /**
 485:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 486:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 487:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 488:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 489:../../../os/rt/src/chthreads.c ****  * @post    Exiting a non-static thread that does not have references
 490:../../../os/rt/src/chthreads.c ****  *          (detached) causes the thread to remain in the registry.
 491:../../../os/rt/src/chthreads.c ****  *          It can only be removed by performing a registry scan operation.
 492:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 493:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 494:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 495:../../../os/rt/src/chthreads.c ****  *          the dead code.
 496:../../../os/rt/src/chthreads.c ****  *
 497:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 498:../../../os/rt/src/chthreads.c ****  *
 499:../../../os/rt/src/chthreads.c ****  * @sclass
 500:../../../os/rt/src/chthreads.c ****  */
 501:../../../os/rt/src/chthreads.c **** void chThdExitS(msg_t msg) {
 763               		.loc 1 501 0
 764               		.cfi_startproc
 765               	.LVL50:
 766 0000 0F93      		push r16
 767               	.LCFI12:
 768               		.cfi_def_cfa_offset 3
 769               		.cfi_offset 16, -2
 770 0002 1F93      		push r17
 771               	.LCFI13:
 772               		.cfi_def_cfa_offset 4
 773               		.cfi_offset 17, -3
 774 0004 CF93      		push r28
 775               	.LCFI14:
 776               		.cfi_def_cfa_offset 5
 777               		.cfi_offset 28, -4
 778 0006 DF93      		push r29
 779               	.LCFI15:
 780               		.cfi_def_cfa_offset 6
 781               		.cfi_offset 29, -5
 782               	/* prologue: function */
 783               	/* frame size = 0 */
 784               	/* stack size = 4 */
 785               	.L__stack_usage = 4
 502:../../../os/rt/src/chthreads.c ****   thread_t *tp = currp;
 786               		.loc 1 502 0
 787 0008 C091 0000 		lds r28,ch+11
 788 000c D091 0000 		lds r29,ch+11+1
 789               	.LVL51:
 503:../../../os/rt/src/chthreads.c **** 
 504:../../../os/rt/src/chthreads.c ****   /* Storing exit message.*/
 505:../../../os/rt/src/chthreads.c ****   tp->u.exitcode = msg;
 790               		.loc 1 505 0
 791 0010 998B      		std Y+17,r25
 792 0012 888B      		std Y+16,r24
 506:../../../os/rt/src/chthreads.c **** 
 507:../../../os/rt/src/chthreads.c ****   /* Exit handler hook.*/
 508:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_EXIT_HOOK(tp);
 509:../../../os/rt/src/chthreads.c **** 
 510:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 511:../../../os/rt/src/chthreads.c ****   /* Waking up any waiting thread.*/
 512:../../../os/rt/src/chthreads.c ****   while (list_notempty(&tp->waiting)) {
 793               		.loc 1 512 0
 794 0014 8E01      		movw r16,r28
 795 0016 0E5E      		subi r16,-18
 796 0018 1F4F      		sbci r17,-1
 797               	.LVL52:
 798               	.LBB302:
 799               	.LBB303:
 527:../../../os/rt/include/chschd.h **** }
 800               		.loc 2 527 0
 801 001a 8A89      		ldd r24,Y+18
 802 001c 9B89      		ldd r25,Y+19
 803               	.LVL53:
 804               	.LBE303:
 805               	.LBE302:
 806               		.loc 1 512 0
 807 001e 0817      		cp r16,r24
 808 0020 1907      		cpc r17,r25
 809 0022 01F0      		breq .L19
 810               	.LVL54:
 811               	.L20:
 812               	.LBB305:
 813               	.LBB306:
 541:../../../os/rt/include/chschd.h **** }
 542:../../../os/rt/include/chschd.h **** 
 543:../../../os/rt/include/chschd.h **** /**
 544:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 547:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 548:../../../os/rt/include/chschd.h ****  *
 549:../../../os/rt/include/chschd.h ****  * @notapi
 550:../../../os/rt/include/chschd.h ****  */
 551:../../../os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 552:../../../os/rt/include/chschd.h **** 
 553:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 554:../../../os/rt/include/chschd.h **** }
 555:../../../os/rt/include/chschd.h **** 
 556:../../../os/rt/include/chschd.h **** /**
 557:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 558:../../../os/rt/include/chschd.h ****  *
 559:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 560:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 561:../../../os/rt/include/chschd.h ****  *
 562:../../../os/rt/include/chschd.h ****  * @notapi
 563:../../../os/rt/include/chschd.h ****  */
 564:../../../os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 565:../../../os/rt/include/chschd.h **** 
 566:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 567:../../../os/rt/include/chschd.h **** }
 568:../../../os/rt/include/chschd.h **** 
 569:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 570:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 571:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 572:../../../os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 573:../../../os/rt/include/chschd.h **** 
 574:../../../os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 575:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 576:../../../os/rt/include/chschd.h **** }
 577:../../../os/rt/include/chschd.h **** 
 578:../../../os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 579:../../../os/rt/include/chschd.h **** 
 580:../../../os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 581:../../../os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 814               		.loc 2 581 0
 815 0024 FC01      		movw r30,r24
 816 0026 2081      		ld r18,Z
 817 0028 3181      		ldd r19,Z+1
 818 002a 3B8B      		std Y+19,r19
 819 002c 2A8B      		std Y+18,r18
 820               	.LVL55:
 821               	.LBE306:
 822               	.LBE305:
 513:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 823               		.loc 1 513 0
 824 002e 0E94 0000 		call chSchReadyI
 825               	.LVL56:
 826               	.LBB307:
 827               	.LBB304:
 527:../../../os/rt/include/chschd.h **** }
 828               		.loc 2 527 0
 829 0032 8A89      		ldd r24,Y+18
 830 0034 9B89      		ldd r25,Y+19
 831               	.LVL57:
 832               	.LBE304:
 833               	.LBE307:
 512:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 834               		.loc 1 512 0
 835 0036 8017      		cp r24,r16
 836 0038 9107      		cpc r25,r17
 837 003a 01F4      		brne .L20
 838               	.L19:
 514:../../../os/rt/src/chthreads.c ****   }
 515:../../../os/rt/src/chthreads.c **** #endif
 516:../../../os/rt/src/chthreads.c **** 
 517:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 518:../../../os/rt/src/chthreads.c ****   /* Static threads with no references are immediately removed from the
 519:../../../os/rt/src/chthreads.c ****      registry because there is no memory to recover.*/
 520:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 521:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) &&
 522:../../../os/rt/src/chthreads.c ****       ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 523:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 524:../../../os/rt/src/chthreads.c ****   }
 525:../../../os/rt/src/chthreads.c **** #else
 526:../../../os/rt/src/chthreads.c ****   if (tp->refs == (trefs_t)0) {
 839               		.loc 1 526 0
 840 003c 8F85      		ldd r24,Y+15
 841 003e 8111      		cpse r24,__zero_reg__
 842 0040 00C0      		rjmp .L17
 527:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 843               		.loc 1 527 0
 844 0042 E985      		ldd r30,Y+9
 845 0044 FA85      		ldd r31,Y+10
 846 0046 8F81      		ldd r24,Y+7
 847 0048 9885      		ldd r25,Y+8
 848 004a 9087      		std Z+8,r25
 849 004c 8783      		std Z+7,r24
 850 004e AF81      		ldd r26,Y+7
 851 0050 B885      		ldd r27,Y+8
 852 0052 1A96      		adiw r26,9+1
 853 0054 FC93      		st X,r31
 854 0056 EE93      		st -X,r30
 855 0058 1997      		sbiw r26,9
 856               	.L17:
 528:../../../os/rt/src/chthreads.c ****   }
 529:../../../os/rt/src/chthreads.c **** #endif
 530:../../../os/rt/src/chthreads.c **** #endif
 531:../../../os/rt/src/chthreads.c **** 
 532:../../../os/rt/src/chthreads.c ****   /* Going into final state.*/
 533:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_FINAL);
 857               		.loc 1 533 0
 858 005a 8FE0      		ldi r24,lo8(15)
 859               	/* epilogue start */
 534:../../../os/rt/src/chthreads.c **** 
 535:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 536:../../../os/rt/src/chthreads.c ****   chDbgAssert(false, "zombies apocalypse");
 537:../../../os/rt/src/chthreads.c **** }
 860               		.loc 1 537 0
 861 005c DF91      		pop r29
 862 005e CF91      		pop r28
 863               	.LVL58:
 864 0060 1F91      		pop r17
 865 0062 0F91      		pop r16
 866               	.LVL59:
 533:../../../os/rt/src/chthreads.c **** 
 867               		.loc 1 533 0
 868 0064 0C94 0000 		jmp chSchGoSleepS
 869               	.LVL60:
 870               		.cfi_endproc
 871               	.LFE158:
 873               		.section	.text.chThdExit,"ax",@progbits
 874               	.global	chThdExit
 876               	chThdExit:
 877               	.LFB157:
 477:../../../os/rt/src/chthreads.c **** 
 878               		.loc 1 477 0
 879               		.cfi_startproc
 880               	.LVL61:
 881               	/* prologue: function */
 882               	/* frame size = 0 */
 883               	/* stack size = 0 */
 884               	.L__stack_usage = 0
 885               	.LBB308:
 886               	.LBB309:
 887               	.LBB310:
 437:../../../os/common/ports/AVR/chcore.h **** }
 888               		.loc 3 437 0
 889               	/* #APP */
 890               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 891 0000 F894      		cli
 892               	 ;  0 "" 2
 893               	/* #NOAPP */
 894               	.LBE310:
 895               	.LBE309:
 896               	.LBE308:
 480:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 897               		.loc 1 480 0
 898 0002 0C94 0000 		jmp chThdExitS
 899               	.LVL62:
 900               		.cfi_endproc
 901               	.LFE157:
 903               		.section	.text.chThdWait,"ax",@progbits
 904               	.global	chThdWait
 906               	chThdWait:
 907               	.LFB159:
 538:../../../os/rt/src/chthreads.c **** 
 539:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 540:../../../os/rt/src/chthreads.c **** /**
 541:../../../os/rt/src/chthreads.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 542:../../../os/rt/src/chthreads.c ****  *          thread terminates then the exit code is returned.
 543:../../../os/rt/src/chthreads.c ****  * @details This function waits for the specified thread to terminate then
 544:../../../os/rt/src/chthreads.c ****  *          decrements its reference counter, if the counter reaches zero then
 545:../../../os/rt/src/chthreads.c ****  *          the thread working area is returned to the proper allocator and
 546:../../../os/rt/src/chthreads.c ****  *          the thread is removed from registry.
 547:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_WAITEXIT must be enabled in
 548:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 549:../../../os/rt/src/chthreads.c ****  * @post    Enabling @p chThdWait() requires 2-4 (depending on the
 550:../../../os/rt/src/chthreads.c ****  *          architecture) extra bytes in the @p thread_t structure.
 551:../../../os/rt/src/chthreads.c ****  * @note    If @p CH_CFG_USE_DYNAMIC is not specified this function just waits
 552:../../../os/rt/src/chthreads.c ****  *          for the thread termination, no memory allocators are involved.
 553:../../../os/rt/src/chthreads.c ****  *
 554:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 555:../../../os/rt/src/chthreads.c ****  * @return              The exit code from the terminated thread.
 556:../../../os/rt/src/chthreads.c ****  *
 557:../../../os/rt/src/chthreads.c ****  * @api
 558:../../../os/rt/src/chthreads.c ****  */
 559:../../../os/rt/src/chthreads.c **** msg_t chThdWait(thread_t *tp) {
 908               		.loc 1 559 0
 909               		.cfi_startproc
 910               	.LVL63:
 911 0000 0F93      		push r16
 912               	.LCFI16:
 913               		.cfi_def_cfa_offset 3
 914               		.cfi_offset 16, -2
 915 0002 1F93      		push r17
 916               	.LCFI17:
 917               		.cfi_def_cfa_offset 4
 918               		.cfi_offset 17, -3
 919 0004 CF93      		push r28
 920               	.LCFI18:
 921               		.cfi_def_cfa_offset 5
 922               		.cfi_offset 28, -4
 923 0006 DF93      		push r29
 924               	.LCFI19:
 925               		.cfi_def_cfa_offset 6
 926               		.cfi_offset 29, -5
 927               	/* prologue: function */
 928               	/* frame size = 0 */
 929               	/* stack size = 4 */
 930               	.L__stack_usage = 4
 931 0008 EC01      		movw r28,r24
 932               	.LBB311:
 933               	.LBB312:
 934               	.LBB313:
 437:../../../os/common/ports/AVR/chcore.h **** }
 935               		.loc 3 437 0
 936               	/* #APP */
 937               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 938 000a F894      		cli
 939               	 ;  0 "" 2
 940               	/* #NOAPP */
 941               	.LBE313:
 942               	.LBE312:
 943               	.LBE311:
 560:../../../os/rt/src/chthreads.c ****   msg_t msg;
 561:../../../os/rt/src/chthreads.c **** 
 562:../../../os/rt/src/chthreads.c ****   chDbgCheck(tp != NULL);
 563:../../../os/rt/src/chthreads.c **** 
 564:../../../os/rt/src/chthreads.c ****   chSysLock();
 565:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp != currp, "waiting self");
 566:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 567:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "no references");
 568:../../../os/rt/src/chthreads.c **** #endif
 569:../../../os/rt/src/chthreads.c **** 
 570:../../../os/rt/src/chthreads.c ****   if (tp->state != CH_STATE_FINAL) {
 944               		.loc 1 570 0
 945 000c 8D85      		ldd r24,Y+13
 946               	.LVL64:
 947 000e 8F30      		cpi r24,lo8(15)
 948 0010 01F0      		breq .L24
 571:../../../os/rt/src/chthreads.c ****     list_insert(currp, &tp->waiting);
 949               		.loc 1 571 0
 950 0012 E091 0000 		lds r30,ch+11
 951 0016 F091 0000 		lds r31,ch+11+1
 952               	.LVL65:
 953               	.LBB314:
 954               	.LBB315:
 574:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 955               		.loc 2 574 0
 956 001a 8A89      		ldd r24,Y+18
 957 001c 9B89      		ldd r25,Y+19
 958 001e 9183      		std Z+1,r25
 959 0020 8083      		st Z,r24
 575:../../../os/rt/include/chschd.h **** }
 960               		.loc 2 575 0
 961 0022 FB8B      		std Y+19,r31
 962 0024 EA8B      		std Y+18,r30
 963               	.LVL66:
 964               	.LBE315:
 965               	.LBE314:
 572:../../../os/rt/src/chthreads.c ****     chSchGoSleepS(CH_STATE_WTEXIT);
 966               		.loc 1 572 0
 967 0026 89E0      		ldi r24,lo8(9)
 968 0028 0E94 0000 		call chSchGoSleepS
 969               	.LVL67:
 970               	.L24:
 573:../../../os/rt/src/chthreads.c ****   }
 574:../../../os/rt/src/chthreads.c ****   msg = tp->u.exitcode;
 971               		.loc 1 574 0
 972 002c 0889      		ldd r16,Y+16
 973 002e 1989      		ldd r17,Y+17
 974               	.LVL68:
 975               	.LBB316:
 976               	.LBB317:
 977               	.LBB318:
 978               	.LBB319:
 979               		.loc 3 447 0
 980               	/* #APP */
 981               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 982 0030 7894      		sei
 983               	 ;  0 "" 2
 984               	/* #NOAPP */
 985               	.LBE319:
 986               	.LBE318:
 987               	.LBE317:
 988               	.LBE316:
 575:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 576:../../../os/rt/src/chthreads.c **** 
 577:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 578:../../../os/rt/src/chthreads.c ****   /* Releasing a reference to the thread.*/
 579:../../../os/rt/src/chthreads.c ****   chThdRelease(tp);
 989               		.loc 1 579 0
 990 0032 CE01      		movw r24,r28
 991 0034 0E94 0000 		call chThdRelease
 992               	.LVL69:
 580:../../../os/rt/src/chthreads.c **** #endif
 581:../../../os/rt/src/chthreads.c **** 
 582:../../../os/rt/src/chthreads.c ****   return msg;
 583:../../../os/rt/src/chthreads.c **** }
 993               		.loc 1 583 0
 994 0038 C801      		movw r24,r16
 995               	/* epilogue start */
 996 003a DF91      		pop r29
 997 003c CF91      		pop r28
 998               	.LVL70:
 999 003e 1F91      		pop r17
 1000 0040 0F91      		pop r16
 1001               	.LVL71:
 1002 0042 0895      		ret
 1003               		.cfi_endproc
 1004               	.LFE159:
 1006               		.section	.text.chThdSetPriority,"ax",@progbits
 1007               	.global	chThdSetPriority
 1009               	chThdSetPriority:
 1010               	.LFB160:
 584:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_WAITEXIT */
 585:../../../os/rt/src/chthreads.c **** 
 586:../../../os/rt/src/chthreads.c **** /**
 587:../../../os/rt/src/chthreads.c ****  * @brief   Changes the running thread priority level then reschedules if
 588:../../../os/rt/src/chthreads.c ****  *          necessary.
 589:../../../os/rt/src/chthreads.c ****  * @note    The function returns the real thread priority regardless of the
 590:../../../os/rt/src/chthreads.c ****  *          current priority that could be higher than the real priority
 591:../../../os/rt/src/chthreads.c ****  *          because the priority inheritance mechanism.
 592:../../../os/rt/src/chthreads.c ****  *
 593:../../../os/rt/src/chthreads.c ****  * @param[in] newprio   the new priority level of the running thread
 594:../../../os/rt/src/chthreads.c ****  * @return              The old priority level.
 595:../../../os/rt/src/chthreads.c ****  *
 596:../../../os/rt/src/chthreads.c ****  * @api
 597:../../../os/rt/src/chthreads.c ****  */
 598:../../../os/rt/src/chthreads.c **** tprio_t chThdSetPriority(tprio_t newprio) {
 1011               		.loc 1 598 0
 1012               		.cfi_startproc
 1013               	.LVL72:
 1014 0000 CF93      		push r28
 1015               	.LCFI20:
 1016               		.cfi_def_cfa_offset 3
 1017               		.cfi_offset 28, -2
 1018               	/* prologue: function */
 1019               	/* frame size = 0 */
 1020               	/* stack size = 1 */
 1021               	.L__stack_usage = 1
 1022               	.LBB320:
 1023               	.LBB321:
 1024               	.LBB322:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1025               		.loc 3 437 0
 1026               	/* #APP */
 1027               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1028 0002 F894      		cli
 1029               	 ;  0 "" 2
 1030               	/* #NOAPP */
 1031               	.LBE322:
 1032               	.LBE321:
 1033               	.LBE320:
 599:../../../os/rt/src/chthreads.c ****   tprio_t oldprio;
 600:../../../os/rt/src/chthreads.c **** 
 601:../../../os/rt/src/chthreads.c ****   chDbgCheck(newprio <= HIGHPRIO);
 602:../../../os/rt/src/chthreads.c **** 
 603:../../../os/rt/src/chthreads.c ****   chSysLock();
 604:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 605:../../../os/rt/src/chthreads.c ****   oldprio = currp->realprio;
 1034               		.loc 1 605 0
 1035 0004 E091 0000 		lds r30,ch+11
 1036 0008 F091 0000 		lds r31,ch+11+1
 1037 000c C38D      		ldd r28,Z+27
 1038               	.LVL73:
 606:../../../os/rt/src/chthreads.c ****   if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 1039               		.loc 1 606 0
 1040 000e 9481      		ldd r25,Z+4
 1041 0010 C917      		cp r28,r25
 1042 0012 01F0      		breq .L29
 1043               		.loc 1 606 0 is_stmt 0 discriminator 1
 1044 0014 9817      		cp r25,r24
 1045 0016 00F4      		brsh .L30
 1046               	.L29:
 607:../../../os/rt/src/chthreads.c ****     currp->prio = newprio;
 1047               		.loc 1 607 0 is_stmt 1
 1048 0018 8483      		std Z+4,r24
 1049               	.L30:
 608:../../../os/rt/src/chthreads.c ****   }
 609:../../../os/rt/src/chthreads.c ****   currp->realprio = newprio;
 1050               		.loc 1 609 0
 1051 001a 838F      		std Z+27,r24
 610:../../../os/rt/src/chthreads.c **** #else
 611:../../../os/rt/src/chthreads.c ****   oldprio = currp->prio;
 612:../../../os/rt/src/chthreads.c ****   currp->prio = newprio;
 613:../../../os/rt/src/chthreads.c **** #endif
 614:../../../os/rt/src/chthreads.c ****   chSchRescheduleS();
 1052               		.loc 1 614 0
 1053 001c 0E94 0000 		call chSchRescheduleS
 1054               	.LVL74:
 1055               	.LBB323:
 1056               	.LBB324:
 1057               	.LBB325:
 1058               	.LBB326:
 1059               		.loc 3 447 0
 1060               	/* #APP */
 1061               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1062 0020 7894      		sei
 1063               	 ;  0 "" 2
 1064               	/* #NOAPP */
 1065               	.LBE326:
 1066               	.LBE325:
 1067               	.LBE324:
 1068               	.LBE323:
 615:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 616:../../../os/rt/src/chthreads.c **** 
 617:../../../os/rt/src/chthreads.c ****   return oldprio;
 618:../../../os/rt/src/chthreads.c **** }
 1069               		.loc 1 618 0
 1070 0022 8C2F      		mov r24,r28
 1071               	/* epilogue start */
 1072 0024 CF91      		pop r28
 1073               	.LVL75:
 1074 0026 0895      		ret
 1075               		.cfi_endproc
 1076               	.LFE160:
 1078               		.section	.text.chThdTerminate,"ax",@progbits
 1079               	.global	chThdTerminate
 1081               	chThdTerminate:
 1082               	.LFB161:
 619:../../../os/rt/src/chthreads.c **** 
 620:../../../os/rt/src/chthreads.c **** /**
 621:../../../os/rt/src/chthreads.c ****  * @brief   Requests a thread termination.
 622:../../../os/rt/src/chthreads.c ****  * @pre     The target thread must be written to invoke periodically
 623:../../../os/rt/src/chthreads.c ****  *          @p chThdShouldTerminate() and terminate cleanly if it returns
 624:../../../os/rt/src/chthreads.c ****  *          @p true.
 625:../../../os/rt/src/chthreads.c ****  * @post    The specified thread will terminate after detecting the termination
 626:../../../os/rt/src/chthreads.c ****  *          condition.
 627:../../../os/rt/src/chthreads.c ****  *
 628:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 629:../../../os/rt/src/chthreads.c ****  *
 630:../../../os/rt/src/chthreads.c ****  * @api
 631:../../../os/rt/src/chthreads.c ****  */
 632:../../../os/rt/src/chthreads.c **** void chThdTerminate(thread_t *tp) {
 1083               		.loc 1 632 0
 1084               		.cfi_startproc
 1085               	.LVL76:
 1086               	/* prologue: function */
 1087               	/* frame size = 0 */
 1088               	/* stack size = 0 */
 1089               	.L__stack_usage = 0
 1090 0000 FC01      		movw r30,r24
 1091               	.LBB327:
 1092               	.LBB328:
 1093               	.LBB329:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1094               		.loc 3 437 0
 1095               	/* #APP */
 1096               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1097 0002 F894      		cli
 1098               	 ;  0 "" 2
 1099               	/* #NOAPP */
 1100               	.LBE329:
 1101               	.LBE328:
 1102               	.LBE327:
 633:../../../os/rt/src/chthreads.c **** 
 634:../../../os/rt/src/chthreads.c ****   chSysLock();
 635:../../../os/rt/src/chthreads.c ****   tp->flags |= CH_FLAG_TERMINATE;
 1103               		.loc 1 635 0
 1104 0004 9685      		ldd r25,Z+14
 1105 0006 9460      		ori r25,lo8(4)
 1106 0008 9687      		std Z+14,r25
 1107               	.LBB330:
 1108               	.LBB331:
 1109               	.LBB332:
 1110               	.LBB333:
 1111               		.loc 3 447 0
 1112               	/* #APP */
 1113               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1114 000a 7894      		sei
 1115               	 ;  0 "" 2
 1116               	/* #NOAPP */
 1117 000c 0895      		ret
 1118               	.LBE333:
 1119               	.LBE332:
 1120               	.LBE331:
 1121               	.LBE330:
 1122               		.cfi_endproc
 1123               	.LFE161:
 1125               		.section	.text.chThdSleep,"ax",@progbits
 1126               	.global	chThdSleep
 1128               	chThdSleep:
 1129               	.LFB162:
 636:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 637:../../../os/rt/src/chthreads.c **** }
 638:../../../os/rt/src/chthreads.c **** 
 639:../../../os/rt/src/chthreads.c **** /**
 640:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread for the specified time.
 641:../../../os/rt/src/chthreads.c ****  *
 642:../../../os/rt/src/chthreads.c ****  * @param[in] time      the delay in system ticks, the special values are
 643:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 644:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 645:../../../os/rt/src/chthreads.c ****  *                        state.
 646:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 647:../../../os/rt/src/chthreads.c ****  *                      .
 648:../../../os/rt/src/chthreads.c ****  *
 649:../../../os/rt/src/chthreads.c ****  * @api
 650:../../../os/rt/src/chthreads.c ****  */
 651:../../../os/rt/src/chthreads.c **** void chThdSleep(sysinterval_t time) {
 1130               		.loc 1 651 0
 1131               		.cfi_startproc
 1132               	.LVL77:
 1133               	/* prologue: function */
 1134               	/* frame size = 0 */
 1135               	/* stack size = 0 */
 1136               	.L__stack_usage = 0
 1137               	.LBB334:
 1138               	.LBB335:
 1139               	.LBB336:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1140               		.loc 3 437 0
 1141               	/* #APP */
 1142               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1143 0000 F894      		cli
 1144               	 ;  0 "" 2
 1145               	.LVL78:
 1146               	/* #NOAPP */
 1147               	.LBE336:
 1148               	.LBE335:
 1149               	.LBE334:
 1150               	.LBB337:
 1151               	.LBB338:
 1152               		.file 4 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chthreads.h **** 
   4:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chthreads.h **** 
   6:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chthreads.h ****     (at your option) any later version.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   End of the working area.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  83:../../../os/rt/include/chthreads.h **** 
  84:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  85:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  86:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  87:../../../os/rt/include/chthreads.h **** 
  88:../../../os/rt/include/chthreads.h **** /**
  89:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
  90:../../../os/rt/include/chthreads.h ****  */
  91:../../../os/rt/include/chthreads.h **** /**
  92:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
  93:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
  94:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
  95:../../../os/rt/include/chthreads.h ****  *
  96:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
  97:../../../os/rt/include/chthreads.h ****  */
  98:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {(thread_t *)&name, (thread_t *)&name}
  99:../../../os/rt/include/chthreads.h **** 
 100:../../../os/rt/include/chthreads.h **** /**
 101:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 102:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 103:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 104:../../../os/rt/include/chthreads.h ****  *
 105:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 106:../../../os/rt/include/chthreads.h ****  */
 107:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DECL(name)                                           \
 108:../../../os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 109:../../../os/rt/include/chthreads.h **** /** @} */
 110:../../../os/rt/include/chthreads.h **** 
 111:../../../os/rt/include/chthreads.h **** /**
 112:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 113:../../../os/rt/include/chthreads.h ****  */
 114:../../../os/rt/include/chthreads.h **** /**
 115:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 116:../../../os/rt/include/chthreads.h ****  *
 117:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 118:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 119:../../../os/rt/include/chthreads.h ****  *
 120:../../../os/rt/include/chthreads.h ****  * @api
 121:../../../os/rt/include/chthreads.h ****  */
 122:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 123:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 124:../../../os/rt/include/chthreads.h **** 
 125:../../../os/rt/include/chthreads.h **** /**
 126:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 127:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 128:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 129:../../../os/rt/include/chthreads.h ****  *
 130:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 131:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @api
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 139:../../../os/rt/include/chthreads.h ****  *
 140:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 141:../../../os/rt/include/chthreads.h ****  */
 142:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 143:../../../os/rt/include/chthreads.h **** 
 144:../../../os/rt/include/chthreads.h **** /**
 145:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 146:../../../os/rt/include/chthreads.h ****  *
 147:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 148:../../../os/rt/include/chthreads.h ****  */
 149:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 150:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 151:../../../os/rt/include/chthreads.h **** /** @} */
 152:../../../os/rt/include/chthreads.h **** 
 153:../../../os/rt/include/chthreads.h **** /**
 154:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 155:../../../os/rt/include/chthreads.h ****  */
 156:../../../os/rt/include/chthreads.h **** /**
 157:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 158:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 159:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 160:../../../os/rt/include/chthreads.h ****  */
 161:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 162:../../../os/rt/include/chthreads.h **** /** @} */
 163:../../../os/rt/include/chthreads.h **** 
 164:../../../os/rt/include/chthreads.h **** /**
 165:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 166:../../../os/rt/include/chthreads.h ****  * @{
 167:../../../os/rt/include/chthreads.h ****  */
 168:../../../os/rt/include/chthreads.h **** /**
 169:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 170:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 171:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 172:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 173:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 174:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 175:../../../os/rt/include/chthreads.h ****  *          converted.
 176:../../../os/rt/include/chthreads.h ****  *
 177:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 178:../../../os/rt/include/chthreads.h ****  *
 179:../../../os/rt/include/chthreads.h ****  * @api
 180:../../../os/rt/include/chthreads.h ****  */
 181:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 182:../../../os/rt/include/chthreads.h **** 
 183:../../../os/rt/include/chthreads.h **** /**
 184:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 185:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 186:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 187:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 188:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 189:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 190:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 191:../../../os/rt/include/chthreads.h ****  *          converted.
 192:../../../os/rt/include/chthreads.h ****  *
 193:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 194:../../../os/rt/include/chthreads.h ****  *
 195:../../../os/rt/include/chthreads.h ****  * @api
 196:../../../os/rt/include/chthreads.h ****  */
 197:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 198:../../../os/rt/include/chthreads.h **** 
 199:../../../os/rt/include/chthreads.h **** /**
 200:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 201:../../../os/rt/include/chthreads.h ****  *          microseconds.
 202:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 203:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 204:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 205:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 206:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 207:../../../os/rt/include/chthreads.h ****  *          converted.
 208:../../../os/rt/include/chthreads.h ****  *
 209:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @api
 212:../../../os/rt/include/chthreads.h ****  */
 213:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 214:../../../os/rt/include/chthreads.h **** /** @} */
 215:../../../os/rt/include/chthreads.h **** 
 216:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 217:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 218:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 219:../../../os/rt/include/chthreads.h **** 
 220:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 221:../../../os/rt/include/chthreads.h **** extern "C" {
 222:../../../os/rt/include/chthreads.h **** #endif
 223:../../../os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 224:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 225:../../../os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 226:../../../os/rt/include/chthreads.h **** #endif
 227:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 228:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 229:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 230:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 231:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 232:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 233:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 234:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 235:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 236:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 237:../../../os/rt/include/chthreads.h **** #endif
 238:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 239:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 240:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 241:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 242:../../../os/rt/include/chthreads.h **** #endif
 243:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 244:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 245:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 246:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 247:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 248:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 249:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 250:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 251:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 252:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 253:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 254:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 255:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 256:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 257:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 258:../../../os/rt/include/chthreads.h **** }
 259:../../../os/rt/include/chthreads.h **** #endif
 260:../../../os/rt/include/chthreads.h **** 
 261:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 262:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 263:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 264:../../../os/rt/include/chthreads.h **** 
 265:../../../os/rt/include/chthreads.h ****  /**
 266:../../../os/rt/include/chthreads.h ****   * @brief   Returns a pointer to the current @p thread_t.
 267:../../../os/rt/include/chthreads.h ****   *
 268:../../../os/rt/include/chthreads.h ****   * @return             A pointer to the current thread.
 269:../../../os/rt/include/chthreads.h ****   *
 270:../../../os/rt/include/chthreads.h ****   * @xclass
 271:../../../os/rt/include/chthreads.h ****   */
 272:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 273:../../../os/rt/include/chthreads.h **** 
 274:../../../os/rt/include/chthreads.h ****   return ch.rlist.current;
 275:../../../os/rt/include/chthreads.h **** }
 276:../../../os/rt/include/chthreads.h **** 
 277:../../../os/rt/include/chthreads.h **** /**
 278:../../../os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 279:../../../os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 280:../../../os/rt/include/chthreads.h ****  *
 281:../../../os/rt/include/chthreads.h ****  * @return              The current thread priority.
 282:../../../os/rt/include/chthreads.h ****  *
 283:../../../os/rt/include/chthreads.h ****  * @xclass
 284:../../../os/rt/include/chthreads.h ****  */
 285:../../../os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 286:../../../os/rt/include/chthreads.h **** 
 287:../../../os/rt/include/chthreads.h ****   return chThdGetSelfX()->prio;
 288:../../../os/rt/include/chthreads.h **** }
 289:../../../os/rt/include/chthreads.h **** 
 290:../../../os/rt/include/chthreads.h **** /**
 291:../../../os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 292:../../../os/rt/include/chthreads.h ****  * @note    This function is only available when the
 293:../../../os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 294:../../../os/rt/include/chthreads.h ****  *
 295:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 296:../../../os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 297:../../../os/rt/include/chthreads.h ****  *
 298:../../../os/rt/include/chthreads.h ****  * @xclass
 299:../../../os/rt/include/chthreads.h ****  */
 300:../../../os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 301:../../../os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 302:../../../os/rt/include/chthreads.h **** 
 303:../../../os/rt/include/chthreads.h ****   return tp->time;
 304:../../../os/rt/include/chthreads.h **** }
 305:../../../os/rt/include/chthreads.h **** #endif
 306:../../../os/rt/include/chthreads.h **** 
 307:../../../os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 308:../../../os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 309:../../../os/rt/include/chthreads.h **** /**
 310:../../../os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 311:../../../os/rt/include/chthreads.h ****  *
 312:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 313:../../../os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 314:../../../os/rt/include/chthreads.h ****  *
 315:../../../os/rt/include/chthreads.h ****  * @xclass
 316:../../../os/rt/include/chthreads.h ****  */
 317:../../../os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 318:../../../os/rt/include/chthreads.h **** 
 319:../../../os/rt/include/chthreads.h ****   return tp->wabase;
 320:../../../os/rt/include/chthreads.h **** }
 321:../../../os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 322:../../../os/rt/include/chthreads.h **** 
 323:../../../os/rt/include/chthreads.h **** /**
 324:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 325:../../../os/rt/include/chthreads.h ****  *
 326:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 327:../../../os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 328:../../../os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 329:../../../os/rt/include/chthreads.h ****  *
 330:../../../os/rt/include/chthreads.h ****  * @xclass
 331:../../../os/rt/include/chthreads.h ****  */
 332:../../../os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 333:../../../os/rt/include/chthreads.h **** 
 334:../../../os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 335:../../../os/rt/include/chthreads.h **** }
 336:../../../os/rt/include/chthreads.h **** 
 337:../../../os/rt/include/chthreads.h **** /**
 338:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 339:../../../os/rt/include/chthreads.h ****  *
 340:../../../os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 341:../../../os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 342:../../../os/rt/include/chthreads.h ****  *
 343:../../../os/rt/include/chthreads.h ****  * @xclass
 344:../../../os/rt/include/chthreads.h ****  */
 345:../../../os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 346:../../../os/rt/include/chthreads.h **** 
 347:../../../os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 348:../../../os/rt/include/chthreads.h **** }
 349:../../../os/rt/include/chthreads.h **** 
 350:../../../os/rt/include/chthreads.h **** /**
 351:../../../os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 352:../../../os/rt/include/chthreads.h ****  *
 353:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 354:../../../os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 355:../../../os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 356:../../../os/rt/include/chthreads.h ****  *
 357:../../../os/rt/include/chthreads.h ****  * @iclass
 358:../../../os/rt/include/chthreads.h ****  */
 359:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 360:../../../os/rt/include/chthreads.h **** 
 361:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 362:../../../os/rt/include/chthreads.h **** 
 363:../../../os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 364:../../../os/rt/include/chthreads.h **** }
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified number of ticks.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @param[in] ticks     the delay in system ticks, the special values are
 370:../../../os/rt/include/chthreads.h ****  *                      handled as follow:
 371:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 372:../../../os/rt/include/chthreads.h ****  *                        state.
 373:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 374:../../../os/rt/include/chthreads.h ****  *                      .
 375:../../../os/rt/include/chthreads.h ****  *
 376:../../../os/rt/include/chthreads.h ****  * @sclass
 377:../../../os/rt/include/chthreads.h ****  */
 378:../../../os/rt/include/chthreads.h **** static inline void chThdSleepS(sysinterval_t ticks) {
 379:../../../os/rt/include/chthreads.h **** 
 380:../../../os/rt/include/chthreads.h ****   chDbgCheck(ticks != TIME_IMMEDIATE);
 381:../../../os/rt/include/chthreads.h **** 
 382:../../../os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 1153               		.loc 4 382 0
 1154 0002 BC01      		movw r22,r24
 1155 0004 88E0      		ldi r24,lo8(8)
 1156               	.LVL79:
 1157 0006 0E94 0000 		call chSchGoSleepTimeoutS
 1158               	.LVL80:
 1159               	.LBE338:
 1160               	.LBE337:
 1161               	.LBB339:
 1162               	.LBB340:
 1163               	.LBB341:
 1164               	.LBB342:
 1165               		.loc 3 447 0
 1166               	/* #APP */
 1167               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1168 000a 7894      		sei
 1169               	 ;  0 "" 2
 1170               	/* #NOAPP */
 1171 000c 0895      		ret
 1172               	.LBE342:
 1173               	.LBE341:
 1174               	.LBE340:
 1175               	.LBE339:
 1176               		.cfi_endproc
 1177               	.LFE162:
 1179               		.section	.text.chThdSleepUntil,"ax",@progbits
 1180               	.global	chThdSleepUntil
 1182               	chThdSleepUntil:
 1183               	.LFB163:
 652:../../../os/rt/src/chthreads.c **** 
 653:../../../os/rt/src/chthreads.c ****   chSysLock();
 654:../../../os/rt/src/chthreads.c ****   chThdSleepS(time);
 655:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 656:../../../os/rt/src/chthreads.c **** }
 657:../../../os/rt/src/chthreads.c **** 
 658:../../../os/rt/src/chthreads.c **** /**
 659:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 660:../../../os/rt/src/chthreads.c ****  *          specified value.
 661:../../../os/rt/src/chthreads.c ****  * @note    The function has no concept of "past", all specifiable times
 662:../../../os/rt/src/chthreads.c ****  *          are in the future, this means that if you call this function
 663:../../../os/rt/src/chthreads.c ****  *          exceeding your calculated intervals then the function will
 664:../../../os/rt/src/chthreads.c ****  *          return in a far future time, not immediately.
 665:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntilWindowed()
 666:../../../os/rt/src/chthreads.c ****  *
 667:../../../os/rt/src/chthreads.c ****  * @param[in] time      absolute system time
 668:../../../os/rt/src/chthreads.c ****  *
 669:../../../os/rt/src/chthreads.c ****  * @api
 670:../../../os/rt/src/chthreads.c ****  */
 671:../../../os/rt/src/chthreads.c **** void chThdSleepUntil(systime_t time) {
 1184               		.loc 1 671 0
 1185               		.cfi_startproc
 1186               	.LVL81:
 1187               	/* prologue: function */
 1188               	/* frame size = 0 */
 1189               	/* stack size = 0 */
 1190               	.L__stack_usage = 0
 1191               	.LBB343:
 1192               	.LBB344:
 1193               	.LBB345:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1194               		.loc 3 437 0
 1195               	/* #APP */
 1196               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1197 0000 F894      		cli
 1198               	 ;  0 "" 2
 1199               	/* #NOAPP */
 1200               	.LBE345:
 1201               	.LBE344:
 1202               	.LBE343:
 1203               	.LBB346:
 1204               	.LBB347:
 1205               	.LBB348:
 1206               	.LBB349:
 1207               		.file 5 "../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   AVR/MEGA ST subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                        */
  34:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                        */
  38:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: for models that have many timers, could add AVR_ST_USE_TIMER.      */
  41:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  42:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  43:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                      */
  44:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  45:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  46:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: error checks for valid timer selected.                             */
  47:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  48:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  49:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                        */
  50:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  51:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  52:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  53:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                           */
  54:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  55:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  56:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  57:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                   */
  58:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  59:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  60:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  61:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** extern "C" {
  62:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  63:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  64:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  65:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** }
  66:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  67:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  68:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  69:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  70:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  71:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #else
  72:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  73:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  74:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  75:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  76:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  77:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                 */
  78:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  79:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  80:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  81:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  82:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  83:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  84:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  85:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @notapi
  86:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  87:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  88:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  89:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 1208               		.loc 5 89 0
 1209 0002 2091 8400 		lds r18,132
 1210 0006 3091 8500 		lds r19,132+1
 1211               	.LVL82:
 1212               	.LBE349:
 1213               	.LBE348:
 1214               	.LBE347:
 1215               	.LBE346:
 1216               	.LBB350:
 1217               	.LBB351:
 1218               		.file 6 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chtime.h **** 
   4:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chtime.h **** 
   6:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chtime.h ****     (at your option) any later version.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @{
  26:../../../os/rt/include/chtime.h ****  */
  27:../../../os/rt/include/chtime.h **** 
  28:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  29:../../../os/rt/include/chtime.h **** #define CHTIME_H
  30:../../../os/rt/include/chtime.h **** 
  31:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  32:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** 
  35:../../../os/rt/include/chtime.h **** /**
  36:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  37:../../../os/rt/include/chtime.h ****  * @{
  38:../../../os/rt/include/chtime.h ****  */
  39:../../../os/rt/include/chtime.h **** /**
  40:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  41:../../../os/rt/include/chtime.h ****  *          specification.
  42:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  44:../../../os/rt/include/chtime.h ****  */
  45:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  46:../../../os/rt/include/chtime.h **** 
  47:../../../os/rt/include/chtime.h **** /**
  48:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  49:../../../os/rt/include/chtime.h ****  *          specification.
  50:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  52:../../../os/rt/include/chtime.h ****  */
  53:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  54:../../../os/rt/include/chtime.h **** 
  55:../../../os/rt/include/chtime.h **** /**
  56:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  57:../../../os/rt/include/chtime.h ****  */
  58:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  59:../../../os/rt/include/chtime.h **** 
  60:../../../os/rt/include/chtime.h **** /**
  61:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  62:../../../os/rt/include/chtime.h ****  */
  63:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  64:../../../os/rt/include/chtime.h **** /** @} */
  65:../../../os/rt/include/chtime.h **** 
  66:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  67:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** 
  70:../../../os/rt/include/chtime.h **** /**
  71:../../../os/rt/include/chtime.h ****  * @brief   System time counter resolution.
  72:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  73:../../../os/rt/include/chtime.h ****  */
  74:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_RESOLUTION) || defined(__DOXYGEN__)
  75:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_RESOLUTION                32
  76:../../../os/rt/include/chtime.h **** #endif
  77:../../../os/rt/include/chtime.h **** 
  78:../../../os/rt/include/chtime.h **** /**
  79:../../../os/rt/include/chtime.h ****  * @brief   System tick frequency.
  80:../../../os/rt/include/chtime.h ****  * @details Frequency of the system timer that drives the system ticks. This
  81:../../../os/rt/include/chtime.h ****  *          setting also defines the system tick time unit.
  82:../../../os/rt/include/chtime.h ****  */
  83:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_FREQUENCY) || defined(__DOXYGEN__)
  84:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_FREQUENCY                 1000
  85:../../../os/rt/include/chtime.h **** #endif
  86:../../../os/rt/include/chtime.h **** 
  87:../../../os/rt/include/chtime.h **** /**
  88:../../../os/rt/include/chtime.h ****  * @brief   Time intervals data size.
  89:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  90:../../../os/rt/include/chtime.h ****  */
  91:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_INTERVALS_SIZE) || defined(__DOXYGEN__)
  92:../../../os/rt/include/chtime.h **** #define CH_CFG_INTERVALS_SIZE               32
  93:../../../os/rt/include/chtime.h **** #endif
  94:../../../os/rt/include/chtime.h **** 
  95:../../../os/rt/include/chtime.h **** /**
  96:../../../os/rt/include/chtime.h ****  * @brief   Time types data size.
  97:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16 or 32 bits.
  98:../../../os/rt/include/chtime.h ****  */
  99:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_TIME_TYPES_SIZE) || defined(__DOXYGEN__)
 100:../../../os/rt/include/chtime.h **** #define CH_CFG_TIME_TYPES_SIZE              32
 101:../../../os/rt/include/chtime.h **** #endif
 102:../../../os/rt/include/chtime.h **** 
 103:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 104:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
 105:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 106:../../../os/rt/include/chtime.h **** 
 107:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
 108:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
 109:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
 110:../../../os/rt/include/chtime.h **** #endif
 111:../../../os/rt/include/chtime.h **** 
 112:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
 113:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
 114:../../../os/rt/include/chtime.h **** #endif
 115:../../../os/rt/include/chtime.h **** 
 116:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
 117:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
 118:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
 119:../../../os/rt/include/chtime.h **** #endif
 120:../../../os/rt/include/chtime.h **** 
 121:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
 122:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
 123:../../../os/rt/include/chtime.h **** #endif
 124:../../../os/rt/include/chtime.h **** 
 125:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
 126:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
 127:../../../os/rt/include/chtime.h **** #endif
 128:../../../os/rt/include/chtime.h **** 
 129:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 130:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 132:../../../os/rt/include/chtime.h **** 
 133:../../../os/rt/include/chtime.h **** /**
 134:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 135:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 136:../../../os/rt/include/chtime.h ****  */
 137:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 138:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 139:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 140:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 141:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 142:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 143:../../../os/rt/include/chtime.h **** #endif
 144:../../../os/rt/include/chtime.h **** 
 145:../../../os/rt/include/chtime.h **** /**
 146:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 147:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 148:../../../os/rt/include/chtime.h ****  */
 149:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 150:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 151:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 152:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 153:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 154:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 155:../../../os/rt/include/chtime.h **** #endif
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 158:../../../os/rt/include/chtime.h **** /**
 159:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 160:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 161:../../../os/rt/include/chtime.h ****  */
 162:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /**
 165:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 166:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 167:../../../os/rt/include/chtime.h ****  */
 168:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 169:../../../os/rt/include/chtime.h **** 
 170:../../../os/rt/include/chtime.h **** /**
 171:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 172:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 173:../../../os/rt/include/chtime.h ****  */
 174:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 175:../../../os/rt/include/chtime.h **** 
 176:../../../os/rt/include/chtime.h **** /**
 177:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 178:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 179:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 180:../../../os/rt/include/chtime.h ****  */
 181:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 182:../../../os/rt/include/chtime.h **** 
 183:../../../os/rt/include/chtime.h **** #else
 184:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 185:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 186:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 187:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 188:../../../os/rt/include/chtime.h **** #endif
 189:../../../os/rt/include/chtime.h **** 
 190:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 191:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 192:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 193:../../../os/rt/include/chtime.h **** 
 194:../../../os/rt/include/chtime.h **** 
 195:../../../os/rt/include/chtime.h **** /**
 196:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 197:../../../os/rt/include/chtime.h ****  * @{
 198:../../../os/rt/include/chtime.h ****  */
 199:../../../os/rt/include/chtime.h **** /**
 200:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 201:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 202:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 203:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 204:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 205:../../../os/rt/include/chtime.h ****  *          converted.
 206:../../../os/rt/include/chtime.h ****  *
 207:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 208:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 209:../../../os/rt/include/chtime.h ****  *
 210:../../../os/rt/include/chtime.h ****  * @api
 211:../../../os/rt/include/chtime.h ****  */
 212:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 213:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 214:../../../os/rt/include/chtime.h **** 
 215:../../../os/rt/include/chtime.h **** /**
 216:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 217:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 218:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 219:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 220:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 221:../../../os/rt/include/chtime.h ****  *          converted.
 222:../../../os/rt/include/chtime.h ****  *
 223:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 224:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 225:../../../os/rt/include/chtime.h ****  *
 226:../../../os/rt/include/chtime.h ****  * @api
 227:../../../os/rt/include/chtime.h ****  */
 228:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 229:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 230:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 231:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 232:../../../os/rt/include/chtime.h **** 
 233:../../../os/rt/include/chtime.h **** /**
 234:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 235:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 236:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 237:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 238:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 239:../../../os/rt/include/chtime.h ****  *          converted.
 240:../../../os/rt/include/chtime.h ****  *
 241:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 242:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 243:../../../os/rt/include/chtime.h ****  *
 244:../../../os/rt/include/chtime.h ****  * @api
 245:../../../os/rt/include/chtime.h ****  */
 246:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 247:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 248:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 249:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 250:../../../os/rt/include/chtime.h **** 
 251:../../../os/rt/include/chtime.h **** /**
 252:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 253:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 254:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 255:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 256:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 257:../../../os/rt/include/chtime.h ****  *          converted.
 258:../../../os/rt/include/chtime.h ****  *
 259:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 260:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 261:../../../os/rt/include/chtime.h ****  *
 262:../../../os/rt/include/chtime.h ****  * @api
 263:../../../os/rt/include/chtime.h ****  */
 264:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 265:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 266:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 267:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 268:../../../os/rt/include/chtime.h **** 
 269:../../../os/rt/include/chtime.h **** /**
 270:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 271:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 272:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 273:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 274:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 275:../../../os/rt/include/chtime.h ****  *          converted.
 276:../../../os/rt/include/chtime.h ****  *
 277:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 278:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 279:../../../os/rt/include/chtime.h ****  *
 280:../../../os/rt/include/chtime.h ****  * @api
 281:../../../os/rt/include/chtime.h ****  */
 282:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 283:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 284:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 285:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** /**
 288:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 289:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 290:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 291:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 292:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 293:../../../os/rt/include/chtime.h ****  *          converted.
 294:../../../os/rt/include/chtime.h ****  *
 295:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 296:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 297:../../../os/rt/include/chtime.h ****  *
 298:../../../os/rt/include/chtime.h ****  * @api
 299:../../../os/rt/include/chtime.h ****  */
 300:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 301:../../../os/rt/include/chtime.h ****     (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +      \
 302:../../../os/rt/include/chtime.h ****                     (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /    \
 303:../../../os/rt/include/chtime.h ****                    (time_conv_t)CH_CFG_ST_FREQUENCY)
 304:../../../os/rt/include/chtime.h **** /** @} */
 305:../../../os/rt/include/chtime.h **** 
 306:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 307:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 308:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 309:../../../os/rt/include/chtime.h **** 
 310:../../../os/rt/include/chtime.h **** /*
 311:../../../os/rt/include/chtime.h ****  * Virtual Timers APIs.
 312:../../../os/rt/include/chtime.h ****  */
 313:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 314:../../../os/rt/include/chtime.h **** extern "C" {
 315:../../../os/rt/include/chtime.h **** #endif
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** #endif
 320:../../../os/rt/include/chtime.h **** 
 321:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 322:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 323:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 324:../../../os/rt/include/chtime.h **** 
 325:../../../os/rt/include/chtime.h **** /**
 326:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 327:../../../os/rt/include/chtime.h ****  * @{
 328:../../../os/rt/include/chtime.h ****  */
 329:../../../os/rt/include/chtime.h **** /**
 330:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 331:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 332:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 333:../../../os/rt/include/chtime.h ****  *
 334:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 335:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 336:../../../os/rt/include/chtime.h ****  *
 337:../../../os/rt/include/chtime.h ****  * @special
 338:../../../os/rt/include/chtime.h ****  */
 339:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 340:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 343:../../../os/rt/include/chtime.h **** 
 344:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 345:../../../os/rt/include/chtime.h ****               "conversion overflow");
 346:../../../os/rt/include/chtime.h **** 
 347:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 348:../../../os/rt/include/chtime.h **** }
 349:../../../os/rt/include/chtime.h **** 
 350:../../../os/rt/include/chtime.h **** /**
 351:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 352:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 353:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 354:../../../os/rt/include/chtime.h ****  *
 355:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 356:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 357:../../../os/rt/include/chtime.h ****  *
 358:../../../os/rt/include/chtime.h ****  * @special
 359:../../../os/rt/include/chtime.h ****  */
 360:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 361:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 362:../../../os/rt/include/chtime.h **** 
 363:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 364:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 365:../../../os/rt/include/chtime.h **** 
 366:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 367:../../../os/rt/include/chtime.h ****               "conversion overflow");
 368:../../../os/rt/include/chtime.h **** 
 369:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 370:../../../os/rt/include/chtime.h **** }
 371:../../../os/rt/include/chtime.h **** 
 372:../../../os/rt/include/chtime.h **** /**
 373:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 374:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 375:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 376:../../../os/rt/include/chtime.h ****  *
 377:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 378:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 379:../../../os/rt/include/chtime.h ****  *
 380:../../../os/rt/include/chtime.h ****  * @special
 381:../../../os/rt/include/chtime.h ****  */
 382:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 383:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 384:../../../os/rt/include/chtime.h **** 
 385:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 386:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 387:../../../os/rt/include/chtime.h **** 
 388:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 389:../../../os/rt/include/chtime.h ****               "conversion overflow");
 390:../../../os/rt/include/chtime.h **** 
 391:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 392:../../../os/rt/include/chtime.h **** }
 393:../../../os/rt/include/chtime.h **** 
 394:../../../os/rt/include/chtime.h **** /**
 395:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 396:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 397:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 398:../../../os/rt/include/chtime.h ****  *
 399:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 400:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 401:../../../os/rt/include/chtime.h ****  *
 402:../../../os/rt/include/chtime.h ****  * @special
 403:../../../os/rt/include/chtime.h ****  */
 404:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 405:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 408:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 409:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 410:../../../os/rt/include/chtime.h **** 
 411:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 412:../../../os/rt/include/chtime.h ****               "conversion overflow");
 413:../../../os/rt/include/chtime.h **** 
 414:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 415:../../../os/rt/include/chtime.h **** }
 416:../../../os/rt/include/chtime.h **** 
 417:../../../os/rt/include/chtime.h **** /**
 418:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 419:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 420:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 421:../../../os/rt/include/chtime.h ****  *
 422:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 423:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 424:../../../os/rt/include/chtime.h ****  *
 425:../../../os/rt/include/chtime.h ****  * @special
 426:../../../os/rt/include/chtime.h ****  */
 427:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 428:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 431:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 432:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 433:../../../os/rt/include/chtime.h **** 
 434:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 435:../../../os/rt/include/chtime.h ****               "conversion overflow");
 436:../../../os/rt/include/chtime.h **** 
 437:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 438:../../../os/rt/include/chtime.h **** }
 439:../../../os/rt/include/chtime.h **** 
 440:../../../os/rt/include/chtime.h **** /**
 441:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 442:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 443:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 444:../../../os/rt/include/chtime.h ****  *
 445:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 446:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 447:../../../os/rt/include/chtime.h ****  *
 448:../../../os/rt/include/chtime.h ****  * @special
 449:../../../os/rt/include/chtime.h ****  */
 450:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 451:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 452:../../../os/rt/include/chtime.h **** 
 453:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 454:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 455:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 456:../../../os/rt/include/chtime.h **** 
 457:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 458:../../../os/rt/include/chtime.h ****               "conversion overflow");
 459:../../../os/rt/include/chtime.h **** 
 460:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 461:../../../os/rt/include/chtime.h **** }
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h **** /**
 464:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 465:../../../os/rt/include/chtime.h ****  *
 466:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 467:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 468:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 469:../../../os/rt/include/chtime.h ****  *
 470:../../../os/rt/include/chtime.h ****  * @xclass
 471:../../../os/rt/include/chtime.h ****  */
 472:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 473:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 474:../../../os/rt/include/chtime.h **** 
 475:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 476:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
 477:../../../os/rt/include/chtime.h **** #endif
 478:../../../os/rt/include/chtime.h **** 
 479:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 480:../../../os/rt/include/chtime.h **** }
 481:../../../os/rt/include/chtime.h **** 
 482:../../../os/rt/include/chtime.h **** /**
 483:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 484:../../../os/rt/include/chtime.h ****  *
 485:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 486:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 487:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 488:../../../os/rt/include/chtime.h ****  *
 489:../../../os/rt/include/chtime.h ****  * @xclass
 490:../../../os/rt/include/chtime.h ****  */
 491:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 492:../../../os/rt/include/chtime.h **** 
 493:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 494:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 495:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 1219               		.loc 6 495 0
 1220 000a BC01      		movw r22,r24
 1221 000c 621B      		sub r22,r18
 1222 000e 730B      		sbc r23,r19
 1223               	.LVL83:
 1224               	.LBE351:
 1225               	.LBE350:
 672:../../../os/rt/src/chthreads.c ****   sysinterval_t interval;
 673:../../../os/rt/src/chthreads.c **** 
 674:../../../os/rt/src/chthreads.c ****   chSysLock();
 675:../../../os/rt/src/chthreads.c ****   interval = chTimeDiffX(chVTGetSystemTimeX(), time);
 676:../../../os/rt/src/chthreads.c ****   if (interval > (sysinterval_t)0) {
 1226               		.loc 1 676 0
 1227 0010 01F0      		breq .L34
 1228               	.LVL84:
 1229               	.LBB352:
 1230               	.LBB353:
 1231               		.loc 4 382 0
 1232 0012 88E0      		ldi r24,lo8(8)
 1233               	.LVL85:
 1234 0014 0E94 0000 		call chSchGoSleepTimeoutS
 1235               	.LVL86:
 1236               	.L34:
 1237               	.LBE353:
 1238               	.LBE352:
 1239               	.LBB354:
 1240               	.LBB355:
 1241               	.LBB356:
 1242               	.LBB357:
 1243               		.loc 3 447 0
 1244               	/* #APP */
 1245               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1246 0018 7894      		sei
 1247               	 ;  0 "" 2
 1248               	/* #NOAPP */
 1249 001a 0895      		ret
 1250               	.LBE357:
 1251               	.LBE356:
 1252               	.LBE355:
 1253               	.LBE354:
 1254               		.cfi_endproc
 1255               	.LFE163:
 1257               		.section	.text.chThdSleepUntilWindowed,"ax",@progbits
 1258               	.global	chThdSleepUntilWindowed
 1260               	chThdSleepUntilWindowed:
 1261               	.LFB164:
 677:../../../os/rt/src/chthreads.c ****     chThdSleepS(interval);
 678:../../../os/rt/src/chthreads.c ****   }
 679:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 680:../../../os/rt/src/chthreads.c **** }
 681:../../../os/rt/src/chthreads.c **** 
 682:../../../os/rt/src/chthreads.c **** /**
 683:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 684:../../../os/rt/src/chthreads.c ****  *          specified value.
 685:../../../os/rt/src/chthreads.c ****  * @note    The system time is assumed to be between @p prev and @p time
 686:../../../os/rt/src/chthreads.c ****  *          else the call is assumed to have been called outside the
 687:../../../os/rt/src/chthreads.c ****  *          allowed time interval, in this case no sleep is performed.
 688:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntil()
 689:../../../os/rt/src/chthreads.c ****  *
 690:../../../os/rt/src/chthreads.c ****  * @param[in] prev      absolute system time of the previous deadline
 691:../../../os/rt/src/chthreads.c ****  * @param[in] next      absolute system time of the next deadline
 692:../../../os/rt/src/chthreads.c ****  * @return              the @p next parameter
 693:../../../os/rt/src/chthreads.c ****  *
 694:../../../os/rt/src/chthreads.c ****  * @api
 695:../../../os/rt/src/chthreads.c ****  */
 696:../../../os/rt/src/chthreads.c **** systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 1262               		.loc 1 696 0
 1263               		.cfi_startproc
 1264               	.LVL87:
 1265 0000 CF93      		push r28
 1266               	.LCFI21:
 1267               		.cfi_def_cfa_offset 3
 1268               		.cfi_offset 28, -2
 1269 0002 DF93      		push r29
 1270               	.LCFI22:
 1271               		.cfi_def_cfa_offset 4
 1272               		.cfi_offset 29, -3
 1273               	/* prologue: function */
 1274               	/* frame size = 0 */
 1275               	/* stack size = 2 */
 1276               	.L__stack_usage = 2
 1277 0004 EB01      		movw r28,r22
 1278               	.LBB358:
 1279               	.LBB359:
 1280               	.LBB360:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1281               		.loc 3 437 0
 1282               	/* #APP */
 1283               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1284 0006 F894      		cli
 1285               	 ;  0 "" 2
 1286               	/* #NOAPP */
 1287               	.LBE360:
 1288               	.LBE359:
 1289               	.LBE358:
 1290               	.LBB361:
 1291               	.LBB362:
 1292               	.LBB363:
 1293               	.LBB364:
 1294               		.loc 5 89 0
 1295 0008 2091 8400 		lds r18,132
 1296 000c 3091 8500 		lds r19,132+1
 1297               	.LBE364:
 1298               	.LBE363:
 1299               	.LBE362:
 1300               	.LBE361:
 697:../../../os/rt/src/chthreads.c ****   systime_t time;
 698:../../../os/rt/src/chthreads.c **** 
 699:../../../os/rt/src/chthreads.c ****   chSysLock();
 700:../../../os/rt/src/chthreads.c ****   time = chVTGetSystemTimeX();
 701:../../../os/rt/src/chthreads.c ****   if (chTimeIsInRangeX(time, prev, next)) {
 1301               		.loc 1 701 0
 1302 0010 AB01      		movw r20,r22
 1303 0012 481B      		sub r20,r24
 1304 0014 590B      		sbc r21,r25
 1305 0016 B901      		movw r22,r18
 1306               	.LVL88:
 1307 0018 681B      		sub r22,r24
 1308 001a 790B      		sbc r23,r25
 1309 001c 6417      		cp r22,r20
 1310 001e 7507      		cpc r23,r21
 1311 0020 00F4      		brsh .L39
 1312               	.LBB365:
 1313               	.LBB366:
 1314               		.loc 4 382 0
 1315 0022 BE01      		movw r22,r28
 1316 0024 621B      		sub r22,r18
 1317 0026 730B      		sbc r23,r19
 1318 0028 88E0      		ldi r24,lo8(8)
 1319               	.LVL89:
 1320 002a 0E94 0000 		call chSchGoSleepTimeoutS
 1321               	.LVL90:
 1322               	.L39:
 1323               	.LBE366:
 1324               	.LBE365:
 1325               	.LBB367:
 1326               	.LBB368:
 1327               	.LBB369:
 1328               	.LBB370:
 1329               		.loc 3 447 0
 1330               	/* #APP */
 1331               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1332 002e 7894      		sei
 1333               	 ;  0 "" 2
 1334               	/* #NOAPP */
 1335               	.LBE370:
 1336               	.LBE369:
 1337               	.LBE368:
 1338               	.LBE367:
 702:../../../os/rt/src/chthreads.c ****     chThdSleepS(chTimeDiffX(time, next));
 703:../../../os/rt/src/chthreads.c ****   }
 704:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 705:../../../os/rt/src/chthreads.c **** 
 706:../../../os/rt/src/chthreads.c ****   return next;
 707:../../../os/rt/src/chthreads.c **** }
 1339               		.loc 1 707 0
 1340 0030 CE01      		movw r24,r28
 1341               	/* epilogue start */
 1342 0032 DF91      		pop r29
 1343 0034 CF91      		pop r28
 1344               	.LVL91:
 1345 0036 0895      		ret
 1346               		.cfi_endproc
 1347               	.LFE164:
 1349               		.section	.text.chThdYield,"ax",@progbits
 1350               	.global	chThdYield
 1352               	chThdYield:
 1353               	.LFB165:
 708:../../../os/rt/src/chthreads.c **** 
 709:../../../os/rt/src/chthreads.c **** /**
 710:../../../os/rt/src/chthreads.c ****  * @brief   Yields the time slot.
 711:../../../os/rt/src/chthreads.c ****  * @details Yields the CPU control to the next thread in the ready list with
 712:../../../os/rt/src/chthreads.c ****  *          equal priority, if any.
 713:../../../os/rt/src/chthreads.c ****  *
 714:../../../os/rt/src/chthreads.c ****  * @api
 715:../../../os/rt/src/chthreads.c ****  */
 716:../../../os/rt/src/chthreads.c **** void chThdYield(void) {
 1354               		.loc 1 716 0
 1355               		.cfi_startproc
 1356               	/* prologue: function */
 1357               	/* frame size = 0 */
 1358               	/* stack size = 0 */
 1359               	.L__stack_usage = 0
 1360               	.LBB371:
 1361               	.LBB372:
 1362               	.LBB373:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1363               		.loc 3 437 0
 1364               	/* #APP */
 1365               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1366 0000 F894      		cli
 1367               	 ;  0 "" 2
 1368               	/* #NOAPP */
 1369               	.LBE373:
 1370               	.LBE372:
 1371               	.LBE371:
 1372               	.LBB374:
 1373               	.LBB375:
 1374               	.LBB376:
 1375               	.LBB377:
 582:../../../os/rt/include/chschd.h **** 
 583:../../../os/rt/include/chschd.h ****   return tp;
 584:../../../os/rt/include/chschd.h **** }
 585:../../../os/rt/include/chschd.h **** 
 586:../../../os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 587:../../../os/rt/include/chschd.h **** 
 588:../../../os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 589:../../../os/rt/include/chschd.h ****   do {
 590:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 591:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 592:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 594:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 595:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 596:../../../os/rt/include/chschd.h **** }
 597:../../../os/rt/include/chschd.h **** 
 598:../../../os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 599:../../../os/rt/include/chschd.h **** 
 600:../../../os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 602:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 603:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 604:../../../os/rt/include/chschd.h **** }
 605:../../../os/rt/include/chschd.h **** 
 606:../../../os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 607:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 608:../../../os/rt/include/chschd.h **** 
 609:../../../os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 610:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 611:../../../os/rt/include/chschd.h **** 
 612:../../../os/rt/include/chschd.h ****   return tp;
 613:../../../os/rt/include/chschd.h **** }
 614:../../../os/rt/include/chschd.h **** 
 615:../../../os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 616:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 617:../../../os/rt/include/chschd.h **** 
 618:../../../os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 619:../../../os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 620:../../../os/rt/include/chschd.h **** 
 621:../../../os/rt/include/chschd.h ****   return tp;
 622:../../../os/rt/include/chschd.h **** }
 623:../../../os/rt/include/chschd.h **** 
 624:../../../os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 625:../../../os/rt/include/chschd.h **** 
 626:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 627:../../../os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 628:../../../os/rt/include/chschd.h **** 
 629:../../../os/rt/include/chschd.h ****   return tp;
 630:../../../os/rt/include/chschd.h **** }
 631:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == TRUE */
 632:../../../os/rt/include/chschd.h **** 
 633:../../../os/rt/include/chschd.h **** /**
 634:../../../os/rt/include/chschd.h ****  * @brief   Determines if the current thread must reschedule.
 635:../../../os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 636:../../../os/rt/include/chschd.h ****  *          higher priority.
 637:../../../os/rt/include/chschd.h ****  *
 638:../../../os/rt/include/chschd.h ****  * @return              The priorities situation.
 639:../../../os/rt/include/chschd.h ****  * @retval false        if rescheduling is not necessary.
 640:../../../os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at higher priority.
 641:../../../os/rt/include/chschd.h ****  *
 642:../../../os/rt/include/chschd.h ****  * @iclass
 643:../../../os/rt/include/chschd.h ****  */
 644:../../../os/rt/include/chschd.h **** static inline bool chSchIsRescRequiredI(void) {
 645:../../../os/rt/include/chschd.h **** 
 646:../../../os/rt/include/chschd.h ****   chDbgCheckClassI();
 647:../../../os/rt/include/chschd.h **** 
 648:../../../os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) > currp->prio;
 649:../../../os/rt/include/chschd.h **** }
 650:../../../os/rt/include/chschd.h **** 
 651:../../../os/rt/include/chschd.h **** /**
 652:../../../os/rt/include/chschd.h ****  * @brief   Determines if yielding is possible.
 653:../../../os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 654:../../../os/rt/include/chschd.h ****  *          equal or higher priority.
 655:../../../os/rt/include/chschd.h ****  *
 656:../../../os/rt/include/chschd.h ****  * @return              The priorities situation.
 657:../../../os/rt/include/chschd.h ****  * @retval false        if yielding is not possible.
 658:../../../os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at equal or higher priority.
 659:../../../os/rt/include/chschd.h ****  *
 660:../../../os/rt/include/chschd.h ****  * @sclass
 661:../../../os/rt/include/chschd.h ****  */
 662:../../../os/rt/include/chschd.h **** static inline bool chSchCanYieldS(void) {
 663:../../../os/rt/include/chschd.h **** 
 664:../../../os/rt/include/chschd.h ****   chDbgCheckClassS();
 665:../../../os/rt/include/chschd.h **** 
 666:../../../os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) >= currp->prio;
 1376               		.loc 2 666 0
 1377 0002 A091 0000 		lds r26,ch
 1378 0006 B091 0000 		lds r27,ch+1
 1379 000a E091 0000 		lds r30,ch+11
 1380 000e F091 0000 		lds r31,ch+11+1
 1381               	.LBE377:
 1382               	.LBE376:
 667:../../../os/rt/include/chschd.h **** }
 668:../../../os/rt/include/chschd.h **** 
 669:../../../os/rt/include/chschd.h **** /**
 670:../../../os/rt/include/chschd.h ****  * @brief   Yields the time slot.
 671:../../../os/rt/include/chschd.h ****  * @details Yields the CPU control to the next thread in the ready list with
 672:../../../os/rt/include/chschd.h ****  *          equal or higher priority, if any.
 673:../../../os/rt/include/chschd.h ****  *
 674:../../../os/rt/include/chschd.h ****  * @sclass
 675:../../../os/rt/include/chschd.h ****  */
 676:../../../os/rt/include/chschd.h **** static inline void chSchDoYieldS(void) {
 677:../../../os/rt/include/chschd.h **** 
 678:../../../os/rt/include/chschd.h ****   chDbgCheckClassS();
 679:../../../os/rt/include/chschd.h **** 
 680:../../../os/rt/include/chschd.h ****   if (chSchCanYieldS()) {
 1383               		.loc 2 680 0
 1384 0012 1496      		adiw r26,4
 1385 0014 9C91      		ld r25,X
 1386 0016 8481      		ldd r24,Z+4
 1387 0018 9817      		cp r25,r24
 1388 001a 00F0      		brlo .L41
 681:../../../os/rt/include/chschd.h ****     chSchDoRescheduleBehind();
 1389               		.loc 2 681 0
 1390 001c 0E94 0000 		call chSchDoRescheduleBehind
 1391               	.LVL92:
 1392               	.L41:
 1393               	.LBE375:
 1394               	.LBE374:
 1395               	.LBB378:
 1396               	.LBB379:
 1397               	.LBB380:
 1398               	.LBB381:
 1399               		.loc 3 447 0
 1400               	/* #APP */
 1401               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1402 0020 7894      		sei
 1403               	 ;  0 "" 2
 1404               	/* #NOAPP */
 1405 0022 0895      		ret
 1406               	.LBE381:
 1407               	.LBE380:
 1408               	.LBE379:
 1409               	.LBE378:
 1410               		.cfi_endproc
 1411               	.LFE165:
 1413               		.section	.text.chThdSuspendS,"ax",@progbits
 1414               	.global	chThdSuspendS
 1416               	chThdSuspendS:
 1417               	.LFB166:
 717:../../../os/rt/src/chthreads.c **** 
 718:../../../os/rt/src/chthreads.c ****   chSysLock();
 719:../../../os/rt/src/chthreads.c ****   chSchDoYieldS();
 720:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 721:../../../os/rt/src/chthreads.c **** }
 722:../../../os/rt/src/chthreads.c **** 
 723:../../../os/rt/src/chthreads.c **** /**
 724:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/rt/src/chthreads.c ****  *          context.
 727:../../../os/rt/src/chthreads.c ****  *
 728:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 730:../../../os/rt/src/chthreads.c ****  *
 731:../../../os/rt/src/chthreads.c ****  * @sclass
 732:../../../os/rt/src/chthreads.c ****  */
 733:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendS(thread_reference_t *trp) {
 1418               		.loc 1 733 0
 1419               		.cfi_startproc
 1420               	.LVL93:
 1421 0000 CF93      		push r28
 1422               	.LCFI23:
 1423               		.cfi_def_cfa_offset 3
 1424               		.cfi_offset 28, -2
 1425 0002 DF93      		push r29
 1426               	.LCFI24:
 1427               		.cfi_def_cfa_offset 4
 1428               		.cfi_offset 29, -3
 1429               	/* prologue: function */
 1430               	/* frame size = 0 */
 1431               	/* stack size = 2 */
 1432               	.L__stack_usage = 2
 1433               	.LBB382:
 1434               	.LBB383:
 274:../../../os/rt/include/chthreads.h **** }
 1435               		.loc 4 274 0
 1436 0004 C0E0      		ldi r28,lo8(ch)
 1437 0006 D0E0      		ldi r29,hi8(ch)
 1438 0008 EB85      		ldd r30,Y+11
 1439 000a FC85      		ldd r31,Y+12
 1440               	.LBE383:
 1441               	.LBE382:
 734:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 735:../../../os/rt/src/chthreads.c **** 
 736:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 737:../../../os/rt/src/chthreads.c **** 
 738:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1442               		.loc 1 738 0
 1443 000c DC01      		movw r26,r24
 1444 000e ED93      		st X+,r30
 1445 0010 FC93      		st X,r31
 739:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1446               		.loc 1 739 0
 1447 0012 918B      		std Z+17,r25
 1448 0014 808B      		std Z+16,r24
 740:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_SUSPENDED);
 1449               		.loc 1 740 0
 1450 0016 83E0      		ldi r24,lo8(3)
 1451               	.LVL94:
 1452 0018 0E94 0000 		call chSchGoSleepS
 1453               	.LVL95:
 741:../../../os/rt/src/chthreads.c **** 
 742:../../../os/rt/src/chthreads.c ****   return chThdGetSelfX()->u.rdymsg;
 1454               		.loc 1 742 0
 1455 001c EB85      		ldd r30,Y+11
 1456 001e FC85      		ldd r31,Y+12
 743:../../../os/rt/src/chthreads.c **** }
 1457               		.loc 1 743 0
 1458 0020 8089      		ldd r24,Z+16
 1459 0022 9189      		ldd r25,Z+17
 1460               	/* epilogue start */
 1461 0024 DF91      		pop r29
 1462 0026 CF91      		pop r28
 1463 0028 0895      		ret
 1464               		.cfi_endproc
 1465               	.LFE166:
 1467               		.section	.text.chThdSuspendTimeoutS,"ax",@progbits
 1468               	.global	chThdSuspendTimeoutS
 1470               	chThdSuspendTimeoutS:
 1471               	.LFB167:
 744:../../../os/rt/src/chthreads.c **** 
 745:../../../os/rt/src/chthreads.c **** /**
 746:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 747:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 748:../../../os/rt/src/chthreads.c ****  *          context.
 749:../../../os/rt/src/chthreads.c ****  *
 750:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 751:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 752:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 753:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 754:../../../os/rt/src/chthreads.c ****  *                        state.
 755:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 756:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 757:../../../os/rt/src/chthreads.c ****  *                        occurred.
 758:../../../os/rt/src/chthreads.c ****  *                      .
 759:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 760:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the operation timed out.
 761:../../../os/rt/src/chthreads.c ****  *
 762:../../../os/rt/src/chthreads.c ****  * @sclass
 763:../../../os/rt/src/chthreads.c ****  */
 764:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 1472               		.loc 1 764 0
 1473               		.cfi_startproc
 1474               	.LVL96:
 1475               	/* prologue: function */
 1476               	/* frame size = 0 */
 1477               	/* stack size = 0 */
 1478               	.L__stack_usage = 0
 1479               	.LBB384:
 1480               	.LBB385:
 274:../../../os/rt/include/chthreads.h **** }
 1481               		.loc 4 274 0
 1482 0000 E091 0000 		lds r30,ch+11
 1483 0004 F091 0000 		lds r31,ch+11+1
 1484               	.LBE385:
 1485               	.LBE384:
 765:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 766:../../../os/rt/src/chthreads.c **** 
 767:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 768:../../../os/rt/src/chthreads.c **** 
 769:../../../os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 1486               		.loc 1 769 0
 1487 0008 6115      		cp r22,__zero_reg__
 1488 000a 7105      		cpc r23,__zero_reg__
 1489 000c 01F0      		breq .L44
 770:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 771:../../../os/rt/src/chthreads.c ****   }
 772:../../../os/rt/src/chthreads.c **** 
 773:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1490               		.loc 1 773 0
 1491 000e DC01      		movw r26,r24
 1492 0010 ED93      		st X+,r30
 1493 0012 FC93      		st X,r31
 774:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1494               		.loc 1 774 0
 1495 0014 918B      		std Z+17,r25
 1496 0016 808B      		std Z+16,r24
 775:../../../os/rt/src/chthreads.c **** 
 776:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 1497               		.loc 1 776 0
 1498 0018 83E0      		ldi r24,lo8(3)
 1499               	.LVL97:
 1500 001a 0C94 0000 		jmp chSchGoSleepTimeoutS
 1501               	.LVL98:
 1502               	.L44:
 777:../../../os/rt/src/chthreads.c **** }
 1503               		.loc 1 777 0
 1504 001e 8FEF      		ldi r24,lo8(-1)
 1505 0020 9FEF      		ldi r25,lo8(-1)
 1506               	.LVL99:
 1507 0022 0895      		ret
 1508               		.cfi_endproc
 1509               	.LFE167:
 1511               		.section	.text.chThdResumeI,"ax",@progbits
 1512               	.global	chThdResumeI
 1514               	chThdResumeI:
 1515               	.LFB168:
 778:../../../os/rt/src/chthreads.c **** 
 779:../../../os/rt/src/chthreads.c **** /**
 780:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 781:../../../os/rt/src/chthreads.c ****  * @note    This function must not reschedule because it can be called from
 782:../../../os/rt/src/chthreads.c ****  *          ISR context.
 783:../../../os/rt/src/chthreads.c ****  *
 784:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 785:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 786:../../../os/rt/src/chthreads.c ****  *
 787:../../../os/rt/src/chthreads.c ****  * @iclass
 788:../../../os/rt/src/chthreads.c ****  */
 789:../../../os/rt/src/chthreads.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 1516               		.loc 1 789 0
 1517               		.cfi_startproc
 1518               	.LVL100:
 1519               	/* prologue: function */
 1520               	/* frame size = 0 */
 1521               	/* stack size = 0 */
 1522               	.L__stack_usage = 0
 790:../../../os/rt/src/chthreads.c **** 
 791:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1523               		.loc 1 791 0
 1524 0000 DC01      		movw r26,r24
 1525 0002 ED91      		ld r30,X+
 1526 0004 FC91      		ld r31,X
 1527 0006 1197      		sbiw r26,1
 1528 0008 3097      		sbiw r30,0
 1529 000a 01F0      		breq .L45
 1530               	.LVL101:
 1531               	.LBB386:
 792:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 793:../../../os/rt/src/chthreads.c **** 
 794:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 795:../../../os/rt/src/chthreads.c **** 
 796:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1532               		.loc 1 796 0
 1533 000c 1D92      		st X+,__zero_reg__
 1534 000e 1C92      		st X,__zero_reg__
 797:../../../os/rt/src/chthreads.c ****     tp->u.rdymsg = msg;
 1535               		.loc 1 797 0
 1536 0010 718B      		std Z+17,r23
 1537 0012 608B      		std Z+16,r22
 798:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(tp);
 1538               		.loc 1 798 0
 1539 0014 CF01      		movw r24,r30
 1540               	.LVL102:
 1541 0016 0C94 0000 		jmp chSchReadyI
 1542               	.LVL103:
 1543               	.L45:
 1544 001a 0895      		ret
 1545               	.LBE386:
 1546               		.cfi_endproc
 1547               	.LFE168:
 1549               		.section	.text.chThdResumeS,"ax",@progbits
 1550               	.global	chThdResumeS
 1552               	chThdResumeS:
 1553               	.LFB169:
 799:../../../os/rt/src/chthreads.c ****   }
 800:../../../os/rt/src/chthreads.c **** }
 801:../../../os/rt/src/chthreads.c **** 
 802:../../../os/rt/src/chthreads.c **** /**
 803:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 804:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 805:../../../os/rt/src/chthreads.c ****  *          context.
 806:../../../os/rt/src/chthreads.c ****  *
 807:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 808:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 809:../../../os/rt/src/chthreads.c ****  *
 810:../../../os/rt/src/chthreads.c ****  * @iclass
 811:../../../os/rt/src/chthreads.c ****  */
 812:../../../os/rt/src/chthreads.c **** void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 1554               		.loc 1 812 0
 1555               		.cfi_startproc
 1556               	.LVL104:
 1557               	/* prologue: function */
 1558               	/* frame size = 0 */
 1559               	/* stack size = 0 */
 1560               	.L__stack_usage = 0
 813:../../../os/rt/src/chthreads.c **** 
 814:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1561               		.loc 1 814 0
 1562 0000 FC01      		movw r30,r24
 1563 0002 2081      		ld r18,Z
 1564 0004 3181      		ldd r19,Z+1
 1565 0006 2115      		cp r18,__zero_reg__
 1566 0008 3105      		cpc r19,__zero_reg__
 1567 000a 01F0      		breq .L47
 1568               	.LVL105:
 1569               	.LBB387:
 815:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 816:../../../os/rt/src/chthreads.c **** 
 817:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 818:../../../os/rt/src/chthreads.c **** 
 819:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1570               		.loc 1 819 0
 1571 000c 1182      		std Z+1,__zero_reg__
 1572 000e 1082      		st Z,__zero_reg__
 820:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1573               		.loc 1 820 0
 1574 0010 C901      		movw r24,r18
 1575               	.LVL106:
 1576 0012 0C94 0000 		jmp chSchWakeupS
 1577               	.LVL107:
 1578               	.L47:
 1579 0016 0895      		ret
 1580               	.LBE387:
 1581               		.cfi_endproc
 1582               	.LFE169:
 1584               		.section	.text.chThdResume,"ax",@progbits
 1585               	.global	chThdResume
 1587               	chThdResume:
 1588               	.LFB170:
 821:../../../os/rt/src/chthreads.c ****   }
 822:../../../os/rt/src/chthreads.c **** }
 823:../../../os/rt/src/chthreads.c **** 
 824:../../../os/rt/src/chthreads.c **** /**
 825:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 826:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 827:../../../os/rt/src/chthreads.c ****  *          context.
 828:../../../os/rt/src/chthreads.c ****  *
 829:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 830:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 831:../../../os/rt/src/chthreads.c ****  *
 832:../../../os/rt/src/chthreads.c ****  * @api
 833:../../../os/rt/src/chthreads.c ****  */
 834:../../../os/rt/src/chthreads.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 1589               		.loc 1 834 0
 1590               		.cfi_startproc
 1591               	.LVL108:
 1592               	/* prologue: function */
 1593               	/* frame size = 0 */
 1594               	/* stack size = 0 */
 1595               	.L__stack_usage = 0
 1596 0000 FC01      		movw r30,r24
 1597               	.LBB388:
 1598               	.LBB389:
 1599               	.LBB390:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1600               		.loc 3 437 0
 1601               	/* #APP */
 1602               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1603 0002 F894      		cli
 1604               	 ;  0 "" 2
 1605               	.LVL109:
 1606               	/* #NOAPP */
 1607               	.LBE390:
 1608               	.LBE389:
 1609               	.LBE388:
 1610               	.LBB391:
 1611               	.LBB392:
 814:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 1612               		.loc 1 814 0
 1613 0004 8081      		ld r24,Z
 1614 0006 9181      		ldd r25,Z+1
 1615               	.LVL110:
 1616 0008 0097      		sbiw r24,0
 1617 000a 01F0      		breq .L50
 1618               	.LVL111:
 1619               	.LBB393:
 819:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1620               		.loc 1 819 0
 1621 000c 1182      		std Z+1,__zero_reg__
 1622 000e 1082      		st Z,__zero_reg__
 820:../../../os/rt/src/chthreads.c ****   }
 1623               		.loc 1 820 0
 1624 0010 0E94 0000 		call chSchWakeupS
 1625               	.LVL112:
 1626               	.L50:
 1627               	.LBE393:
 1628               	.LBE392:
 1629               	.LBE391:
 1630               	.LBB394:
 1631               	.LBB395:
 1632               	.LBB396:
 1633               	.LBB397:
 1634               		.loc 3 447 0
 1635               	/* #APP */
 1636               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1637 0014 7894      		sei
 1638               	 ;  0 "" 2
 1639               	/* #NOAPP */
 1640 0016 0895      		ret
 1641               	.LBE397:
 1642               	.LBE396:
 1643               	.LBE395:
 1644               	.LBE394:
 1645               		.cfi_endproc
 1646               	.LFE170:
 1648               		.section	.text.chThdEnqueueTimeoutS,"ax",@progbits
 1649               	.global	chThdEnqueueTimeoutS
 1651               	chThdEnqueueTimeoutS:
 1652               	.LFB171:
 835:../../../os/rt/src/chthreads.c **** 
 836:../../../os/rt/src/chthreads.c ****   chSysLock();
 837:../../../os/rt/src/chthreads.c ****   chThdResumeS(trp, msg);
 838:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 839:../../../os/rt/src/chthreads.c **** }
 840:../../../os/rt/src/chthreads.c **** 
 841:../../../os/rt/src/chthreads.c **** /**
 842:../../../os/rt/src/chthreads.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 843:../../../os/rt/src/chthreads.c ****  * @details The caller thread is enqueued and put to sleep until it is
 844:../../../os/rt/src/chthreads.c ****  *          dequeued or the specified timeouts expires.
 845:../../../os/rt/src/chthreads.c ****  *
 846:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 847:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 848:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 849:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 850:../../../os/rt/src/chthreads.c ****  *                        state.
 851:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 852:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 853:../../../os/rt/src/chthreads.c ****  *                        occurred.
 854:../../../os/rt/src/chthreads.c ****  *                      .
 855:../../../os/rt/src/chthreads.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 856:../../../os/rt/src/chthreads.c ****  *                      @p osalQueueWakeupAllI() functions.
 857:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 858:../../../os/rt/src/chthreads.c ****  *                      specified timeout or if the function has been
 859:../../../os/rt/src/chthreads.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 860:../../../os/rt/src/chthreads.c ****  *                      specification.
 861:../../../os/rt/src/chthreads.c ****  *
 862:../../../os/rt/src/chthreads.c ****  * @sclass
 863:../../../os/rt/src/chthreads.c ****  */
 864:../../../os/rt/src/chthreads.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 1653               		.loc 1 864 0
 1654               		.cfi_startproc
 1655               	.LVL113:
 1656 0000 CF93      		push r28
 1657               	.LCFI25:
 1658               		.cfi_def_cfa_offset 3
 1659               		.cfi_offset 28, -2
 1660 0002 DF93      		push r29
 1661               	.LCFI26:
 1662               		.cfi_def_cfa_offset 4
 1663               		.cfi_offset 29, -3
 1664               	/* prologue: function */
 1665               	/* frame size = 0 */
 1666               	/* stack size = 2 */
 1667               	.L__stack_usage = 2
 865:../../../os/rt/src/chthreads.c **** 
 866:../../../os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 1668               		.loc 1 866 0
 1669 0004 6115      		cp r22,__zero_reg__
 1670 0006 7105      		cpc r23,__zero_reg__
 1671 0008 01F0      		breq .L55
 867:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 868:../../../os/rt/src/chthreads.c ****   }
 869:../../../os/rt/src/chthreads.c **** 
 870:../../../os/rt/src/chthreads.c ****   queue_insert(currp, tqp);
 1672               		.loc 1 870 0
 1673 000a E091 0000 		lds r30,ch+11
 1674 000e F091 0000 		lds r31,ch+11+1
 1675               	.LVL114:
 1676               	.LBB398:
 1677               	.LBB399:
 600:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 1678               		.loc 2 600 0
 1679 0012 9183      		std Z+1,r25
 1680 0014 8083      		st Z,r24
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 1681               		.loc 2 601 0
 1682 0016 EC01      		movw r28,r24
 1683 0018 AA81      		ldd r26,Y+2
 1684 001a BB81      		ldd r27,Y+3
 1685 001c B383      		std Z+3,r27
 1686 001e A283      		std Z+2,r26
 602:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 1687               		.loc 2 602 0
 1688 0020 ED93      		st X+,r30
 1689 0022 FC93      		st X,r31
 603:../../../os/rt/include/chschd.h **** }
 1690               		.loc 2 603 0
 1691 0024 FB83      		std Y+3,r31
 1692 0026 EA83      		std Y+2,r30
 1693               	.LVL115:
 1694               	.LBE399:
 1695               	.LBE398:
 871:../../../os/rt/src/chthreads.c **** 
 872:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 1696               		.loc 1 872 0
 1697 0028 84E0      		ldi r24,lo8(4)
 1698               	.LVL116:
 1699               	/* epilogue start */
 873:../../../os/rt/src/chthreads.c **** }
 1700               		.loc 1 873 0
 1701 002a DF91      		pop r29
 1702 002c CF91      		pop r28
 1703               	.LVL117:
 872:../../../os/rt/src/chthreads.c **** }
 1704               		.loc 1 872 0
 1705 002e 0C94 0000 		jmp chSchGoSleepTimeoutS
 1706               	.LVL118:
 1707               	.L55:
 1708               		.loc 1 873 0
 1709 0032 8FEF      		ldi r24,lo8(-1)
 1710 0034 9FEF      		ldi r25,lo8(-1)
 1711               	.LVL119:
 1712               	/* epilogue start */
 1713 0036 DF91      		pop r29
 1714 0038 CF91      		pop r28
 1715 003a 0895      		ret
 1716               		.cfi_endproc
 1717               	.LFE171:
 1719               		.section	.text.chThdDequeueNextI,"ax",@progbits
 1720               	.global	chThdDequeueNextI
 1722               	chThdDequeueNextI:
 1723               	.LFB172:
 874:../../../os/rt/src/chthreads.c **** 
 875:../../../os/rt/src/chthreads.c **** /**
 876:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
 877:../../../os/rt/src/chthreads.c ****  *          if any.
 878:../../../os/rt/src/chthreads.c ****  *
 879:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 880:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 881:../../../os/rt/src/chthreads.c ****  *
 882:../../../os/rt/src/chthreads.c ****  * @iclass
 883:../../../os/rt/src/chthreads.c ****  */
 884:../../../os/rt/src/chthreads.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 1724               		.loc 1 884 0
 1725               		.cfi_startproc
 1726               	.LVL120:
 1727 0000 CF93      		push r28
 1728               	.LCFI27:
 1729               		.cfi_def_cfa_offset 3
 1730               		.cfi_offset 28, -2
 1731 0002 DF93      		push r29
 1732               	.LCFI28:
 1733               		.cfi_def_cfa_offset 4
 1734               		.cfi_offset 29, -3
 1735               	/* prologue: function */
 1736               	/* frame size = 0 */
 1737               	/* stack size = 2 */
 1738               	.L__stack_usage = 2
 1739 0004 FC01      		movw r30,r24
 1740               	.LVL121:
 1741               	.LBB400:
 1742               	.LBB401:
 566:../../../os/rt/include/chschd.h **** }
 1743               		.loc 2 566 0
 1744 0006 8081      		ld r24,Z
 1745 0008 9181      		ldd r25,Z+1
 1746               	.LVL122:
 1747               	.LBE401:
 1748               	.LBE400:
 885:../../../os/rt/src/chthreads.c **** 
 886:../../../os/rt/src/chthreads.c ****   if (queue_notempty(tqp)) {
 1749               		.loc 1 886 0
 1750 000a E817      		cp r30,r24
 1751 000c F907      		cpc r31,r25
 1752 000e 01F0      		breq .L56
 1753               	.LVL123:
 1754               	.LBB402:
 1755               	.LBB403:
 1756               	.LBB404:
 1757               	.LBB405:
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1758               		.loc 2 609 0
 1759 0010 EC01      		movw r28,r24
 1760 0012 A881      		ld r26,Y
 1761 0014 B981      		ldd r27,Y+1
 1762 0016 B183      		std Z+1,r27
 1763 0018 A083      		st Z,r26
 610:../../../os/rt/include/chschd.h **** 
 1764               		.loc 2 610 0
 1765 001a 1396      		adiw r26,2+1
 1766 001c FC93      		st X,r31
 1767 001e EE93      		st -X,r30
 1768 0020 1297      		sbiw r26,2
 1769               	.LVL124:
 1770               	.LBE405:
 1771               	.LBE404:
 383:../../../os/rt/include/chthreads.h **** }
 384:../../../os/rt/include/chthreads.h **** 
 385:../../../os/rt/include/chthreads.h **** /**
 386:../../../os/rt/include/chthreads.h ****  * @brief   Initializes a threads queue object.
 387:../../../os/rt/include/chthreads.h ****  *
 388:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 389:../../../os/rt/include/chthreads.h ****  *
 390:../../../os/rt/include/chthreads.h ****  * @init
 391:../../../os/rt/include/chthreads.h ****  */
 392:../../../os/rt/include/chthreads.h **** static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 393:../../../os/rt/include/chthreads.h **** 
 394:../../../os/rt/include/chthreads.h ****   queue_init(tqp);
 395:../../../os/rt/include/chthreads.h **** }
 396:../../../os/rt/include/chthreads.h **** 
 397:../../../os/rt/include/chthreads.h **** /**
 398:../../../os/rt/include/chthreads.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 399:../../../os/rt/include/chthreads.h ****  *
 400:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 401:../../../os/rt/include/chthreads.h ****  * @return              The queue status.
 402:../../../os/rt/include/chthreads.h ****  * @retval false        if the queue is not empty.
 403:../../../os/rt/include/chthreads.h ****  * @retval true         if the queue is empty.
 404:../../../os/rt/include/chthreads.h ****  *
 405:../../../os/rt/include/chthreads.h ****  * @iclass
 406:../../../os/rt/include/chthreads.h ****  */
 407:../../../os/rt/include/chthreads.h **** static inline bool chThdQueueIsEmptyI(threads_queue_t *tqp) {
 408:../../../os/rt/include/chthreads.h **** 
 409:../../../os/rt/include/chthreads.h ****   chDbgCheckClassI();
 410:../../../os/rt/include/chthreads.h **** 
 411:../../../os/rt/include/chthreads.h ****   return queue_isempty(tqp);
 412:../../../os/rt/include/chthreads.h **** }
 413:../../../os/rt/include/chthreads.h **** 
 414:../../../os/rt/include/chthreads.h **** /**
 415:../../../os/rt/include/chthreads.h ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
 416:../../../os/rt/include/chthreads.h ****  * @details Dequeues one thread from the queue without checking if the queue
 417:../../../os/rt/include/chthreads.h ****  *          is empty.
 418:../../../os/rt/include/chthreads.h ****  * @pre     The queue must contain at least an object.
 419:../../../os/rt/include/chthreads.h ****  *
 420:../../../os/rt/include/chthreads.h ****  * @param[in] tqp       pointer to the threads queue object
 421:../../../os/rt/include/chthreads.h ****  * @param[in] msg       the message code
 422:../../../os/rt/include/chthreads.h ****  *
 423:../../../os/rt/include/chthreads.h ****  * @iclass
 424:../../../os/rt/include/chthreads.h ****  */
 425:../../../os/rt/include/chthreads.h **** static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 426:../../../os/rt/include/chthreads.h ****   thread_t *tp;
 427:../../../os/rt/include/chthreads.h **** 
 428:../../../os/rt/include/chthreads.h ****   chDbgAssert(queue_notempty(tqp), "empty queue");
 429:../../../os/rt/include/chthreads.h **** 
 430:../../../os/rt/include/chthreads.h ****   tp = queue_fifo_remove(tqp);
 431:../../../os/rt/include/chthreads.h **** 
 432:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 433:../../../os/rt/include/chthreads.h **** 
 434:../../../os/rt/include/chthreads.h ****   tp->u.rdymsg = msg;
 1772               		.loc 4 434 0
 1773 0022 798B      		std Y+17,r23
 1774 0024 688B      		std Y+16,r22
 1775               	/* epilogue start */
 1776               	.LBE403:
 1777               	.LBE402:
 887:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 888:../../../os/rt/src/chthreads.c ****   }
 889:../../../os/rt/src/chthreads.c **** }
 1778               		.loc 1 889 0
 1779 0026 DF91      		pop r29
 1780 0028 CF91      		pop r28
 1781               	.LBB407:
 1782               	.LBB406:
 435:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1783               		.loc 4 435 0
 1784 002a 0C94 0000 		jmp chSchReadyI
 1785               	.LVL125:
 1786               	.L56:
 1787               	/* epilogue start */
 1788               	.LBE406:
 1789               	.LBE407:
 1790               		.loc 1 889 0
 1791 002e DF91      		pop r29
 1792 0030 CF91      		pop r28
 1793 0032 0895      		ret
 1794               		.cfi_endproc
 1795               	.LFE172:
 1797               		.section	.text.chThdDequeueAllI,"ax",@progbits
 1798               	.global	chThdDequeueAllI
 1800               	chThdDequeueAllI:
 1801               	.LFB173:
 890:../../../os/rt/src/chthreads.c **** 
 891:../../../os/rt/src/chthreads.c **** /**
 892:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
 893:../../../os/rt/src/chthreads.c ****  *
 894:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 895:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 896:../../../os/rt/src/chthreads.c ****  *
 897:../../../os/rt/src/chthreads.c ****  * @iclass
 898:../../../os/rt/src/chthreads.c ****  */
 899:../../../os/rt/src/chthreads.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 1802               		.loc 1 899 0
 1803               		.cfi_startproc
 1804               	.LVL126:
 1805 0000 0F93      		push r16
 1806               	.LCFI29:
 1807               		.cfi_def_cfa_offset 3
 1808               		.cfi_offset 16, -2
 1809 0002 1F93      		push r17
 1810               	.LCFI30:
 1811               		.cfi_def_cfa_offset 4
 1812               		.cfi_offset 17, -3
 1813 0004 CF93      		push r28
 1814               	.LCFI31:
 1815               		.cfi_def_cfa_offset 5
 1816               		.cfi_offset 28, -4
 1817 0006 DF93      		push r29
 1818               	.LCFI32:
 1819               		.cfi_def_cfa_offset 6
 1820               		.cfi_offset 29, -5
 1821               	/* prologue: function */
 1822               	/* frame size = 0 */
 1823               	/* stack size = 4 */
 1824               	.L__stack_usage = 4
 1825 0008 EC01      		movw r28,r24
 1826 000a 8B01      		movw r16,r22
 1827               	.LVL127:
 1828               	.LBB408:
 1829               	.LBB409:
 566:../../../os/rt/include/chschd.h **** }
 1830               		.loc 2 566 0
 1831 000c 8881      		ld r24,Y
 1832 000e 9981      		ldd r25,Y+1
 1833               	.LVL128:
 1834               	.LBE409:
 1835               	.LBE408:
 900:../../../os/rt/src/chthreads.c **** 
 901:../../../os/rt/src/chthreads.c ****   while (queue_notempty(tqp)) {
 1836               		.loc 1 901 0
 1837 0010 C817      		cp r28,r24
 1838 0012 D907      		cpc r29,r25
 1839 0014 01F0      		breq .L58
 1840               	.LVL129:
 1841               	.L62:
 1842               	.LBB411:
 1843               	.LBB412:
 1844               	.LBB413:
 1845               	.LBB414:
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1846               		.loc 2 609 0
 1847 0016 DC01      		movw r26,r24
 1848 0018 ED91      		ld r30,X+
 1849 001a FC91      		ld r31,X
 1850 001c 1197      		sbiw r26,1
 1851 001e F983      		std Y+1,r31
 1852 0020 E883      		st Y,r30
 610:../../../os/rt/include/chschd.h **** 
 1853               		.loc 2 610 0
 1854 0022 D383      		std Z+3,r29
 1855 0024 C283      		std Z+2,r28
 1856               	.LVL130:
 1857               	.LBE414:
 1858               	.LBE413:
 434:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1859               		.loc 4 434 0
 1860 0026 5196      		adiw r26,16+1
 1861 0028 1C93      		st X,r17
 1862 002a 0E93      		st -X,r16
 1863 002c 5097      		sbiw r26,16
 1864               		.loc 4 435 0
 1865 002e 0E94 0000 		call chSchReadyI
 1866               	.LVL131:
 1867               	.LBE412:
 1868               	.LBE411:
 1869               	.LBB415:
 1870               	.LBB410:
 566:../../../os/rt/include/chschd.h **** }
 1871               		.loc 2 566 0
 1872 0032 8881      		ld r24,Y
 1873 0034 9981      		ldd r25,Y+1
 1874               	.LVL132:
 1875               	.LBE410:
 1876               	.LBE415:
 1877               		.loc 1 901 0
 1878 0036 C817      		cp r28,r24
 1879 0038 D907      		cpc r29,r25
 1880 003a 01F4      		brne .L62
 1881               	.LVL133:
 1882               	.L58:
 1883               	/* epilogue start */
 902:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 903:../../../os/rt/src/chthreads.c ****   }
 904:../../../os/rt/src/chthreads.c **** }
 1884               		.loc 1 904 0
 1885 003c DF91      		pop r29
 1886 003e CF91      		pop r28
 1887               	.LVL134:
 1888 0040 1F91      		pop r17
 1889 0042 0F91      		pop r16
 1890               	.LVL135:
 1891 0044 0895      		ret
 1892               		.cfi_endproc
 1893               	.LFE173:
 1895               		.text
 1896               	.Letext0:
 1897               		.file 7 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1898               		.file 8 "/usr/lib/avr/include/stdint.h"
 1899               		.file 9 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1900               		.file 10 "../../../os/rt/include/chsystypes.h"
 1901               		.file 11 "../../../os/rt/include/chsem.h"
 1902               		.file 12 "../../../os/rt/include/chmtx.h"
 1903               		.file 13 "../../../os/common/ports/AVR/chcore_timer.h"
 1904               		.file 14 "../../../os/rt/include/chsys.h"
 1905               		.file 15 "../../../os/rt/include/chvt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chthreads.c
     /tmp/ccf6pFng.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccf6pFng.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccf6pFng.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccf6pFng.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccf6pFng.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccf6pFng.s:13     .text._thread_init:0000000000000000 _thread_init
     /tmp/ccf6pFng.s:110    .text.chThdCreateSuspendedI:0000000000000000 chThdCreateSuspendedI
     /tmp/ccf6pFng.s:259    .text.chThdCreateSuspended:0000000000000000 chThdCreateSuspended
     /tmp/ccf6pFng.s:306    .text.chThdCreateI:0000000000000000 chThdCreateI
     /tmp/ccf6pFng.s:326    .text.chThdCreate:0000000000000000 chThdCreate
     /tmp/ccf6pFng.s:395    .text.chThdCreateStatic:0000000000000000 chThdCreateStatic
     /tmp/ccf6pFng.s:559    .text.chThdStart:0000000000000000 chThdStart
     /tmp/ccf6pFng.s:621    .text.chThdAddRef:0000000000000000 chThdAddRef
     /tmp/ccf6pFng.s:669    .text.chThdRelease:0000000000000000 chThdRelease
     /tmp/ccf6pFng.s:761    .text.chThdExitS:0000000000000000 chThdExitS
     /tmp/ccf6pFng.s:876    .text.chThdExit:0000000000000000 chThdExit
     /tmp/ccf6pFng.s:906    .text.chThdWait:0000000000000000 chThdWait
     /tmp/ccf6pFng.s:1009   .text.chThdSetPriority:0000000000000000 chThdSetPriority
     /tmp/ccf6pFng.s:1081   .text.chThdTerminate:0000000000000000 chThdTerminate
     /tmp/ccf6pFng.s:1128   .text.chThdSleep:0000000000000000 chThdSleep
     /tmp/ccf6pFng.s:1182   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
     /tmp/ccf6pFng.s:1260   .text.chThdSleepUntilWindowed:0000000000000000 chThdSleepUntilWindowed
     /tmp/ccf6pFng.s:1352   .text.chThdYield:0000000000000000 chThdYield
     /tmp/ccf6pFng.s:1416   .text.chThdSuspendS:0000000000000000 chThdSuspendS
     /tmp/ccf6pFng.s:1470   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
     /tmp/ccf6pFng.s:1514   .text.chThdResumeI:0000000000000000 chThdResumeI
     /tmp/ccf6pFng.s:1552   .text.chThdResumeS:0000000000000000 chThdResumeS
     /tmp/ccf6pFng.s:1587   .text.chThdResume:0000000000000000 chThdResume
     /tmp/ccf6pFng.s:1651   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
     /tmp/ccf6pFng.s:1722   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
     /tmp/ccf6pFng.s:1800   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
ch
_port_thread_start
chSchReadyI
chSchWakeupS
chSchGoSleepS
chSchRescheduleS
chSchGoSleepTimeoutS
chSchDoRescheduleBehind
__do_copy_data
