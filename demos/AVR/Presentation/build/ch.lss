
build/ch.elf:     formato de ficheiro elf32-avr

Secções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000026e4  00002778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  00800172  00800172  000027ea  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000027ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000760  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013d0a  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004662  00000000  00000000  00016ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000587a  00000000  00000000  0001b308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000149c  00000000  00000000  00020b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e75  00000000  00000000  00022020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007657  00000000  00000000  00023e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0002b4ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da secção .text:

00000000 <__vectors>:
       0:	ae c0       	rjmp	.+348    	; 0x15e <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_11>
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
      36:	00 00       	nop
      38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_18>
      4c:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_19>
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_21>
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	d2 0d       	add	r29, r2
      6a:	31 0c       	add	r3, r1
      6c:	31 0c       	add	r3, r1
      6e:	31 0c       	add	r3, r1
      70:	31 0c       	add	r3, r1
      72:	d2 0d       	add	r29, r2
      74:	31 0c       	add	r3, r1
      76:	31 0c       	add	r3, r1
      78:	31 0c       	add	r3, r1
      7a:	31 0c       	add	r3, r1
      7c:	31 0c       	add	r3, r1
      7e:	91 0d       	add	r25, r1
      80:	31 0c       	add	r3, r1
      82:	31 0c       	add	r3, r1
      84:	31 0c       	add	r3, r1
      86:	31 0c       	add	r3, r1
      88:	31 0c       	add	r3, r1
      8a:	2e 0d       	add	r18, r14
      8c:	31 0c       	add	r3, r1
      8e:	31 0c       	add	r3, r1
      90:	cd 0d       	add	r28, r13
      92:	31 0c       	add	r3, r1
      94:	31 0c       	add	r3, r1
      96:	31 0c       	add	r3, r1
      98:	31 0c       	add	r3, r1
      9a:	31 0c       	add	r3, r1
      9c:	31 0c       	add	r3, r1
      9e:	31 0c       	add	r3, r1
      a0:	31 0c       	add	r3, r1
      a2:	31 0c       	add	r3, r1
      a4:	31 0c       	add	r3, r1
      a6:	1b 0d       	add	r17, r11
      a8:	d2 0d       	add	r29, r2
      aa:	31 0c       	add	r3, r1
      ac:	31 0c       	add	r3, r1
      ae:	31 0c       	add	r3, r1
      b0:	31 0c       	add	r3, r1
      b2:	d2 0d       	add	r29, r2
      b4:	31 0c       	add	r3, r1
      b6:	31 0c       	add	r3, r1
      b8:	31 0c       	add	r3, r1
      ba:	31 0c       	add	r3, r1
      bc:	31 0c       	add	r3, r1
      be:	91 0d       	add	r25, r1
      c0:	31 0c       	add	r3, r1
      c2:	31 0c       	add	r3, r1
      c4:	31 0c       	add	r3, r1
      c6:	e5 0c       	add	r14, r5
      c8:	31 0c       	add	r3, r1
      ca:	2e 0d       	add	r18, r14
      cc:	31 0c       	add	r3, r1
      ce:	31 0c       	add	r3, r1
      d0:	cd 0d       	add	r28, r13
      d2:	2e 0e       	add	r2, r30
      d4:	b1 0c       	add	r11, r1
      d6:	b1 0c       	add	r11, r1
      d8:	b1 0c       	add	r11, r1
      da:	b1 0c       	add	r11, r1
      dc:	2e 0e       	add	r2, r30
      de:	b1 0c       	add	r11, r1
      e0:	b1 0c       	add	r11, r1
      e2:	b1 0c       	add	r11, r1
      e4:	b1 0c       	add	r11, r1
      e6:	b1 0c       	add	r11, r1
      e8:	90 0d       	add	r25, r0
      ea:	b1 0c       	add	r11, r1
      ec:	b1 0c       	add	r11, r1
      ee:	b1 0c       	add	r11, r1
      f0:	b1 0c       	add	r11, r1
      f2:	b1 0c       	add	r11, r1
      f4:	2d 0d       	add	r18, r13
      f6:	b1 0c       	add	r11, r1
      f8:	b1 0c       	add	r11, r1
      fa:	4a 0e       	add	r4, r26
      fc:	b1 0c       	add	r11, r1
      fe:	b1 0c       	add	r11, r1
     100:	b1 0c       	add	r11, r1
     102:	b1 0c       	add	r11, r1
     104:	b1 0c       	add	r11, r1
     106:	b1 0c       	add	r11, r1
     108:	b1 0c       	add	r11, r1
     10a:	b1 0c       	add	r11, r1
     10c:	b1 0c       	add	r11, r1
     10e:	b1 0c       	add	r11, r1
     110:	1b 0d       	add	r17, r11
     112:	2e 0e       	add	r2, r30
     114:	b1 0c       	add	r11, r1
     116:	b1 0c       	add	r11, r1
     118:	b1 0c       	add	r11, r1
     11a:	b1 0c       	add	r11, r1
     11c:	2e 0e       	add	r2, r30
     11e:	b1 0c       	add	r11, r1
     120:	b1 0c       	add	r11, r1
     122:	b1 0c       	add	r11, r1
     124:	b1 0c       	add	r11, r1
     126:	b1 0c       	add	r11, r1
     128:	90 0d       	add	r25, r0
     12a:	b1 0c       	add	r11, r1
     12c:	b1 0c       	add	r11, r1
     12e:	b1 0c       	add	r11, r1
     130:	e5 0c       	add	r14, r5
     132:	b1 0c       	add	r11, r1
     134:	2d 0d       	add	r18, r13
     136:	b1 0c       	add	r11, r1
     138:	b1 0c       	add	r11, r1
     13a:	4a 0e       	add	r4, r26

0000013c <__trampolines_end>:
     13c:	45 46       	sbci	r20, 0x65	; 101
     13e:	47 65       	ori	r20, 0x57	; 87
     140:	66 67       	ori	r22, 0x76	; 118
	...

00000143 <__c.2314>:
     143:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000153 <__c.2449>:
     153:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e4 ee       	ldi	r30, 0xE4	; 228
     172:	f6 e2       	ldi	r31, 0x26	; 38
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x10>
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	a2 37       	cpi	r26, 0x72	; 114
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0xc>

00000180 <__do_clear_bss>:
     180:	23 e0       	ldi	r18, 0x03	; 3
     182:	a2 e7       	ldi	r26, 0x72	; 114
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a1 38       	cpi	r26, 0x81	; 129
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <main>
     194:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     19a:	ff cf       	rjmp	.-2      	; 0x19a <_idle_thread>

0000019c <chSysInit>:
     19c:	e7 d1       	rcall	.+974    	; 0x56c <_scheduler_init>
     19e:	88 d0       	rcall	.+272    	; 0x2b0 <_vt_init>
     1a0:	92 d4       	rcall	.+2340   	; 0xac6 <_core_init>
     1a2:	c9 d4       	rcall	.+2450   	; 0xb36 <_heap_init>
     1a4:	40 e8       	ldi	r20, 0x80	; 128
     1a6:	6d e1       	ldi	r22, 0x1D	; 29
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	93 e0       	ldi	r25, 0x03	; 3
     1ae:	f5 d2       	rcall	.+1514   	; 0x79a <_thread_init>
     1b0:	fc 01       	movw	r30, r24
     1b2:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <ch+0xc>
     1b6:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <ch+0xb>
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	95 87       	std	Z+13, r25	; 0x0d
     1be:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__avr_in_isr>
     1c2:	78 94       	sei
     1c4:	8b e0       	ldi	r24, 0x0B	; 11
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	6b c3       	rjmp	.+1750   	; 0x8a0 <chThdCreate>

000001ca <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
     1da:	c0 91 f7 02 	lds	r28, 0x02F7	; 0x8002f7 <ch+0xd>
     1de:	d0 91 f8 02 	lds	r29, 0x02F8	; 0x8002f8 <ch+0xe>
     1e2:	2c 81       	ldd	r18, Y+4	; 0x04
     1e4:	3d 81       	ldd	r19, Y+5	; 0x05
     1e6:	87 ef       	ldi	r24, 0xF7	; 247
     1e8:	e8 2e       	mov	r14, r24
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	f8 2e       	mov	r15, r24
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     1ee:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1f2:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
     1f6:	40 91 fd 02 	lds	r20, 0x02FD	; 0x8002fd <ch+0x13>
     1fa:	50 91 fe 02 	lds	r21, 0x02FE	; 0x8002fe <ch+0x14>
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
     1fe:	8b 01       	movw	r16, r22
     200:	04 1b       	sub	r16, r20
     202:	15 0b       	sbc	r17, r21

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
     204:	02 17       	cp	r16, r18
     206:	13 07       	cpc	r17, r19
     208:	90 f4       	brcc	.+36     	; 0x22e <chSysTimerHandlerI+0x64>
     20a:	2a c0       	rjmp	.+84     	; 0x260 <chSysTimerHandlerI+0x96>
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
     20c:	88 85       	ldd	r24, Y+8	; 0x08
     20e:	99 85       	ldd	r25, Y+9	; 0x09
     210:	f6 01       	movw	r30, r12
     212:	09 95       	icall
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
     214:	c0 91 f7 02 	lds	r28, 0x02F7	; 0x8002f7 <ch+0xd>
     218:	d0 91 f8 02 	lds	r29, 0x02F8	; 0x8002f8 <ch+0xe>
    }
    while (vtp->delta <= nowdelta);
     21c:	2c 81       	ldd	r18, Y+4	; 0x04
     21e:	3d 81       	ldd	r19, Y+5	; 0x05
     220:	02 17       	cp	r16, r18
     222:	13 07       	cpc	r17, r19
     224:	20 f3       	brcs	.-56     	; 0x1ee <chSysTimerHandlerI+0x24>
     226:	40 91 fd 02 	lds	r20, 0x02FD	; 0x8002fd <ch+0x13>
     22a:	50 91 fe 02 	lds	r21, 0x02FE	; 0x8002fe <ch+0x14>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
     22e:	42 0f       	add	r20, r18
     230:	53 1f       	adc	r21, r19
     232:	50 93 fe 02 	sts	0x02FE, r21	; 0x8002fe <ch+0x14>
     236:	40 93 fd 02 	sts	0x02FD, r20	; 0x8002fd <ch+0x13>
      nowdelta -= vtp->delta;
     23a:	02 1b       	sub	r16, r18
     23c:	13 0b       	sbc	r17, r19

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     23e:	e8 81       	ld	r30, Y
     240:	f9 81       	ldd	r31, Y+1	; 0x01
     242:	f3 82       	std	Z+3, r15	; 0x03
     244:	e2 82       	std	Z+2, r14	; 0x02
      ch.vtlist.next = vtp->next;
     246:	f0 93 f8 02 	sts	0x02F8, r31	; 0x8002f8 <ch+0xe>
     24a:	e0 93 f7 02 	sts	0x02F7, r30	; 0x8002f7 <ch+0xd>
      fn = vtp->func;
     24e:	ce 80       	ldd	r12, Y+6	; 0x06
     250:	df 80       	ldd	r13, Y+7	; 0x07
      vtp->func = NULL;
     252:	1f 82       	std	Y+7, r1	; 0x07
     254:	1e 82       	std	Y+6, r1	; 0x06

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     256:	e7 5f       	subi	r30, 0xF7	; 247
     258:	f2 40       	sbci	r31, 0x02	; 2
     25a:	c1 f6       	brne	.-80     	; 0x20c <chSysTimerHandlerI+0x42>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     25c:	bf d4       	rcall	.+2430   	; 0xbdc <stStopAlarm>
     25e:	d6 cf       	rjmp	.-84     	; 0x20c <chSysTimerHandlerI+0x42>
    }
    while (vtp->delta <= nowdelta);
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     260:	f2 e0       	ldi	r31, 0x02	; 2
     262:	c7 3f       	cpi	r28, 0xF7	; 247
     264:	df 07       	cpc	r29, r31
     266:	d9 f0       	breq	.+54     	; 0x29e <chSysTimerHandlerI+0xd4>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
     268:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <ch+0x14>
     26c:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <ch+0x13>
  ch.vtlist.next->delta -= nowdelta;
     270:	8c 81       	ldd	r24, Y+4	; 0x04
     272:	9d 81       	ldd	r25, Y+5	; 0x05
     274:	80 1b       	sub	r24, r16
     276:	91 0b       	sbc	r25, r17
     278:	9d 83       	std	Y+5, r25	; 0x05
     27a:	8c 83       	std	Y+4, r24	; 0x04

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	91 05       	cpc	r25, r1
     280:	58 f0       	brcs	.+22     	; 0x298 <chSysTimerHandlerI+0xce>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     282:	86 0f       	add	r24, r22
     284:	97 1f       	adc	r25, r23
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	a5 c4       	rjmp	.+2378   	; 0xbe2 <stSetAlarm>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	f2 cf       	rjmp	.-28     	; 0x282 <chSysTimerHandlerI+0xb8>
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	08 95       	ret

000002b0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     2b0:	ea ee       	ldi	r30, 0xEA	; 234
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	87 ef       	ldi	r24, 0xF7	; 247
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	96 87       	std	Z+14, r25	; 0x0e
     2ba:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     2bc:	90 8b       	std	Z+16, r25	; 0x10
     2be:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	9f ef       	ldi	r25, 0xFF	; 255
     2c4:	92 8b       	std	Z+18, r25	; 0x12
     2c6:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
     2c8:	14 8a       	std	Z+20, r1	; 0x14
     2ca:	13 8a       	std	Z+19, r1	; 0x13
     2cc:	08 95       	ret

000002ce <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	7c 01       	movw	r14, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     2dc:	dc 01       	movw	r26, r24
     2de:	19 96       	adiw	r26, 0x09	; 9
     2e0:	3c 93       	st	X, r19
     2e2:	2e 93       	st	-X, r18
     2e4:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     2e6:	17 96       	adiw	r26, 0x07	; 7
     2e8:	5c 93       	st	X, r21
     2ea:	4e 93       	st	-X, r20
     2ec:	16 97       	sbiw	r26, 0x06	; 6
     2ee:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     2f2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     2f6:	62 30       	cpi	r22, 0x02	; 2
     2f8:	71 05       	cpc	r23, r1
     2fa:	08 f4       	brcc	.+2      	; 0x2fe <chVTDoSetI+0x30>
     2fc:	59 c0       	rjmp	.+178    	; 0x3b0 <chVTDoSetI+0xe2>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     2fe:	00 91 f7 02 	lds	r16, 0x02F7	; 0x8002f7 <ch+0xd>
     302:	10 91 f8 02 	lds	r17, 0x02F8	; 0x8002f8 <ch+0xe>
     306:	b2 e0       	ldi	r27, 0x02	; 2
     308:	07 3f       	cpi	r16, 0xF7	; 247
     30a:	1b 07       	cpc	r17, r27
     30c:	09 f4       	brne	.+2      	; 0x310 <chVTDoSetI+0x42>
     30e:	5a c0       	rjmp	.+180    	; 0x3c4 <chVTDoSetI+0xf6>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
     310:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <ch+0x13>
     314:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <ch+0x14>
     318:	28 1b       	sub	r18, r24
     31a:	39 0b       	sbc	r19, r25
     31c:	eb 01       	movw	r28, r22
     31e:	c2 0f       	add	r28, r18
     320:	d3 1f       	adc	r29, r19

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     322:	d8 01       	movw	r26, r16

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
     324:	c2 17       	cp	r28, r18
     326:	d3 07       	cpc	r29, r19
     328:	e0 f1       	brcs	.+120    	; 0x3a2 <chVTDoSetI+0xd4>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
     32a:	14 96       	adiw	r26, 0x04	; 4
     32c:	2d 91       	ld	r18, X+
     32e:	3c 91       	ld	r19, X
     330:	15 97       	sbiw	r26, 0x05	; 5
     332:	c2 17       	cp	r28, r18
     334:	d3 07       	cpc	r29, r19
     336:	48 f4       	brcc	.+18     	; 0x34a <chVTDoSetI+0x7c>
     338:	3e c0       	rjmp	.+124    	; 0x3b6 <chVTDoSetI+0xe8>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     33a:	c2 1b       	sub	r28, r18
     33c:	d3 0b       	sbc	r29, r19
    p = p->next;
     33e:	d8 01       	movw	r26, r16
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
     340:	0d 91       	ld	r16, X+
     342:	1c 91       	ld	r17, X
     344:	f8 01       	movw	r30, r16
     346:	24 81       	ldd	r18, Z+4	; 0x04
     348:	35 81       	ldd	r19, Z+5	; 0x05
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     34a:	2c 17       	cp	r18, r28
     34c:	3d 07       	cpc	r19, r29
     34e:	a8 f3       	brcs	.-22     	; 0x33a <chVTDoSetI+0x6c>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     350:	d7 01       	movw	r26, r14
     352:	0d 93       	st	X+, r16
     354:	1c 93       	st	X, r17
  vtp->prev = vtp->next->prev;
     356:	d8 01       	movw	r26, r16
     358:	12 96       	adiw	r26, 0x02	; 2
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	13 97       	sbiw	r26, 0x03	; 3
     360:	d7 01       	movw	r26, r14
     362:	13 96       	adiw	r26, 0x03	; 3
     364:	fc 93       	st	X, r31
     366:	ee 93       	st	-X, r30
     368:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     36a:	f1 82       	std	Z+1, r15	; 0x01
     36c:	e0 82       	st	Z, r14
  p->prev = vtp;
     36e:	f8 01       	movw	r30, r16
     370:	f3 82       	std	Z+3, r15	; 0x03
     372:	e2 82       	std	Z+2, r14	; 0x02
  vtp->delta = delta;
     374:	15 96       	adiw	r26, 0x05	; 5
     376:	dc 93       	st	X, r29
     378:	ce 93       	st	-X, r28
     37a:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     37c:	84 81       	ldd	r24, Z+4	; 0x04
     37e:	95 81       	ldd	r25, Z+5	; 0x05
     380:	8c 1b       	sub	r24, r28
     382:	9d 0b       	sbc	r25, r29
     384:	95 83       	std	Z+5, r25	; 0x05
     386:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	9f ef       	ldi	r25, 0xFF	; 255
     38c:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <ch+0x12>
     390:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <ch+0x11>
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	08 95       	ret

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     3a2:	14 96       	adiw	r26, 0x04	; 4
     3a4:	8d 91       	ld	r24, X+
     3a6:	9c 91       	ld	r25, X
     3a8:	15 97       	sbiw	r26, 0x05	; 5
     3aa:	c8 1b       	sub	r28, r24
     3ac:	d9 0b       	sbc	r29, r25
     3ae:	c8 cf       	rjmp	.-112    	; 0x340 <chVTDoSetI+0x72>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	a4 cf       	rjmp	.-184    	; 0x2fe <chVTDoSetI+0x30>
     3b6:	8c 0f       	add	r24, r28
     3b8:	9d 1f       	adc	r25, r29
     3ba:	13 d4       	rcall	.+2086   	; 0xbe2 <stSetAlarm>
     3bc:	f8 01       	movw	r30, r16
     3be:	24 81       	ldd	r18, Z+4	; 0x04
     3c0:	35 81       	ldd	r19, Z+5	; 0x05
     3c2:	c3 cf       	rjmp	.-122    	; 0x34a <chVTDoSetI+0x7c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
     3c4:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <ch+0x14>
     3c8:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <ch+0x13>
      ch.vtlist.next = vtp;
     3cc:	f0 92 f8 02 	sts	0x02F8, r15	; 0x8002f8 <ch+0xe>
     3d0:	e0 92 f7 02 	sts	0x02F7, r14	; 0x8002f7 <ch+0xd>
      ch.vtlist.prev = vtp;
     3d4:	f0 92 fa 02 	sts	0x02FA, r15	; 0x8002fa <ch+0x10>
     3d8:	e0 92 f9 02 	sts	0x02F9, r14	; 0x8002f9 <ch+0xf>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
     3dc:	f7 01       	movw	r30, r14
     3de:	11 83       	std	Z+1, r17	; 0x01
     3e0:	00 83       	st	Z, r16
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
     3e2:	13 83       	std	Z+3, r17	; 0x03
     3e4:	02 83       	std	Z+2, r16	; 0x02
      vtp->delta = delay;
     3e6:	75 83       	std	Z+5, r23	; 0x05
     3e8:	64 83       	std	Z+4, r22	; 0x04
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
     3ea:	cb 01       	movw	r24, r22
     3ec:	82 0f       	add	r24, r18
     3ee:	93 1f       	adc	r25, r19
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	e6 c3       	rjmp	.+1996   	; 0xbca <stStartAlarm>

000003fe <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	fc 01       	movw	r30, r24
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
     404:	a0 91 f7 02 	lds	r26, 0x02F7	; 0x8002f7 <ch+0xd>
     408:	b0 91 f8 02 	lds	r27, 0x02F8	; 0x8002f8 <ch+0xe>
     40c:	a8 17       	cp	r26, r24
     40e:	b9 07       	cpc	r27, r25
     410:	09 f1       	breq	.+66     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
     412:	c2 81       	ldd	r28, Z+2	; 0x02
     414:	d3 81       	ldd	r29, Z+3	; 0x03
     416:	80 81       	ld	r24, Z
     418:	91 81       	ldd	r25, Z+1	; 0x01
     41a:	99 83       	std	Y+1, r25	; 0x01
     41c:	88 83       	st	Y, r24
    vtp->next->prev = vtp->prev;
     41e:	a0 81       	ld	r26, Z
     420:	b1 81       	ldd	r27, Z+1	; 0x01
     422:	13 96       	adiw	r26, 0x03	; 3
     424:	dc 93       	st	X, r29
     426:	ce 93       	st	-X, r28
     428:	12 97       	sbiw	r26, 0x02	; 2
    vtp->func = NULL;
     42a:	17 82       	std	Z+7, r1	; 0x07
     42c:	16 82       	std	Z+6, r1	; 0x06

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	a7 3f       	cpi	r26, 0xF7	; 247
     432:	b8 07       	cpc	r27, r24
     434:	61 f0       	breq	.+24     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
      vtp->next->delta += vtp->delta;
     436:	14 96       	adiw	r26, 0x04	; 4
     438:	2d 91       	ld	r18, X+
     43a:	3c 91       	ld	r19, X
     43c:	15 97       	sbiw	r26, 0x05	; 5
     43e:	84 81       	ldd	r24, Z+4	; 0x04
     440:	95 81       	ldd	r25, Z+5	; 0x05
     442:	82 0f       	add	r24, r18
     444:	93 1f       	adc	r25, r19
     446:	15 96       	adiw	r26, 0x05	; 5
     448:	9c 93       	st	X, r25
     44a:	8e 93       	st	-X, r24
     44c:	14 97       	sbiw	r26, 0x04	; 4
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
     454:	ed 91       	ld	r30, X+
     456:	fc 91       	ld	r31, X
     458:	11 97       	sbiw	r26, 0x01	; 1
     45a:	f0 93 f8 02 	sts	0x02F8, r31	; 0x8002f8 <ch+0xe>
     45e:	e0 93 f7 02 	sts	0x02F7, r30	; 0x8002f7 <ch+0xd>
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
     462:	87 ef       	ldi	r24, 0xF7	; 247
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
  vtp->func = NULL;
     46a:	17 96       	adiw	r26, 0x07	; 7
     46c:	1c 92       	st	X, r1
     46e:	1e 92       	st	-X, r1
     470:	16 97       	sbiw	r26, 0x06	; 6

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     472:	e8 17       	cp	r30, r24
     474:	f9 07       	cpc	r31, r25
     476:	29 f1       	breq	.+74     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
     478:	24 81       	ldd	r18, Z+4	; 0x04
     47a:	35 81       	ldd	r19, Z+5	; 0x05
     47c:	14 96       	adiw	r26, 0x04	; 4
     47e:	8d 91       	ld	r24, X+
     480:	9c 91       	ld	r25, X
     482:	15 97       	sbiw	r26, 0x05	; 5
     484:	82 0f       	add	r24, r18
     486:	93 1f       	adc	r25, r19
     488:	95 83       	std	Z+5, r25	; 0x05
     48a:	84 83       	std	Z+4, r24	; 0x04
     48c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     490:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
     494:	40 91 fd 02 	lds	r20, 0x02FD	; 0x8002fd <ch+0x13>
     498:	50 91 fe 02 	lds	r21, 0x02FE	; 0x8002fe <ch+0x14>
     49c:	24 1b       	sub	r18, r20
     49e:	35 0b       	sbc	r19, r21

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
     4a0:	28 17       	cp	r18, r24
     4a2:	39 07       	cpc	r19, r25
     4a4:	a0 f6       	brcc	.-88     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     4a6:	bc 01       	movw	r22, r24
     4a8:	62 1b       	sub	r22, r18
     4aa:	73 0b       	sbc	r23, r19
     4ac:	62 30       	cpi	r22, 0x02	; 2
     4ae:	71 05       	cpc	r23, r1
     4b0:	28 f0       	brcs	.+10     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     4b2:	84 0f       	add	r24, r20
     4b4:	95 1f       	adc	r25, r21
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	93 c3       	rjmp	.+1830   	; 0xbe2 <stSetAlarm>
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     4bc:	c9 01       	movw	r24, r18
     4be:	02 96       	adiw	r24, 0x02	; 2
     4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     4c2:	df 91       	pop	r29
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     4c4:	cf 91       	pop	r28
     4c6:	8a c3       	rjmp	.+1812   	; 0xbdc <stStopAlarm>

000004c8 <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	dc 01       	movw	r26, r24
     4ce:	1d 96       	adiw	r26, 0x0d	; 13
     4d0:	8c 91       	ld	r24, X
     4d2:	1d 97       	sbiw	r26, 0x0d	; 13
     4d4:	84 30       	cpi	r24, 0x04	; 4
     4d6:	99 f1       	breq	.+102    	; 0x53e <wakeup+0x76>
     4d8:	70 f5       	brcc	.+92     	; 0x536 <wakeup+0x6e>
     4da:	88 23       	and	r24, r24
     4dc:	49 f1       	breq	.+82     	; 0x530 <wakeup+0x68>
     4de:	83 30       	cpi	r24, 0x03	; 3
     4e0:	31 f4       	brne	.+12     	; 0x4ee <wakeup+0x26>
     4e2:	50 96       	adiw	r26, 0x10	; 16
     4e4:	ed 91       	ld	r30, X+
     4e6:	fc 91       	ld	r31, X
     4e8:	51 97       	sbiw	r26, 0x11	; 17
     4ea:	11 82       	std	Z+1, r1	; 0x01
     4ec:	10 82       	st	Z, r1
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	9f ef       	ldi	r25, 0xFF	; 255
     4f2:	51 96       	adiw	r26, 0x11	; 17
     4f4:	9c 93       	st	X, r25
     4f6:	8e 93       	st	-X, r24
     4f8:	50 97       	sbiw	r26, 0x10	; 16
     4fa:	1d 96       	adiw	r26, 0x0d	; 13
     4fc:	1c 92       	st	X, r1
     4fe:	1d 97       	sbiw	r26, 0x0d	; 13
     500:	14 96       	adiw	r26, 0x04	; 4
     502:	2c 91       	ld	r18, X
     504:	14 97       	sbiw	r26, 0x04	; 4
     506:	ea ee       	ldi	r30, 0xEA	; 234
     508:	f2 e0       	ldi	r31, 0x02	; 2
     50a:	01 90       	ld	r0, Z+
     50c:	f0 81       	ld	r31, Z
     50e:	e0 2d       	mov	r30, r0
     510:	94 81       	ldd	r25, Z+4	; 0x04
     512:	92 17       	cp	r25, r18
     514:	d0 f7       	brcc	.-12     	; 0x50a <wakeup+0x42>
     516:	11 96       	adiw	r26, 0x01	; 1
     518:	fc 93       	st	X, r31
     51a:	ee 93       	st	-X, r30
     51c:	c2 81       	ldd	r28, Z+2	; 0x02
     51e:	d3 81       	ldd	r29, Z+3	; 0x03
     520:	13 96       	adiw	r26, 0x03	; 3
     522:	dc 93       	st	X, r29
     524:	ce 93       	st	-X, r28
     526:	12 97       	sbiw	r26, 0x02	; 2
     528:	b9 83       	std	Y+1, r27	; 0x01
     52a:	a8 83       	st	Y, r26
     52c:	b3 83       	std	Z+3, r27	; 0x03
     52e:	a2 83       	std	Z+2, r26	; 0x02
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret
     536:	85 30       	cpi	r24, 0x05	; 5
     538:	89 f0       	breq	.+34     	; 0x55c <wakeup+0x94>
     53a:	87 30       	cpi	r24, 0x07	; 7
     53c:	c1 f6       	brne	.-80     	; 0x4ee <wakeup+0x26>
     53e:	12 96       	adiw	r26, 0x02	; 2
     540:	ed 91       	ld	r30, X+
     542:	fc 91       	ld	r31, X
     544:	13 97       	sbiw	r26, 0x03	; 3
     546:	8d 91       	ld	r24, X+
     548:	9c 91       	ld	r25, X
     54a:	11 97       	sbiw	r26, 0x01	; 1
     54c:	91 83       	std	Z+1, r25	; 0x01
     54e:	80 83       	st	Z, r24
     550:	cd 91       	ld	r28, X+
     552:	dc 91       	ld	r29, X
     554:	11 97       	sbiw	r26, 0x01	; 1
     556:	fb 83       	std	Y+3, r31	; 0x03
     558:	ea 83       	std	Y+2, r30	; 0x02
     55a:	c9 cf       	rjmp	.-110    	; 0x4ee <wakeup+0x26>
     55c:	50 96       	adiw	r26, 0x10	; 16
     55e:	ed 91       	ld	r30, X+
     560:	fc 91       	ld	r31, X
     562:	51 97       	sbiw	r26, 0x11	; 17
     564:	84 81       	ldd	r24, Z+4	; 0x04
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	84 83       	std	Z+4, r24	; 0x04
     56a:	e9 cf       	rjmp	.-46     	; 0x53e <wakeup+0x76>

0000056c <_scheduler_init>:
     56c:	ea ee       	ldi	r30, 0xEA	; 234
     56e:	f2 e0       	ldi	r31, 0x02	; 2
     570:	f1 83       	std	Z+1, r31	; 0x01
     572:	e0 83       	st	Z, r30
     574:	f3 83       	std	Z+3, r31	; 0x03
     576:	e2 83       	std	Z+2, r30	; 0x02
     578:	14 82       	std	Z+4, r1	; 0x04
     57a:	f0 87       	std	Z+8, r31	; 0x08
     57c:	e7 83       	std	Z+7, r30	; 0x07
     57e:	f2 87       	std	Z+10, r31	; 0x0a
     580:	e1 87       	std	Z+9, r30	; 0x09
     582:	08 95       	ret

00000584 <chSchReadyI>:
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	dc 01       	movw	r26, r24
     58a:	1d 96       	adiw	r26, 0x0d	; 13
     58c:	1c 92       	st	X, r1
     58e:	1d 97       	sbiw	r26, 0x0d	; 13
     590:	14 96       	adiw	r26, 0x04	; 4
     592:	2c 91       	ld	r18, X
     594:	14 97       	sbiw	r26, 0x04	; 4
     596:	ea ee       	ldi	r30, 0xEA	; 234
     598:	f2 e0       	ldi	r31, 0x02	; 2
     59a:	01 90       	ld	r0, Z+
     59c:	f0 81       	ld	r31, Z
     59e:	e0 2d       	mov	r30, r0
     5a0:	94 81       	ldd	r25, Z+4	; 0x04
     5a2:	92 17       	cp	r25, r18
     5a4:	d0 f7       	brcc	.-12     	; 0x59a <chSchReadyI+0x16>
     5a6:	11 96       	adiw	r26, 0x01	; 1
     5a8:	fc 93       	st	X, r31
     5aa:	ee 93       	st	-X, r30
     5ac:	c2 81       	ldd	r28, Z+2	; 0x02
     5ae:	d3 81       	ldd	r29, Z+3	; 0x03
     5b0:	13 96       	adiw	r26, 0x03	; 3
     5b2:	dc 93       	st	X, r29
     5b4:	ce 93       	st	-X, r28
     5b6:	12 97       	sbiw	r26, 0x02	; 2
     5b8:	b9 83       	std	Y+1, r27	; 0x01
     5ba:	a8 83       	st	Y, r26
     5bc:	b3 83       	std	Z+3, r27	; 0x03
     5be:	a2 83       	std	Z+2, r26	; 0x02
     5c0:	cd 01       	movw	r24, r26
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <chSchGoSleepS>:
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ea ee       	ldi	r30, 0xEA	; 234
     5ce:	f2 e0       	ldi	r31, 0x02	; 2
     5d0:	63 85       	ldd	r22, Z+11	; 0x0b
     5d2:	74 85       	ldd	r23, Z+12	; 0x0c
     5d4:	db 01       	movw	r26, r22
     5d6:	1d 96       	adiw	r26, 0x0d	; 13
     5d8:	8c 93       	st	X, r24
     5da:	80 81       	ld	r24, Z
     5dc:	91 81       	ldd	r25, Z+1	; 0x01
     5de:	ec 01       	movw	r28, r24
     5e0:	a8 81       	ld	r26, Y
     5e2:	b9 81       	ldd	r27, Y+1	; 0x01
     5e4:	b1 83       	std	Z+1, r27	; 0x01
     5e6:	a0 83       	st	Z, r26
     5e8:	13 96       	adiw	r26, 0x03	; 3
     5ea:	fc 93       	st	X, r31
     5ec:	ee 93       	st	-X, r30
     5ee:	12 97       	sbiw	r26, 0x02	; 2
     5f0:	94 87       	std	Z+12, r25	; 0x0c
     5f2:	83 87       	std	Z+11, r24	; 0x0b
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	2d 87       	std	Y+13, r18	; 0x0d
     5f8:	ab d2       	rcall	.+1366   	; 0xb50 <_port_switch>
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <chSchGoSleepTimeoutS>:
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	2a 97       	sbiw	r28, 0x0a	; 10
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	18 2f       	mov	r17, r24
     618:	6f 3f       	cpi	r22, 0xFF	; 255
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	78 07       	cpc	r23, r24
     61e:	11 f1       	breq	.+68     	; 0x664 <chSchGoSleepTimeoutS+0x64>
     620:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <ch+0xb>
     624:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <ch+0xc>
     628:	44 e6       	ldi	r20, 0x64	; 100
     62a:	52 e0       	ldi	r21, 0x02	; 2
     62c:	ce 01       	movw	r24, r28
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	4e de       	rcall	.-868    	; 0x2ce <chVTDoSetI>
     632:	81 2f       	mov	r24, r17
     634:	c9 df       	rcall	.-110    	; 0x5c8 <chSchGoSleepS>
     636:	8f 81       	ldd	r24, Y+7	; 0x07
     638:	98 85       	ldd	r25, Y+8	; 0x08
     63a:	89 2b       	or	r24, r25
     63c:	19 f0       	breq	.+6      	; 0x644 <chSchGoSleepTimeoutS+0x44>
     63e:	ce 01       	movw	r24, r28
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	dd de       	rcall	.-582    	; 0x3fe <chVTDoResetI>
     644:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <ch+0xb>
     648:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <ch+0xc>
     64c:	80 89       	ldd	r24, Z+16	; 0x10
     64e:	91 89       	ldd	r25, Z+17	; 0x11
     650:	2a 96       	adiw	r28, 0x0a	; 10
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	08 95       	ret
     664:	81 2f       	mov	r24, r17
     666:	b0 df       	rcall	.-160    	; 0x5c8 <chSchGoSleepS>
     668:	ed cf       	rjmp	.-38     	; 0x644 <chSchGoSleepTimeoutS+0x44>

0000066a <chSchWakeupS>:
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	dc 01       	movw	r26, r24
     670:	c0 91 f5 02 	lds	r28, 0x02F5	; 0x8002f5 <ch+0xb>
     674:	d0 91 f6 02 	lds	r29, 0x02F6	; 0x8002f6 <ch+0xc>
     678:	51 96       	adiw	r26, 0x11	; 17
     67a:	7c 93       	st	X, r23
     67c:	6e 93       	st	-X, r22
     67e:	50 97       	sbiw	r26, 0x10	; 16
     680:	14 96       	adiw	r26, 0x04	; 4
     682:	2c 91       	ld	r18, X
     684:	14 97       	sbiw	r26, 0x04	; 4
     686:	8c 81       	ldd	r24, Y+4	; 0x04
     688:	82 17       	cp	r24, r18
     68a:	d8 f0       	brcs	.+54     	; 0x6c2 <chSchWakeupS+0x58>
     68c:	1d 96       	adiw	r26, 0x0d	; 13
     68e:	1c 92       	st	X, r1
     690:	1d 97       	sbiw	r26, 0x0d	; 13
     692:	ea ee       	ldi	r30, 0xEA	; 234
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	01 90       	ld	r0, Z+
     698:	f0 81       	ld	r31, Z
     69a:	e0 2d       	mov	r30, r0
     69c:	94 81       	ldd	r25, Z+4	; 0x04
     69e:	92 17       	cp	r25, r18
     6a0:	d0 f7       	brcc	.-12     	; 0x696 <chSchWakeupS+0x2c>
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	fc 93       	st	X, r31
     6a6:	ee 93       	st	-X, r30
     6a8:	c2 81       	ldd	r28, Z+2	; 0x02
     6aa:	d3 81       	ldd	r29, Z+3	; 0x03
     6ac:	13 96       	adiw	r26, 0x03	; 3
     6ae:	dc 93       	st	X, r29
     6b0:	ce 93       	st	-X, r28
     6b2:	12 97       	sbiw	r26, 0x02	; 2
     6b4:	b9 83       	std	Y+1, r27	; 0x01
     6b6:	a8 83       	st	Y, r26
     6b8:	b3 83       	std	Z+3, r27	; 0x03
     6ba:	a2 83       	std	Z+2, r26	; 0x02
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret
     6c2:	1d 86       	std	Y+13, r1	; 0x0d
     6c4:	ea ee       	ldi	r30, 0xEA	; 234
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	01 90       	ld	r0, Z+
     6ca:	f0 81       	ld	r31, Z
     6cc:	e0 2d       	mov	r30, r0
     6ce:	94 81       	ldd	r25, Z+4	; 0x04
     6d0:	98 17       	cp	r25, r24
     6d2:	d0 f7       	brcc	.-12     	; 0x6c8 <chSchWakeupS+0x5e>
     6d4:	cd 01       	movw	r24, r26
     6d6:	f9 83       	std	Y+1, r31	; 0x01
     6d8:	e8 83       	st	Y, r30
     6da:	a2 81       	ldd	r26, Z+2	; 0x02
     6dc:	b3 81       	ldd	r27, Z+3	; 0x03
     6de:	bb 83       	std	Y+3, r27	; 0x03
     6e0:	aa 83       	std	Y+2, r26	; 0x02
     6e2:	cd 93       	st	X+, r28
     6e4:	dc 93       	st	X, r29
     6e6:	d3 83       	std	Z+3, r29	; 0x03
     6e8:	c2 83       	std	Z+2, r28	; 0x02
     6ea:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <ch+0xc>
     6ee:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <ch+0xb>
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	fc 01       	movw	r30, r24
     6f6:	25 87       	std	Z+13, r18	; 0x0d
     6f8:	be 01       	movw	r22, r28
     6fa:	2a d2       	rcall	.+1108   	; 0xb50 <_port_switch>
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <chSchIsPreemptionRequired>:
     702:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <ch>
     706:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <ch+0x1>
     70a:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <ch+0xb>
     70e:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <ch+0xc>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	14 96       	adiw	r26, 0x04	; 4
     716:	2c 91       	ld	r18, X
     718:	94 81       	ldd	r25, Z+4	; 0x04
     71a:	92 17       	cp	r25, r18
     71c:	08 f0       	brcs	.+2      	; 0x720 <chSchIsPreemptionRequired+0x1e>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	08 95       	ret

00000722 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
  thread_t *otp = currp;
     726:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <ch+0xb>
     72a:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     72e:	40 91 ea 02 	lds	r20, 0x02EA	; 0x8002ea <ch>
     732:	50 91 eb 02 	lds	r21, 0x02EB	; 0x8002eb <ch+0x1>

  tqp->next             = tp->queue.next;
     736:	ea 01       	movw	r28, r20
     738:	e8 81       	ld	r30, Y
     73a:	f9 81       	ldd	r31, Y+1	; 0x01
     73c:	f0 93 eb 02 	sts	0x02EB, r31	; 0x8002eb <ch+0x1>
     740:	e0 93 ea 02 	sts	0x02EA, r30	; 0x8002ea <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     744:	8a ee       	ldi	r24, 0xEA	; 234
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	93 83       	std	Z+3, r25	; 0x03
     74a:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     74c:	50 93 f6 02 	sts	0x02F6, r21	; 0x8002f6 <ch+0xc>
     750:	40 93 f5 02 	sts	0x02F5, r20	; 0x8002f5 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     758:	1d 96       	adiw	r26, 0x0d	; 13
     75a:	1c 92       	st	X, r1
     75c:	1d 97       	sbiw	r26, 0x0d	; 13
     75e:	14 96       	adiw	r26, 0x04	; 4
     760:	2c 91       	ld	r18, X
     762:	14 97       	sbiw	r26, 0x04	; 4
     764:	03 c0       	rjmp	.+6      	; 0x76c <chSchDoReschedule+0x4a>
     766:	01 90       	ld	r0, Z+
     768:	f0 81       	ld	r31, Z
     76a:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     76c:	94 81       	ldd	r25, Z+4	; 0x04
     76e:	29 17       	cp	r18, r25
     770:	d0 f3       	brcs	.-12     	; 0x766 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     772:	11 96       	adiw	r26, 0x01	; 1
     774:	fc 93       	st	X, r31
     776:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	93 81       	ldd	r25, Z+3	; 0x03
     77c:	13 96       	adiw	r26, 0x03	; 3
     77e:	9c 93       	st	X, r25
     780:	8e 93       	st	-X, r24
     782:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     784:	ec 01       	movw	r28, r24
     786:	b9 83       	std	Y+1, r27	; 0x01
     788:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     78a:	b3 83       	std	Z+3, r27	; 0x03
     78c:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     78e:	bd 01       	movw	r22, r26
     790:	ca 01       	movw	r24, r20
     792:	de d1       	rcall	.+956    	; 0xb50 <_port_switch>
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	fc 01       	movw	r30, r24
     7a0:	44 83       	std	Z+4, r20	; 0x04
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	85 87       	std	Z+13, r24	; 0x0d
     7a6:	16 86       	std	Z+14, r1	; 0x0e
     7a8:	43 8f       	std	Z+27, r20	; 0x1b
     7aa:	12 8e       	std	Z+26, r1	; 0x1a
     7ac:	11 8e       	std	Z+25, r1	; 0x19
     7ae:	10 8e       	std	Z+24, r1	; 0x18
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	87 87       	std	Z+15, r24	; 0x0f
     7b4:	74 87       	std	Z+12, r23	; 0x0c
     7b6:	63 87       	std	Z+11, r22	; 0x0b
     7b8:	aa ee       	ldi	r26, 0xEA	; 234
     7ba:	b2 e0       	ldi	r27, 0x02	; 2
     7bc:	b0 87       	std	Z+8, r27	; 0x08
     7be:	a7 83       	std	Z+7, r26	; 0x07
     7c0:	19 96       	adiw	r26, 0x09	; 9
     7c2:	cd 91       	ld	r28, X+
     7c4:	dc 91       	ld	r29, X
     7c6:	1a 97       	sbiw	r26, 0x0a	; 10
     7c8:	d2 87       	std	Z+10, r29	; 0x0a
     7ca:	c1 87       	std	Z+9, r28	; 0x09
     7cc:	f8 87       	std	Y+8, r31	; 0x08
     7ce:	ef 83       	std	Y+7, r30	; 0x07
     7d0:	1a 96       	adiw	r26, 0x0a	; 10
     7d2:	fc 93       	st	X, r31
     7d4:	ee 93       	st	-X, r30
     7d6:	19 97       	sbiw	r26, 0x09	; 9
     7d8:	cf 01       	movw	r24, r30
     7da:	42 96       	adiw	r24, 0x12	; 18
     7dc:	93 8b       	std	Z+19, r25	; 0x13
     7de:	82 8b       	std	Z+18, r24	; 0x12
     7e0:	02 96       	adiw	r24, 0x02	; 2
     7e2:	95 8b       	std	Z+21, r25	; 0x15
     7e4:	84 8b       	std	Z+20, r24	; 0x14
     7e6:	97 8b       	std	Z+23, r25	; 0x17
     7e8:	86 8b       	std	Z+22, r24	; 0x16
     7ea:	cf 01       	movw	r24, r30
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <chThdCreateSuspendedI>:
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	ec 01       	movw	r28, r24
     7f8:	4c 81       	ldd	r20, Y+4	; 0x04
     7fa:	5d 81       	ldd	r21, Y+5	; 0x05
     7fc:	fa 01       	movw	r30, r20
     7fe:	7c 97       	sbiw	r30, 0x1c	; 28
     800:	ca 01       	movw	r24, r20
     802:	c1 97       	sbiw	r24, 0x31	; 49
     804:	96 83       	std	Z+6, r25	; 0x06
     806:	85 83       	std	Z+5, r24	; 0x05
     808:	2f 81       	ldd	r18, Y+7	; 0x07
     80a:	dc 01       	movw	r26, r24
     80c:	52 96       	adiw	r26, 0x12	; 18
     80e:	2c 93       	st	X, r18
     810:	52 97       	sbiw	r26, 0x12	; 18
     812:	28 85       	ldd	r18, Y+8	; 0x08
     814:	51 96       	adiw	r26, 0x11	; 17
     816:	2c 93       	st	X, r18
     818:	51 97       	sbiw	r26, 0x11	; 17
     81a:	29 85       	ldd	r18, Y+9	; 0x09
     81c:	50 96       	adiw	r26, 0x10	; 16
     81e:	2c 93       	st	X, r18
     820:	50 97       	sbiw	r26, 0x10	; 16
     822:	2a 85       	ldd	r18, Y+10	; 0x0a
     824:	1f 96       	adiw	r26, 0x0f	; 15
     826:	2c 93       	st	X, r18
     828:	1f 97       	sbiw	r26, 0x0f	; 15
     82a:	27 ed       	ldi	r18, 0xD7	; 215
     82c:	35 e0       	ldi	r19, 0x05	; 5
     82e:	53 96       	adiw	r26, 0x13	; 19
     830:	3c 93       	st	X, r19
     832:	53 97       	sbiw	r26, 0x13	; 19
     834:	54 96       	adiw	r26, 0x14	; 20
     836:	2c 93       	st	X, r18
     838:	8e 81       	ldd	r24, Y+6	; 0x06
     83a:	28 81       	ld	r18, Y
     83c:	39 81       	ldd	r19, Y+1	; 0x01
     83e:	84 83       	std	Z+4, r24	; 0x04
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	95 87       	std	Z+13, r25	; 0x0d
     844:	16 86       	std	Z+14, r1	; 0x0e
     846:	83 8f       	std	Z+27, r24	; 0x1b
     848:	12 8e       	std	Z+26, r1	; 0x1a
     84a:	11 8e       	std	Z+25, r1	; 0x19
     84c:	10 8e       	std	Z+24, r1	; 0x18
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	87 87       	std	Z+15, r24	; 0x0f
     852:	34 87       	std	Z+12, r19	; 0x0c
     854:	23 87       	std	Z+11, r18	; 0x0b
     856:	ca ee       	ldi	r28, 0xEA	; 234
     858:	d2 e0       	ldi	r29, 0x02	; 2
     85a:	d0 87       	std	Z+8, r29	; 0x08
     85c:	c7 83       	std	Z+7, r28	; 0x07
     85e:	89 85       	ldd	r24, Y+9	; 0x09
     860:	9a 85       	ldd	r25, Y+10	; 0x0a
     862:	92 87       	std	Z+10, r25	; 0x0a
     864:	81 87       	std	Z+9, r24	; 0x09
     866:	dc 01       	movw	r26, r24
     868:	18 96       	adiw	r26, 0x08	; 8
     86a:	fc 93       	st	X, r31
     86c:	ee 93       	st	-X, r30
     86e:	17 97       	sbiw	r26, 0x07	; 7
     870:	fa 87       	std	Y+10, r31	; 0x0a
     872:	e9 87       	std	Y+9, r30	; 0x09
     874:	ea 01       	movw	r28, r20
     876:	2a 97       	sbiw	r28, 0x0a	; 10
     878:	d9 83       	std	Y+1, r29	; 0x01
     87a:	c8 83       	st	Y, r28
     87c:	da 01       	movw	r26, r20
     87e:	18 97       	sbiw	r26, 0x08	; 8
     880:	0b 2e       	mov	r0, r27
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	0c 92       	st	X, r0
     886:	11 97       	sbiw	r26, 0x01	; 1
     888:	ac 93       	st	X, r26
     88a:	0a 2e       	mov	r0, r26
     88c:	1b 2e       	mov	r1, r27
     88e:	13 96       	adiw	r26, 0x03	; 3
     890:	1c 92       	st	X, r1
     892:	0e 92       	st	-X, r0
     894:	11 24       	eor	r1, r1
     896:	12 97       	sbiw	r26, 0x02	; 2
     898:	cf 01       	movw	r24, r30
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <chThdCreate>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	f8 94       	cli
     8a6:	a5 df       	rcall	.-182    	; 0x7f2 <chThdCreateSuspendedI>
     8a8:	ec 01       	movw	r28, r24
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	dd de       	rcall	.-582    	; 0x66a <chSchWakeupS>
     8b0:	78 94       	sei
     8b2:	ce 01       	movw	r24, r28
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <chThdCreateStatic>:
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	f8 94       	cli
     8c4:	6c 51       	subi	r22, 0x1C	; 28
     8c6:	71 09       	sbc	r23, r1
     8c8:	ec 01       	movw	r28, r24
     8ca:	c6 0f       	add	r28, r22
     8cc:	d7 1f       	adc	r29, r23
     8ce:	fe 01       	movw	r30, r28
     8d0:	75 97       	sbiw	r30, 0x15	; 21
     8d2:	fe 83       	std	Y+6, r31	; 0x06
     8d4:	ed 83       	std	Y+5, r30	; 0x05
     8d6:	22 8b       	std	Z+18, r18	; 0x12
     8d8:	31 8b       	std	Z+17, r19	; 0x11
     8da:	00 8b       	std	Z+16, r16	; 0x10
     8dc:	17 87       	std	Z+15, r17	; 0x0f
     8de:	87 ed       	ldi	r24, 0xD7	; 215
     8e0:	95 e0       	ldi	r25, 0x05	; 5
     8e2:	93 8b       	std	Z+19, r25	; 0x13
     8e4:	84 8b       	std	Z+20, r24	; 0x14
     8e6:	4c 83       	std	Y+4, r20	; 0x04
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	8d 87       	std	Y+13, r24	; 0x0d
     8ec:	1e 86       	std	Y+14, r1	; 0x0e
     8ee:	4b 8f       	std	Y+27, r20	; 0x1b
     8f0:	1a 8e       	std	Y+26, r1	; 0x1a
     8f2:	19 8e       	std	Y+25, r1	; 0x19
     8f4:	18 8e       	std	Y+24, r1	; 0x18
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	8f 87       	std	Y+15, r24	; 0x0f
     8fa:	86 e1       	ldi	r24, 0x16	; 22
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	9c 87       	std	Y+12, r25	; 0x0c
     900:	8b 87       	std	Y+11, r24	; 0x0b
     902:	ea ee       	ldi	r30, 0xEA	; 234
     904:	f2 e0       	ldi	r31, 0x02	; 2
     906:	f8 87       	std	Y+8, r31	; 0x08
     908:	ef 83       	std	Y+7, r30	; 0x07
     90a:	a1 85       	ldd	r26, Z+9	; 0x09
     90c:	b2 85       	ldd	r27, Z+10	; 0x0a
     90e:	ba 87       	std	Y+10, r27	; 0x0a
     910:	a9 87       	std	Y+9, r26	; 0x09
     912:	18 96       	adiw	r26, 0x08	; 8
     914:	dc 93       	st	X, r29
     916:	ce 93       	st	-X, r28
     918:	17 97       	sbiw	r26, 0x07	; 7
     91a:	d2 87       	std	Z+10, r29	; 0x0a
     91c:	c1 87       	std	Z+9, r28	; 0x09
     91e:	ce 01       	movw	r24, r28
     920:	42 96       	adiw	r24, 0x12	; 18
     922:	9b 8b       	std	Y+19, r25	; 0x13
     924:	8a 8b       	std	Y+18, r24	; 0x12
     926:	02 96       	adiw	r24, 0x02	; 2
     928:	9d 8b       	std	Y+21, r25	; 0x15
     92a:	8c 8b       	std	Y+20, r24	; 0x14
     92c:	9f 8b       	std	Y+23, r25	; 0x17
     92e:	8e 8b       	std	Y+22, r24	; 0x16
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	ce 01       	movw	r24, r28
     936:	99 de       	rcall	.-718    	; 0x66a <chSchWakeupS>
     938:	78 94       	sei
     93a:	ce 01       	movw	r24, r28
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	08 95       	ret

00000946 <chThdExitS>:
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	c0 91 f5 02 	lds	r28, 0x02F5	; 0x8002f5 <ch+0xb>
     952:	d0 91 f6 02 	lds	r29, 0x02F6	; 0x8002f6 <ch+0xc>
     956:	99 8b       	std	Y+17, r25	; 0x11
     958:	88 8b       	std	Y+16, r24	; 0x10
     95a:	8e 01       	movw	r16, r28
     95c:	0e 5e       	subi	r16, 0xEE	; 238
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	8a 89       	ldd	r24, Y+18	; 0x12
     962:	9b 89       	ldd	r25, Y+19	; 0x13
     964:	08 17       	cp	r16, r24
     966:	19 07       	cpc	r17, r25
     968:	59 f0       	breq	.+22     	; 0x980 <chThdExitS+0x3a>
     96a:	fc 01       	movw	r30, r24
     96c:	20 81       	ld	r18, Z
     96e:	31 81       	ldd	r19, Z+1	; 0x01
     970:	3b 8b       	std	Y+19, r19	; 0x13
     972:	2a 8b       	std	Y+18, r18	; 0x12
     974:	07 de       	rcall	.-1010   	; 0x584 <chSchReadyI>
     976:	8a 89       	ldd	r24, Y+18	; 0x12
     978:	9b 89       	ldd	r25, Y+19	; 0x13
     97a:	80 17       	cp	r24, r16
     97c:	91 07       	cpc	r25, r17
     97e:	a9 f7       	brne	.-22     	; 0x96a <chThdExitS+0x24>
     980:	8f 85       	ldd	r24, Y+15	; 0x0f
     982:	81 11       	cpse	r24, r1
     984:	0c c0       	rjmp	.+24     	; 0x99e <chThdExitS+0x58>
     986:	e9 85       	ldd	r30, Y+9	; 0x09
     988:	fa 85       	ldd	r31, Y+10	; 0x0a
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	90 87       	std	Z+8, r25	; 0x08
     990:	87 83       	std	Z+7, r24	; 0x07
     992:	af 81       	ldd	r26, Y+7	; 0x07
     994:	b8 85       	ldd	r27, Y+8	; 0x08
     996:	1a 96       	adiw	r26, 0x0a	; 10
     998:	fc 93       	st	X, r31
     99a:	ee 93       	st	-X, r30
     99c:	19 97       	sbiw	r26, 0x09	; 9
     99e:	8f e0       	ldi	r24, 0x0F	; 15
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	0f ce       	rjmp	.-994    	; 0x5c8 <chSchGoSleepS>

000009aa <chThdExit>:
     9aa:	f8 94       	cli
     9ac:	cc cf       	rjmp	.-104    	; 0x946 <chThdExitS>

000009ae <chThdSleep>:
     9ae:	f8 94       	cli
     9b0:	bc 01       	movw	r22, r24
     9b2:	88 e0       	ldi	r24, 0x08	; 8
     9b4:	25 de       	rcall	.-950    	; 0x600 <chSchGoSleepTimeoutS>
     9b6:	78 94       	sei
     9b8:	08 95       	ret

000009ba <chThdResumeI>:
     9ba:	dc 01       	movw	r26, r24
     9bc:	ed 91       	ld	r30, X+
     9be:	fc 91       	ld	r31, X
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	30 97       	sbiw	r30, 0x00	; 0
     9c4:	31 f0       	breq	.+12     	; 0x9d2 <chThdResumeI+0x18>
     9c6:	1d 92       	st	X+, r1
     9c8:	1c 92       	st	X, r1
     9ca:	71 8b       	std	Z+17, r23	; 0x11
     9cc:	60 8b       	std	Z+16, r22	; 0x10
     9ce:	cf 01       	movw	r24, r30
     9d0:	d9 cd       	rjmp	.-1102   	; 0x584 <chSchReadyI>
     9d2:	08 95       	ret

000009d4 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     9d8:	61 15       	cp	r22, r1
     9da:	71 05       	cpc	r23, r1
     9dc:	99 f0       	breq	.+38     	; 0xa04 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     9de:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <ch+0xb>
     9e2:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     9ea:	ec 01       	movw	r28, r24
     9ec:	aa 81       	ldd	r26, Y+2	; 0x02
     9ee:	bb 81       	ldd	r27, Y+3	; 0x03
     9f0:	b3 83       	std	Z+3, r27	; 0x03
     9f2:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     9f4:	ed 93       	st	X+, r30
     9f6:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     9f8:	fb 83       	std	Y+3, r31	; 0x03
     9fa:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     9fc:	84 e0       	ldi	r24, 0x04	; 4
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     a02:	fe cd       	rjmp	.-1028   	; 0x600 <chSchGoSleepTimeoutS>
}
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     a18:	e8 17       	cp	r30, r24
     a1a:	f9 07       	cpc	r31, r25
     a1c:	71 f0       	breq	.+28     	; 0xa3a <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     a1e:	ec 01       	movw	r28, r24
     a20:	a8 81       	ld	r26, Y
     a22:	b9 81       	ldd	r27, Y+1	; 0x01
     a24:	b1 83       	std	Z+1, r27	; 0x01
     a26:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	fc 93       	st	X, r31
     a2c:	ee 93       	st	-X, r30
     a2e:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     a30:	79 8b       	std	Y+17, r23	; 0x11
     a32:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
     a38:	a5 cd       	rjmp	.-1206   	; 0x584 <chSchReadyI>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     a40:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     a46:	93 83       	std	Z+3, r25	; 0x03
     a48:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     a4a:	15 82       	std	Z+5, r1	; 0x05
     a4c:	14 82       	std	Z+4, r1	; 0x04
     a4e:	08 95       	ret

00000a50 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     a50:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     a52:	90 8d       	ldd	r25, Z+24	; 0x18
     a54:	69 2b       	or	r22, r25
     a56:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a58:	85 85       	ldd	r24, Z+13	; 0x0d
     a5a:	8a 30       	cpi	r24, 0x0A	; 10
     a5c:	59 f0       	breq	.+22     	; 0xa74 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     a5e:	8b 30       	cpi	r24, 0x0B	; 11
     a60:	09 f0       	breq	.+2      	; 0xa64 <chEvtSignalI+0x14>
     a62:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     a64:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     a66:	68 23       	and	r22, r24
     a68:	86 13       	cpse	r24, r22
     a6a:	fb cf       	rjmp	.-10     	; 0xa62 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     a6c:	11 8a       	std	Z+17, r1	; 0x11
     a6e:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     a70:	cf 01       	movw	r24, r30
     a72:	88 cd       	rjmp	.-1264   	; 0x584 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a74:	80 89       	ldd	r24, Z+16	; 0x10
     a76:	68 23       	and	r22, r24
     a78:	c9 f7       	brne	.-14     	; 0xa6c <chEvtSignalI+0x1c>
     a7a:	08 95       	ret

00000a7c <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	7c 01       	movw	r14, r24
     a88:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     a8a:	fc 01       	movw	r30, r24
     a8c:	c0 81       	ld	r28, Z
     a8e:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     a90:	8c 17       	cp	r24, r28
     a92:	9d 07       	cpc	r25, r29
     a94:	91 f0       	breq	.+36     	; 0xaba <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     a96:	8d 81       	ldd	r24, Y+5	; 0x05
     a98:	81 2b       	or	r24, r17
     a9a:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     a9c:	11 23       	and	r17, r17
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <chEvtBroadcastFlagsI+0x2a>
     aa0:	8e 81       	ldd	r24, Y+6	; 0x06
     aa2:	81 23       	and	r24, r17
     aa4:	21 f0       	breq	.+8      	; 0xaae <chEvtBroadcastFlagsI+0x32>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     aa6:	6c 81       	ldd	r22, Y+4	; 0x04
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	9b 81       	ldd	r25, Y+3	; 0x03
     aac:	d1 df       	rcall	.-94     	; 0xa50 <chEvtSignalI>
    }
    elp = elp->next;
     aae:	09 90       	ld	r0, Y+
     ab0:	d8 81       	ld	r29, Y
     ab2:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     ab4:	ec 16       	cp	r14, r28
     ab6:	fd 06       	cpc	r15, r29
     ab8:	71 f7       	brne	.-36     	; 0xa96 <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	08 95       	ret

00000ac6 <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     ac6:	ed e1       	ldi	r30, 0x1D	; 29
     ac8:	f3 e0       	ldi	r31, 0x03	; 3
     aca:	82 e7       	ldi	r24, 0x72	; 114
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
     ad2:	82 ef       	ldi	r24, 0xF2	; 242
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	93 83       	std	Z+3, r25	; 0x03
     ad8:	82 83       	std	Z+2, r24	; 0x02
     ada:	08 95       	ret

00000adc <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     adc:	f8 94       	cli
     ade:	9b 01       	movw	r18, r22
     ae0:	21 50       	subi	r18, 0x01	; 1
     ae2:	31 09       	sbc	r19, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     ae4:	71 95       	neg	r23
     ae6:	61 95       	neg	r22
     ae8:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     aea:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <ch_memcore>
     aee:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <ch_memcore+0x1>
     af2:	4e 0f       	add	r20, r30
     af4:	5f 1f       	adc	r21, r31
     af6:	42 0f       	add	r20, r18
     af8:	53 1f       	adc	r21, r19
     afa:	46 23       	and	r20, r22
     afc:	57 23       	and	r21, r23
  next = p + size;
     afe:	82 0f       	add	r24, r18
     b00:	93 1f       	adc	r25, r19
     b02:	68 23       	and	r22, r24
     b04:	79 23       	and	r23, r25
     b06:	ca 01       	movw	r24, r20
     b08:	86 0f       	add	r24, r22
     b0a:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     b0c:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <ch_memcore+0x2>
     b10:	30 91 20 03 	lds	r19, 0x0320	; 0x800320 <ch_memcore+0x3>
     b14:	28 17       	cp	r18, r24
     b16:	39 07       	cpc	r19, r25
     b18:	50 f0       	brcs	.+20     	; 0xb2e <chCoreAllocAlignedWithOffset+0x52>
     b1a:	8e 17       	cp	r24, r30
     b1c:	9f 07       	cpc	r25, r31
     b1e:	38 f0       	brcs	.+14     	; 0xb2e <chCoreAllocAlignedWithOffset+0x52>
    return NULL;
  }

  ch_memcore.nextmem = next;
     b20:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <ch_memcore+0x1>
     b24:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <ch_memcore>

  return p;
     b28:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     b2a:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     b2c:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     b34:	08 95       	ret

00000b36 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     b36:	e2 ef       	ldi	r30, 0xF2	; 242
     b38:	f1 e0       	ldi	r31, 0x01	; 1
     b3a:	8e e6       	ldi	r24, 0x6E	; 110
     b3c:	95 e0       	ldi	r25, 0x05	; 5
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     b42:	13 82       	std	Z+3, r1	; 0x03
     b44:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     b46:	15 82       	std	Z+5, r1	; 0x05
     b48:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     b4a:	88 ef       	ldi	r24, 0xF8	; 248
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	78 cf       	rjmp	.-272    	; 0xa40 <chMtxObjectInit>

00000b50 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     b50:	2f 92       	push	r2
  asm volatile ("push    r3");
     b52:	3f 92       	push	r3
  asm volatile ("push    r4");
     b54:	4f 92       	push	r4
  asm volatile ("push    r5");
     b56:	5f 92       	push	r5
  asm volatile ("push    r6");
     b58:	6f 92       	push	r6
  asm volatile ("push    r7");
     b5a:	7f 92       	push	r7
  asm volatile ("push    r8");
     b5c:	8f 92       	push	r8
  asm volatile ("push    r9");
     b5e:	9f 92       	push	r9
  asm volatile ("push    r10");
     b60:	af 92       	push	r10
  asm volatile ("push    r11");
     b62:	bf 92       	push	r11
  asm volatile ("push    r12");
     b64:	cf 92       	push	r12
  asm volatile ("push    r13");
     b66:	df 92       	push	r13
  asm volatile ("push    r14");
     b68:	ef 92       	push	r14
  asm volatile ("push    r15");
     b6a:	ff 92       	push	r15
  asm volatile ("push    r16");
     b6c:	0f 93       	push	r16
  asm volatile ("push    r17");
     b6e:	1f 93       	push	r17
  asm volatile ("push    r28");
     b70:	cf 93       	push	r28
  asm volatile ("push    r29");
     b72:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     b74:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     b76:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     b78:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     b7a:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     b7c:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     b7e:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     b80:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     b82:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     b84:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     b86:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     b88:	df 91       	pop	r29
  asm volatile ("pop     r28");
     b8a:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     b8c:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     b8e:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     b90:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     b92:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     b94:	df 90       	pop	r13
  asm volatile ("pop     r12");
     b96:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     b98:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     b9a:	af 90       	pop	r10
  asm volatile ("pop     r9");
     b9c:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     b9e:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     ba0:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     ba2:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     ba4:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     ba6:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     ba8:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     baa:	2f 90       	pop	r2
  asm volatile ("ret");
     bac:	08 95       	ret

00000bae <_port_thread_start>:
     bae:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     bb0:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     bb2:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     bb4:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     bb6:	f9 ce       	rjmp	.-526    	; 0x9aa <chThdExit>

00000bb8 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     bb8:	25 d3       	rcall	.+1610   	; 0x1204 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
     bba:	8a e4       	ldi	r24, 0x4A	; 74
     bbc:	91 e0       	ldi	r25, 0x01	; 1
#endif
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
     bbe:	8d d4       	rcall	.+2330   	; 0x14da <_pal_lld_init>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
     bc0:	66 d2       	rcall	.+1228   	; 0x108e <adcInit>
     bc2:	ab d2       	rcall	.+1366   	; 0x111a <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     bc4:	91 d5       	rcall	.+2850   	; 0x16e8 <boardInit>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <stInit>

00000bc8 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     bc8:	c2 c4       	rjmp	.+2436   	; 0x154e <st_lld_init>

00000bca <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     bca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	86 bb       	out	0x16, r24	; 22

  /* Enable interrupt. */
  TIMSK_REG = _BV(OCIE1A);
     bd6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     bda:	08 95       	ret

00000bdc <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
     bdc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     be0:	08 95       	ret

00000be2 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     be2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     be6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     bea:	08 95       	ret

00000bec <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     bec:	af 92       	push	r10
     bee:	bf 92       	push	r11
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	6b 01       	movw	r12, r22
     c04:	8a 01       	movw	r16, r20
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	9d 81       	ldd	r25, Y+5	; 0x05
     c0a:	84 17       	cp	r24, r20
     c0c:	95 07       	cpc	r25, r21
     c0e:	10 f4       	brcc	.+4      	; 0xc14 <iq_read+0x28>
     c10:	0c 81       	ldd	r16, Y+4	; 0x04
     c12:	1d 81       	ldd	r17, Y+5	; 0x05
     c14:	6c 85       	ldd	r22, Y+12	; 0x0c
     c16:	7d 85       	ldd	r23, Y+13	; 0x0d
     c18:	e8 84       	ldd	r14, Y+8	; 0x08
     c1a:	f9 84       	ldd	r15, Y+9	; 0x09
     c1c:	e6 1a       	sub	r14, r22
     c1e:	f7 0a       	sbc	r15, r23
     c20:	0e 15       	cp	r16, r14
     c22:	1f 05       	cpc	r17, r15
     c24:	98 f1       	brcs	.+102    	; 0xc8c <iq_read+0xa0>
     c26:	e0 16       	cp	r14, r16
     c28:	f1 06       	cpc	r15, r17
     c2a:	d0 f0       	brcs	.+52     	; 0xc60 <iq_read+0x74>
     c2c:	a8 01       	movw	r20, r16
     c2e:	c6 01       	movw	r24, r12
     c30:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     c34:	8e 81       	ldd	r24, Y+6	; 0x06
     c36:	9f 81       	ldd	r25, Y+7	; 0x07
     c38:	9d 87       	std	Y+13, r25	; 0x0d
     c3a:	8c 87       	std	Y+12, r24	; 0x0c
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	9d 81       	ldd	r25, Y+5	; 0x05
     c40:	80 1b       	sub	r24, r16
     c42:	91 0b       	sbc	r25, r17
     c44:	9d 83       	std	Y+5, r25	; 0x05
     c46:	8c 83       	std	Y+4, r24	; 0x04
     c48:	c8 01       	movw	r24, r16
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	08 95       	ret
     c60:	a7 01       	movw	r20, r14
     c62:	c6 01       	movw	r24, r12
     c64:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     c68:	58 01       	movw	r10, r16
     c6a:	ae 18       	sub	r10, r14
     c6c:	bf 08       	sbc	r11, r15
     c6e:	6e 81       	ldd	r22, Y+6	; 0x06
     c70:	7f 81       	ldd	r23, Y+7	; 0x07
     c72:	a5 01       	movw	r20, r10
     c74:	c6 01       	movw	r24, r12
     c76:	8e 0d       	add	r24, r14
     c78:	9f 1d       	adc	r25, r15
     c7a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     c7e:	8e 81       	ldd	r24, Y+6	; 0x06
     c80:	9f 81       	ldd	r25, Y+7	; 0x07
     c82:	a8 0e       	add	r10, r24
     c84:	b9 1e       	adc	r11, r25
     c86:	bd 86       	std	Y+13, r11	; 0x0d
     c88:	ac 86       	std	Y+12, r10	; 0x0c
     c8a:	d8 cf       	rjmp	.-80     	; 0xc3c <iq_read+0x50>
     c8c:	a8 01       	movw	r20, r16
     c8e:	c6 01       	movw	r24, r12
     c90:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     c94:	8c 85       	ldd	r24, Y+12	; 0x0c
     c96:	9d 85       	ldd	r25, Y+13	; 0x0d
     c98:	80 0f       	add	r24, r16
     c9a:	91 1f       	adc	r25, r17
     c9c:	9d 87       	std	Y+13, r25	; 0x0d
     c9e:	8c 87       	std	Y+12, r24	; 0x0c
     ca0:	cd cf       	rjmp	.-102    	; 0xc3c <iq_read+0x50>

00000ca2 <oq_write>:
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	ec 01       	movw	r28, r24
     cb8:	6b 01       	movw	r12, r22
     cba:	8a 01       	movw	r16, r20
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	84 17       	cp	r24, r20
     cc2:	95 07       	cpc	r25, r21
     cc4:	10 f4       	brcc	.+4      	; 0xcca <oq_write+0x28>
     cc6:	0c 81       	ldd	r16, Y+4	; 0x04
     cc8:	1d 81       	ldd	r17, Y+5	; 0x05
     cca:	8a 85       	ldd	r24, Y+10	; 0x0a
     ccc:	9b 85       	ldd	r25, Y+11	; 0x0b
     cce:	e8 84       	ldd	r14, Y+8	; 0x08
     cd0:	f9 84       	ldd	r15, Y+9	; 0x09
     cd2:	e8 1a       	sub	r14, r24
     cd4:	f9 0a       	sbc	r15, r25
     cd6:	0e 15       	cp	r16, r14
     cd8:	1f 05       	cpc	r17, r15
     cda:	98 f1       	brcs	.+102    	; 0xd42 <oq_write+0xa0>
     cdc:	e0 16       	cp	r14, r16
     cde:	f1 06       	cpc	r15, r17
     ce0:	d0 f0       	brcs	.+52     	; 0xd16 <oq_write+0x74>
     ce2:	a8 01       	movw	r20, r16
     ce4:	b6 01       	movw	r22, r12
     ce6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	9f 81       	ldd	r25, Y+7	; 0x07
     cee:	9b 87       	std	Y+11, r25	; 0x0b
     cf0:	8a 87       	std	Y+10, r24	; 0x0a
     cf2:	8c 81       	ldd	r24, Y+4	; 0x04
     cf4:	9d 81       	ldd	r25, Y+5	; 0x05
     cf6:	80 1b       	sub	r24, r16
     cf8:	91 0b       	sbc	r25, r17
     cfa:	9d 83       	std	Y+5, r25	; 0x05
     cfc:	8c 83       	std	Y+4, r24	; 0x04
     cfe:	c8 01       	movw	r24, r16
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	08 95       	ret
     d16:	a7 01       	movw	r20, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     d1e:	58 01       	movw	r10, r16
     d20:	ae 18       	sub	r10, r14
     d22:	bf 08       	sbc	r11, r15
     d24:	b6 01       	movw	r22, r12
     d26:	6e 0d       	add	r22, r14
     d28:	7f 1d       	adc	r23, r15
     d2a:	a5 01       	movw	r20, r10
     d2c:	8e 81       	ldd	r24, Y+6	; 0x06
     d2e:	9f 81       	ldd	r25, Y+7	; 0x07
     d30:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	9f 81       	ldd	r25, Y+7	; 0x07
     d38:	a8 0e       	add	r10, r24
     d3a:	b9 1e       	adc	r11, r25
     d3c:	bb 86       	std	Y+11, r11	; 0x0b
     d3e:	aa 86       	std	Y+10, r10	; 0x0a
     d40:	d8 cf       	rjmp	.-80     	; 0xcf2 <oq_write+0x50>
     d42:	a8 01       	movw	r20, r16
     d44:	b6 01       	movw	r22, r12
     d46:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
     d4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d4e:	80 0f       	add	r24, r16
     d50:	91 1f       	adc	r25, r17
     d52:	9b 87       	std	Y+11, r25	; 0x0b
     d54:	8a 87       	std	Y+10, r24	; 0x0a
     d56:	cd cf       	rjmp	.-102    	; 0xcf2 <oq_write+0x50>

00000d58 <iqObjectInit>:
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	fc 01       	movw	r30, r24
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
     d62:	93 83       	std	Z+3, r25	; 0x03
     d64:	82 83       	std	Z+2, r24	; 0x02
     d66:	15 82       	std	Z+5, r1	; 0x05
     d68:	14 82       	std	Z+4, r1	; 0x04
     d6a:	77 83       	std	Z+7, r23	; 0x07
     d6c:	66 83       	std	Z+6, r22	; 0x06
     d6e:	75 87       	std	Z+13, r23	; 0x0d
     d70:	64 87       	std	Z+12, r22	; 0x0c
     d72:	73 87       	std	Z+11, r23	; 0x0b
     d74:	62 87       	std	Z+10, r22	; 0x0a
     d76:	64 0f       	add	r22, r20
     d78:	75 1f       	adc	r23, r21
     d7a:	71 87       	std	Z+9, r23	; 0x09
     d7c:	60 87       	std	Z+8, r22	; 0x08
     d7e:	37 87       	std	Z+15, r19	; 0x0f
     d80:	26 87       	std	Z+14, r18	; 0x0e
     d82:	11 8b       	std	Z+17, r17	; 0x11
     d84:	00 8b       	std	Z+16, r16	; 0x10
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	08 95       	ret

00000d8c <iqPutI>:
     d8c:	fc 01       	movw	r30, r24
     d8e:	a2 85       	ldd	r26, Z+10	; 0x0a
     d90:	b3 85       	ldd	r27, Z+11	; 0x0b
     d92:	84 85       	ldd	r24, Z+12	; 0x0c
     d94:	95 85       	ldd	r25, Z+13	; 0x0d
     d96:	a8 17       	cp	r26, r24
     d98:	b9 07       	cpc	r27, r25
     d9a:	e1 f0       	breq	.+56     	; 0xdd4 <iqPutI+0x48>
     d9c:	84 81       	ldd	r24, Z+4	; 0x04
     d9e:	95 81       	ldd	r25, Z+5	; 0x05
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	95 83       	std	Z+5, r25	; 0x05
     da4:	84 83       	std	Z+4, r24	; 0x04
     da6:	cd 01       	movw	r24, r26
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	93 87       	std	Z+11, r25	; 0x0b
     dac:	82 87       	std	Z+10, r24	; 0x0a
     dae:	6c 93       	st	X, r22
     db0:	22 85       	ldd	r18, Z+10	; 0x0a
     db2:	33 85       	ldd	r19, Z+11	; 0x0b
     db4:	80 85       	ldd	r24, Z+8	; 0x08
     db6:	91 85       	ldd	r25, Z+9	; 0x09
     db8:	28 17       	cp	r18, r24
     dba:	39 07       	cpc	r19, r25
     dbc:	20 f0       	brcs	.+8      	; 0xdc6 <iqPutI+0x3a>
     dbe:	86 81       	ldd	r24, Z+6	; 0x06
     dc0:	97 81       	ldd	r25, Z+7	; 0x07
     dc2:	93 87       	std	Z+11, r25	; 0x0b
     dc4:	82 87       	std	Z+10, r24	; 0x0a
     dc6:	cf 01       	movw	r24, r30
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	20 de       	rcall	.-960    	; 0xa0e <chThdDequeueNextI>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	08 95       	ret
     dd4:	84 81       	ldd	r24, Z+4	; 0x04
     dd6:	95 81       	ldd	r25, Z+5	; 0x05
     dd8:	89 2b       	or	r24, r25
     dda:	01 f3       	breq	.-64     	; 0xd9c <iqPutI+0x10>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	9f ef       	ldi	r25, 0xFF	; 255
     de0:	08 95       	ret

00000de2 <iqGetTimeout>:
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	8b 01       	movw	r16, r22
     dee:	f8 94       	cli
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <iqGetTimeout+0x1a>
     df2:	b8 01       	movw	r22, r16
     df4:	ce 01       	movw	r24, r28
     df6:	ee dd       	rcall	.-1060   	; 0x9d4 <chThdEnqueueTimeoutS>
     df8:	97 fd       	sbrc	r25, 7
     dfa:	27 c0       	rjmp	.+78     	; 0xe4a <iqGetTimeout+0x68>
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	89 2b       	or	r24, r25
     e02:	b9 f3       	breq	.-18     	; 0xdf2 <iqGetTimeout+0x10>
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	9d 83       	std	Y+5, r25	; 0x05
     e0c:	8c 83       	std	Y+4, r24	; 0x04
     e0e:	ec 85       	ldd	r30, Y+12	; 0x0c
     e10:	fd 85       	ldd	r31, Y+13	; 0x0d
     e12:	cf 01       	movw	r24, r30
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	9d 87       	std	Y+13, r25	; 0x0d
     e18:	8c 87       	std	Y+12, r24	; 0x0c
     e1a:	10 81       	ld	r17, Z
     e1c:	28 85       	ldd	r18, Y+8	; 0x08
     e1e:	39 85       	ldd	r19, Y+9	; 0x09
     e20:	82 17       	cp	r24, r18
     e22:	93 07       	cpc	r25, r19
     e24:	20 f0       	brcs	.+8      	; 0xe2e <iqGetTimeout+0x4c>
     e26:	8e 81       	ldd	r24, Y+6	; 0x06
     e28:	9f 81       	ldd	r25, Y+7	; 0x07
     e2a:	9d 87       	std	Y+13, r25	; 0x0d
     e2c:	8c 87       	std	Y+12, r24	; 0x0c
     e2e:	ee 85       	ldd	r30, Y+14	; 0x0e
     e30:	ff 85       	ldd	r31, Y+15	; 0x0f
     e32:	30 97       	sbiw	r30, 0x00	; 0
     e34:	11 f0       	breq	.+4      	; 0xe3a <iqGetTimeout+0x58>
     e36:	ce 01       	movw	r24, r28
     e38:	09 95       	icall
     e3a:	78 94       	sei
     e3c:	81 2f       	mov	r24, r17
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret
     e4a:	78 94       	sei
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <iqReadTimeout>:
     e56:	6f 92       	push	r6
     e58:	7f 92       	push	r7
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	6c 01       	movw	r12, r24
     e74:	7b 01       	movw	r14, r22
     e76:	3a 01       	movw	r6, r20
     e78:	49 01       	movw	r8, r18
     e7a:	fc 01       	movw	r30, r24
     e7c:	a6 84       	ldd	r10, Z+14	; 0x0e
     e7e:	b7 84       	ldd	r11, Z+15	; 0x0f
     e80:	f8 94       	cli
     e82:	41 15       	cp	r20, r1
     e84:	51 05       	cpc	r21, r1
     e86:	b9 f0       	breq	.+46     	; 0xeb6 <iqReadTimeout+0x60>
     e88:	8a 01       	movw	r16, r20
     e8a:	a8 01       	movw	r20, r16
     e8c:	b7 01       	movw	r22, r14
     e8e:	c6 01       	movw	r24, r12
     e90:	ad de       	rcall	.-678    	; 0xbec <iq_read>
     e92:	ec 01       	movw	r28, r24
     e94:	89 2b       	or	r24, r25
     e96:	21 f1       	breq	.+72     	; 0xee0 <iqReadTimeout+0x8a>
     e98:	a1 14       	cp	r10, r1
     e9a:	b1 04       	cpc	r11, r1
     e9c:	19 f0       	breq	.+6      	; 0xea4 <iqReadTimeout+0x4e>
     e9e:	c6 01       	movw	r24, r12
     ea0:	f5 01       	movw	r30, r10
     ea2:	09 95       	icall
     ea4:	78 94       	sei
     ea6:	0c 1b       	sub	r16, r28
     ea8:	1d 0b       	sbc	r17, r29
     eaa:	ec 0e       	add	r14, r28
     eac:	fd 1e       	adc	r15, r29
     eae:	f8 94       	cli
     eb0:	01 15       	cp	r16, r1
     eb2:	11 05       	cpc	r17, r1
     eb4:	51 f7       	brne	.-44     	; 0xe8a <iqReadTimeout+0x34>
     eb6:	00 e0       	ldi	r16, 0x00	; 0
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	78 94       	sei
     ebc:	c3 01       	movw	r24, r6
     ebe:	80 1b       	sub	r24, r16
     ec0:	91 0b       	sbc	r25, r17
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	9f 90       	pop	r9
     ed8:	8f 90       	pop	r8
     eda:	7f 90       	pop	r7
     edc:	6f 90       	pop	r6
     ede:	08 95       	ret
     ee0:	b4 01       	movw	r22, r8
     ee2:	c6 01       	movw	r24, r12
     ee4:	77 dd       	rcall	.-1298   	; 0x9d4 <chThdEnqueueTimeoutS>
     ee6:	89 2b       	or	r24, r25
     ee8:	81 f2       	breq	.-96     	; 0xe8a <iqReadTimeout+0x34>
     eea:	e7 cf       	rjmp	.-50     	; 0xeba <iqReadTimeout+0x64>

00000eec <oqObjectInit>:
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	fc 01       	movw	r30, r24
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
     ef6:	93 83       	std	Z+3, r25	; 0x03
     ef8:	82 83       	std	Z+2, r24	; 0x02
     efa:	55 83       	std	Z+5, r21	; 0x05
     efc:	44 83       	std	Z+4, r20	; 0x04
     efe:	77 83       	std	Z+7, r23	; 0x07
     f00:	66 83       	std	Z+6, r22	; 0x06
     f02:	75 87       	std	Z+13, r23	; 0x0d
     f04:	64 87       	std	Z+12, r22	; 0x0c
     f06:	73 87       	std	Z+11, r23	; 0x0b
     f08:	62 87       	std	Z+10, r22	; 0x0a
     f0a:	46 0f       	add	r20, r22
     f0c:	57 1f       	adc	r21, r23
     f0e:	51 87       	std	Z+9, r21	; 0x09
     f10:	40 87       	std	Z+8, r20	; 0x08
     f12:	37 87       	std	Z+15, r19	; 0x0f
     f14:	26 87       	std	Z+14, r18	; 0x0e
     f16:	11 8b       	std	Z+17, r17	; 0x11
     f18:	00 8b       	std	Z+16, r16	; 0x10
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <oqPutTimeout>:
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	f6 2e       	mov	r15, r22
     f2e:	8a 01       	movw	r16, r20
     f30:	f8 94       	cli
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <oqPutTimeout+0x1e>
     f34:	b8 01       	movw	r22, r16
     f36:	ce 01       	movw	r24, r28
     f38:	4d dd       	rcall	.-1382   	; 0x9d4 <chThdEnqueueTimeoutS>
     f3a:	97 fd       	sbrc	r25, 7
     f3c:	2a c0       	rjmp	.+84     	; 0xf92 <oqPutTimeout+0x72>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	89 2b       	or	r24, r25
     f44:	b9 f3       	breq	.-18     	; 0xf34 <oqPutTimeout+0x14>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	9d 83       	std	Y+5, r25	; 0x05
     f4e:	8c 83       	std	Y+4, r24	; 0x04
     f50:	ea 85       	ldd	r30, Y+10	; 0x0a
     f52:	fb 85       	ldd	r31, Y+11	; 0x0b
     f54:	cf 01       	movw	r24, r30
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	9b 87       	std	Y+11, r25	; 0x0b
     f5a:	8a 87       	std	Y+10, r24	; 0x0a
     f5c:	f0 82       	st	Z, r15
     f5e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f60:	3b 85       	ldd	r19, Y+11	; 0x0b
     f62:	88 85       	ldd	r24, Y+8	; 0x08
     f64:	99 85       	ldd	r25, Y+9	; 0x09
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	20 f0       	brcs	.+8      	; 0xf74 <oqPutTimeout+0x54>
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f 81       	ldd	r25, Y+7	; 0x07
     f70:	9b 87       	std	Y+11, r25	; 0x0b
     f72:	8a 87       	std	Y+10, r24	; 0x0a
     f74:	ee 85       	ldd	r30, Y+14	; 0x0e
     f76:	ff 85       	ldd	r31, Y+15	; 0x0f
     f78:	30 97       	sbiw	r30, 0x00	; 0
     f7a:	11 f0       	breq	.+4      	; 0xf80 <oqPutTimeout+0x60>
     f7c:	ce 01       	movw	r24, r28
     f7e:	09 95       	icall
     f80:	78 94       	sei
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	08 95       	ret
     f92:	78 94       	sei
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	08 95       	ret

00000fa0 <oqGetI>:
     fa0:	cf 93       	push	r28
     fa2:	fc 01       	movw	r30, r24
     fa4:	a4 85       	ldd	r26, Z+12	; 0x0c
     fa6:	b5 85       	ldd	r27, Z+13	; 0x0d
     fa8:	82 85       	ldd	r24, Z+10	; 0x0a
     faa:	93 85       	ldd	r25, Z+11	; 0x0b
     fac:	8a 17       	cp	r24, r26
     fae:	9b 07       	cpc	r25, r27
     fb0:	e1 f0       	breq	.+56     	; 0xfea <oqGetI+0x4a>
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	95 81       	ldd	r25, Z+5	; 0x05
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	95 83       	std	Z+5, r25	; 0x05
     fba:	84 83       	std	Z+4, r24	; 0x04
     fbc:	cd 01       	movw	r24, r26
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	95 87       	std	Z+13, r25	; 0x0d
     fc2:	84 87       	std	Z+12, r24	; 0x0c
     fc4:	cc 91       	ld	r28, X
     fc6:	20 85       	ldd	r18, Z+8	; 0x08
     fc8:	31 85       	ldd	r19, Z+9	; 0x09
     fca:	82 17       	cp	r24, r18
     fcc:	93 07       	cpc	r25, r19
     fce:	40 f4       	brcc	.+16     	; 0xfe0 <oqGetI+0x40>
     fd0:	cf 01       	movw	r24, r30
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	1b dd       	rcall	.-1482   	; 0xa0e <chThdDequeueNextI>
     fd8:	8c 2f       	mov	r24, r28
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret
     fe0:	86 81       	ldd	r24, Z+6	; 0x06
     fe2:	97 81       	ldd	r25, Z+7	; 0x07
     fe4:	95 87       	std	Z+13, r25	; 0x0d
     fe6:	84 87       	std	Z+12, r24	; 0x0c
     fe8:	f3 cf       	rjmp	.-26     	; 0xfd0 <oqGetI+0x30>
     fea:	84 81       	ldd	r24, Z+4	; 0x04
     fec:	95 81       	ldd	r25, Z+5	; 0x05
     fee:	89 2b       	or	r24, r25
     ff0:	01 f3       	breq	.-64     	; 0xfb2 <oqGetI+0x12>
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	9f ef       	ldi	r25, 0xFF	; 255
     ff6:	f2 cf       	rjmp	.-28     	; 0xfdc <oqGetI+0x3c>

00000ff8 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     ff8:	6f 92       	push	r6
     ffa:	7f 92       	push	r7
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	6c 01       	movw	r12, r24
    1016:	7b 01       	movw	r14, r22
    1018:	3a 01       	movw	r6, r20
    101a:	49 01       	movw	r8, r18
  qnotify_t nfy = oqp->q_notify;
    101c:	fc 01       	movw	r30, r24
    101e:	a6 84       	ldd	r10, Z+14	; 0x0e
    1020:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1022:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
    1024:	41 15       	cp	r20, r1
    1026:	51 05       	cpc	r21, r1
    1028:	b9 f0       	breq	.+46     	; 0x1058 <oqWriteTimeout+0x60>
    102a:	8a 01       	movw	r16, r20
    size_t done;

    done = oq_write(oqp, bp, n);
    102c:	a8 01       	movw	r20, r16
    102e:	b7 01       	movw	r22, r14
    1030:	c6 01       	movw	r24, r12
    1032:	37 de       	rcall	.-914    	; 0xca2 <oq_write>
    1034:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
    1036:	89 2b       	or	r24, r25
    1038:	21 f1       	breq	.+72     	; 0x1082 <oqWriteTimeout+0x8a>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
    103a:	a1 14       	cp	r10, r1
    103c:	b1 04       	cpc	r11, r1
    103e:	19 f0       	breq	.+6      	; 0x1046 <oqWriteTimeout+0x4e>
        nfy(oqp);
    1040:	c6 01       	movw	r24, r12
    1042:	f5 01       	movw	r30, r10
    1044:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1046:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
    1048:	0c 1b       	sub	r16, r28
    104a:	1d 0b       	sbc	r17, r29
      bp += done;
    104c:	ec 0e       	add	r14, r28
    104e:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1050:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
    1052:	01 15       	cp	r16, r1
    1054:	11 05       	cpc	r17, r1
    1056:	51 f7       	brne	.-44     	; 0x102c <oqWriteTimeout+0x34>
    1058:	00 e0       	ldi	r16, 0x00	; 0
    105a:	10 e0       	ldi	r17, 0x00	; 0
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    105c:	78 94       	sei
    }
  }

  osalSysUnlock();
  return max - n;
}
    105e:	c3 01       	movw	r24, r6
    1060:	80 1b       	sub	r24, r16
    1062:	91 0b       	sbc	r25, r17
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	7f 90       	pop	r7
    107e:	6f 90       	pop	r6
    1080:	08 95       	ret
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
    1082:	b4 01       	movw	r22, r8
    1084:	c6 01       	movw	r24, r12
    1086:	a6 dc       	rcall	.-1716   	; 0x9d4 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
    1088:	89 2b       	or	r24, r25
    108a:	81 f2       	breq	.-96     	; 0x102c <oqWriteTimeout+0x34>
    108c:	e7 cf       	rjmp	.-50     	; 0x105c <oqWriteTimeout+0x64>

0000108e <adcInit>:
  adc_lld_stop(adcp);
  adcp->config = NULL;
  adcp->state  = ADC_STOP;

  osalSysUnlock();
}
    108e:	db c1       	rjmp	.+950    	; 0x1446 <adc_lld_init>

00001090 <adcObjectInit>:
    1090:	fc 01       	movw	r30, r24
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 83       	st	Z, r24
    1096:	12 82       	std	Z+2, r1	; 0x02
    1098:	11 82       	std	Z+1, r1	; 0x01
    109a:	14 82       	std	Z+4, r1	; 0x04
    109c:	13 82       	std	Z+3, r1	; 0x03
    109e:	16 82       	std	Z+6, r1	; 0x06
    10a0:	15 82       	std	Z+5, r1	; 0x05
    10a2:	10 86       	std	Z+8, r1	; 0x08
    10a4:	17 82       	std	Z+7, r1	; 0x07
    10a6:	12 86       	std	Z+10, r1	; 0x0a
    10a8:	11 86       	std	Z+9, r1	; 0x09
    10aa:	cf 01       	movw	r24, r30
    10ac:	0b 96       	adiw	r24, 0x0b	; 11
    10ae:	c8 cc       	rjmp	.-1648   	; 0xa40 <chMtxObjectInit>

000010b0 <adcStart>:
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	ec 01       	movw	r28, r24
    10b6:	f8 94       	cli
    10b8:	7a 83       	std	Y+2, r23	; 0x02
    10ba:	69 83       	std	Y+1, r22	; 0x01
    10bc:	cd d1       	rcall	.+922    	; 0x1458 <adc_lld_start>
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	88 83       	st	Y, r24
    10c2:	78 94       	sei
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <adcStartConversion>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    10ca:	f8 94       	cli
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
    10cc:	fc 01       	movw	r30, r24
    10ce:	54 83       	std	Z+4, r21	; 0x04
    10d0:	43 83       	std	Z+3, r20	; 0x03
  adcp->depth    = depth;
    10d2:	36 83       	std	Z+6, r19	; 0x06
    10d4:	25 83       	std	Z+5, r18	; 0x05
  adcp->grpp     = grpp;
    10d6:	70 87       	std	Z+8, r23	; 0x08
    10d8:	67 83       	std	Z+7, r22	; 0x07
  adcp->state    = ADC_ACTIVE;
    10da:	23 e0       	ldi	r18, 0x03	; 3
    10dc:	20 83       	st	Z, r18
  adc_lld_start_conversion(adcp);
    10de:	d5 d1       	rcall	.+938    	; 0x148a <adc_lld_start_conversion>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    10e0:	78 94       	sei
    10e2:	08 95       	ret

000010e4 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
    10e4:	05 96       	adiw	r24, 0x05	; 5
    10e6:	b7 ce       	rjmp	.-658    	; 0xe56 <iqReadTimeout>

000010e8 <_read>:
    10e8:	2f ef       	ldi	r18, 0xFF	; 255
    10ea:	3f ef       	ldi	r19, 0xFF	; 255
    10ec:	05 96       	adiw	r24, 0x05	; 5
    10ee:	b3 ce       	rjmp	.-666    	; 0xe56 <iqReadTimeout>

000010f0 <_writet>:
    10f0:	47 96       	adiw	r24, 0x17	; 23
    10f2:	82 cf       	rjmp	.-252    	; 0xff8 <oqWriteTimeout>

000010f4 <_write>:
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	3f ef       	ldi	r19, 0xFF	; 255
    10f8:	47 96       	adiw	r24, 0x17	; 23
    10fa:	7e cf       	rjmp	.-260    	; 0xff8 <oqWriteTimeout>

000010fc <_gett>:
    10fc:	05 96       	adiw	r24, 0x05	; 5
    10fe:	71 ce       	rjmp	.-798    	; 0xde2 <iqGetTimeout>

00001100 <_get>:
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	7f ef       	ldi	r23, 0xFF	; 255
    1104:	05 96       	adiw	r24, 0x05	; 5
    1106:	6d ce       	rjmp	.-806    	; 0xde2 <iqGetTimeout>

00001108 <_putt>:
    1108:	47 96       	adiw	r24, 0x17	; 23
    110a:	0a cf       	rjmp	.-492    	; 0xf20 <oqPutTimeout>

0000110c <_put>:
    110c:	4f ef       	ldi	r20, 0xFF	; 255
    110e:	5f ef       	ldi	r21, 0xFF	; 255
    1110:	47 96       	adiw	r24, 0x17	; 23
    1112:	06 cf       	rjmp	.-500    	; 0xf20 <oqPutTimeout>

00001114 <_ctl>:
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	08 95       	ret

0000111a <sdInit>:
    111a:	ae c2       	rjmp	.+1372   	; 0x1678 <sd_lld_init>

0000111c <sdObjectInit>:
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
    112a:	9b 01       	movw	r18, r22
    112c:	7a 01       	movw	r14, r20
    112e:	fc 01       	movw	r30, r24
    1130:	83 e3       	ldi	r24, 0x33	; 51
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	81 93       	st	Z+, r24
    1136:	91 93       	st	Z+, r25
    1138:	fb 83       	std	Y+3, r31	; 0x03
    113a:	ea 83       	std	Y+2, r30	; 0x02
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	8c 83       	std	Y+4, r24	; 0x04
    1140:	be 01       	movw	r22, r28
    1142:	67 5d       	subi	r22, 0xD7	; 215
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8e 01       	movw	r16, r28
    1148:	40 e1       	ldi	r20, 0x10	; 16
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	ce 01       	movw	r24, r28
    114e:	05 96       	adiw	r24, 0x05	; 5
    1150:	03 de       	rcall	.-1018   	; 0xd58 <iqObjectInit>
    1152:	be 01       	movw	r22, r28
    1154:	67 5c       	subi	r22, 0xC7	; 199
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	97 01       	movw	r18, r14
    115a:	40 e1       	ldi	r20, 0x10	; 16
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	ce 01       	movw	r24, r28
    1160:	47 96       	adiw	r24, 0x17	; 23
    1162:	c4 de       	rcall	.-632    	; 0xeec <oqObjectInit>
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	08 95       	ret

00001172 <sdStart>:
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
    1178:	f8 94       	cli
    117a:	85 d2       	rcall	.+1290   	; 0x1686 <sd_lld_start>
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	8c 83       	std	Y+4, r24	; 0x04
    1180:	78 94       	sei
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
    1190:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	89 2b       	or	r24, r25
    1198:	51 f0       	breq	.+20     	; 0x11ae <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    119a:	61 2f       	mov	r22, r17
    119c:	ce 01       	movw	r24, r28
    119e:	05 96       	adiw	r24, 0x05	; 5
    11a0:	f5 dd       	rcall	.-1046   	; 0xd8c <iqPutI>
    11a2:	97 fd       	sbrc	r25, 7
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    11ae:	64 e0       	ldi	r22, 0x04	; 4
    11b0:	ce 01       	movw	r24, r28
    11b2:	02 96       	adiw	r24, 0x02	; 2
    11b4:	63 dc       	rcall	.-1850   	; 0xa7c <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    11b6:	61 2f       	mov	r22, r17
    11b8:	ce 01       	movw	r24, r28
    11ba:	05 96       	adiw	r24, 0x05	; 5
    11bc:	e7 dd       	rcall	.-1074   	; 0xd8c <iqPutI>
    11be:	97 ff       	sbrs	r25, 7
    11c0:	f2 cf       	rjmp	.-28     	; 0x11a6 <sdIncomingDataI+0x1e>
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	ce 01       	movw	r24, r28
    11c6:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	56 cc       	rjmp	.-1876   	; 0xa7c <chEvtBroadcastFlagsI>

000011d0 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
    11da:	47 96       	adiw	r24, 0x17	; 23
    11dc:	e1 de       	rcall	.-574    	; 0xfa0 <oqGetI>
    11de:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
    11e0:	97 fd       	sbrc	r25, 7
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
    11e4:	ce 01       	movw	r24, r28
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret
    11f0:	68 e0       	ldi	r22, 0x08	; 8
    11f2:	c8 01       	movw	r24, r16
    11f4:	02 96       	adiw	r24, 0x02	; 2
    11f6:	42 dc       	rcall	.-1916   	; 0xa7c <chEvtBroadcastFlagsI>
    11f8:	ce 01       	movw	r24, r28
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
    1204:	08 95       	ret

00001206 <__vector_21>:
 */
void adc_lld_stop(ADCDriver *adcp) {

  if (adcp->state == ADC_READY) {
    /* Clock de-activation. */
    ADCSRA &= ~(1 << ADEN);
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	2f 93       	push	r18
    1222:	3f 93       	push	r19
    1224:	4f 93       	push	r20
    1226:	5f 93       	push	r21
    1228:	6f 93       	push	r22
    122a:	7f 93       	push	r23
    122c:	8f 93       	push	r24
    122e:	9f 93       	push	r25
    1230:	af 93       	push	r26
    1232:	bf 93       	push	r27
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <__avr_in_isr>
    1242:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1246:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    124a:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <ADCD1+0x3>
    124e:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <ADCD1+0x4>
    1252:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <ADCD1+0x13>
    1256:	f0 91 36 03 	lds	r31, 0x0336	; 0x800336 <ADCD1+0x14>
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	e2 0f       	add	r30, r18
    1260:	f3 1f       	adc	r31, r19
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	94 2b       	or	r25, r20
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	00 91 35 03 	lds	r16, 0x0335	; 0x800335 <ADCD1+0x13>
    126e:	10 91 36 03 	lds	r17, 0x0336	; 0x800336 <ADCD1+0x14>
    1272:	0f 5f       	subi	r16, 0xFF	; 255
    1274:	1f 4f       	sbci	r17, 0xFF	; 255
    1276:	10 93 36 03 	sts	0x0336, r17	; 0x800336 <ADCD1+0x14>
    127a:	00 93 35 03 	sts	0x0335, r16	; 0x800335 <ADCD1+0x13>
    127e:	a0 90 27 03 	lds	r10, 0x0327	; 0x800327 <ADCD1+0x5>
    1282:	b0 90 28 03 	lds	r11, 0x0328	; 0x800328 <ADCD1+0x6>
    1286:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <ADCD1+0x7>
    128a:	f0 91 2a 03 	lds	r31, 0x032A	; 0x80032a <ADCD1+0x8>
    128e:	6f 01       	movw	r12, r30
    1290:	61 81       	ldd	r22, Z+1	; 0x01
    1292:	72 81       	ldd	r23, Z+2	; 0x02
    1294:	a6 9e       	mul	r10, r22
    1296:	70 01       	movw	r14, r0
    1298:	a7 9e       	mul	r10, r23
    129a:	f0 0c       	add	r15, r0
    129c:	b6 9e       	mul	r11, r22
    129e:	f0 0c       	add	r15, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	c8 01       	movw	r24, r16
    12a4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__udivmodhi4>
    12a8:	ec 01       	movw	r28, r24
    12aa:	80 81       	ld	r24, Z
    12ac:	88 23       	and	r24, r24
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <__vector_21+0xac>
    12b0:	47 c0       	rjmp	.+142    	; 0x1340 <__vector_21+0x13a>
    12b2:	20 97       	sbiw	r28, 0x00	; 0
    12b4:	31 f4       	brne	.+12     	; 0x12c2 <__vector_21+0xbc>
    12b6:	b6 94       	lsr	r11
    12b8:	a7 94       	ror	r10
    12ba:	6a 15       	cp	r22, r10
    12bc:	7b 05       	cpc	r23, r11
    12be:	09 f4       	brne	.+2      	; 0x12c2 <__vector_21+0xbc>
    12c0:	96 c0       	rjmp	.+300    	; 0x13ee <__vector_21+0x1e8>
    12c2:	0e 15       	cp	r16, r14
    12c4:	1f 05       	cpc	r17, r15
    12c6:	09 f4       	brne	.+2      	; 0x12ca <__vector_21+0xc4>
    12c8:	6d c0       	rjmp	.+218    	; 0x13a4 <__vector_21+0x19e>
    12ca:	f6 01       	movw	r30, r12
    12cc:	95 81       	ldd	r25, Z+5	; 0x05
    12ce:	99 23       	and	r25, r25
    12d0:	59 f0       	breq	.+22     	; 0x12e8 <__vector_21+0xe2>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	90 ff       	sbrs	r25, 0
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <__vector_21+0xda>
    12d8:	cc 23       	and	r28, r28
    12da:	09 f4       	brne	.+2      	; 0x12de <__vector_21+0xd8>
    12dc:	59 c0       	rjmp	.+178    	; 0x1390 <__vector_21+0x18a>
    12de:	c1 50       	subi	r28, 0x01	; 1
    12e0:	96 95       	lsr	r25
    12e2:	2f 5f       	subi	r18, 0xFF	; 255
    12e4:	91 11       	cpse	r25, r1
    12e6:	f6 cf       	rjmp	.-20     	; 0x12d4 <__vector_21+0xce>
    12e8:	87 e0       	ldi	r24, 0x07	; 7
    12ea:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    12ee:	28 7f       	andi	r18, 0xF8	; 248
    12f0:	28 2b       	or	r18, r24
    12f2:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    12f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12fa:	80 64       	ori	r24, 0x40	; 64
    12fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1300:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__avr_in_isr>
    1304:	fe d9       	rcall	.-3076   	; 0x702 <chSchIsPreemptionRequired>
    1306:	81 11       	cpse	r24, r1
    1308:	0c da       	rcall	.-3048   	; 0x722 <chSchDoReschedule>
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	bf 91       	pop	r27
    1314:	af 91       	pop	r26
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	7f 91       	pop	r23
    131c:	6f 91       	pop	r22
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	bf 90       	pop	r11
    1334:	af 90       	pop	r10
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti
    1340:	0e 15       	cp	r16, r14
    1342:	1f 05       	cpc	r17, r15
    1344:	09 f0       	breq	.+2      	; 0x1348 <__vector_21+0x142>
    1346:	c1 cf       	rjmp	.-126    	; 0x12ca <__vector_21+0xc4>
    1348:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    134c:	8f 7b       	andi	r24, 0xBF	; 191
    134e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1352:	03 80       	ldd	r0, Z+3	; 0x03
    1354:	f4 81       	ldd	r31, Z+4	; 0x04
    1356:	e0 2d       	mov	r30, r0
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	09 f4       	brne	.+2      	; 0x135e <__vector_21+0x158>
    135c:	5e c0       	rjmp	.+188    	; 0x141a <__vector_21+0x214>
    135e:	84 e0       	ldi	r24, 0x04	; 4
    1360:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <ADCD1>
    1364:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <ADCD1+0x5>
    1368:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <ADCD1+0x6>
    136c:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <ADCD1+0x3>
    1370:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <ADCD1+0x4>
    1374:	82 e2       	ldi	r24, 0x22	; 34
    1376:	93 e0       	ldi	r25, 0x03	; 3
    1378:	09 95       	icall
    137a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <ADCD1>
    137e:	84 30       	cpi	r24, 0x04	; 4
    1380:	09 f4       	brne	.+2      	; 0x1384 <__vector_21+0x17e>
    1382:	4b c0       	rjmp	.+150    	; 0x141a <__vector_21+0x214>
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	8b e2       	ldi	r24, 0x2B	; 43
    138a:	93 e0       	ldi	r25, 0x03	; 3
    138c:	16 db       	rcall	.-2516   	; 0x9ba <chThdResumeI>
    138e:	b8 cf       	rjmp	.-144    	; 0x1300 <__vector_21+0xfa>
    1390:	82 2f       	mov	r24, r18
    1392:	87 70       	andi	r24, 0x07	; 7
    1394:	aa cf       	rjmp	.-172    	; 0x12ea <__vector_21+0xe4>
    1396:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <ADCD1+0x7>
    139a:	f0 91 2a 03 	lds	r31, 0x032A	; 0x80032a <ADCD1+0x8>
    139e:	80 81       	ld	r24, Z
    13a0:	88 23       	and	r24, r24
    13a2:	91 f2       	breq	.-92     	; 0x1348 <__vector_21+0x142>
    13a4:	23 81       	ldd	r18, Z+3	; 0x03
    13a6:	34 81       	ldd	r19, Z+4	; 0x04
    13a8:	21 15       	cp	r18, r1
    13aa:	31 05       	cpc	r19, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <__vector_21+0x1aa>
    13ae:	a8 cf       	rjmp	.-176    	; 0x1300 <__vector_21+0xfa>
    13b0:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <ADCD1+0x5>
    13b4:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <ADCD1+0x6>
    13b8:	42 30       	cpi	r20, 0x02	; 2
    13ba:	51 05       	cpc	r21, r1
    13bc:	d8 f1       	brcs	.+118    	; 0x1434 <__vector_21+0x22e>
    13be:	56 95       	lsr	r21
    13c0:	47 95       	ror	r20
    13c2:	61 81       	ldd	r22, Z+1	; 0x01
    13c4:	72 81       	ldd	r23, Z+2	; 0x02
    13c6:	66 0f       	add	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	64 9f       	mul	r22, r20
    13cc:	c0 01       	movw	r24, r0
    13ce:	65 9f       	mul	r22, r21
    13d0:	90 0d       	add	r25, r0
    13d2:	74 9f       	mul	r23, r20
    13d4:	90 0d       	add	r25, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <ADCD1+0x3>
    13dc:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <ADCD1+0x4>
    13e0:	68 0f       	add	r22, r24
    13e2:	79 1f       	adc	r23, r25
    13e4:	82 e2       	ldi	r24, 0x22	; 34
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    13e8:	f9 01       	movw	r30, r18
    13ea:	09 95       	icall
    13ec:	89 cf       	rjmp	.-238    	; 0x1300 <__vector_21+0xfa>
    13ee:	03 80       	ldd	r0, Z+3	; 0x03
    13f0:	f4 81       	ldd	r31, Z+4	; 0x04
    13f2:	e0 2d       	mov	r30, r0
    13f4:	30 97       	sbiw	r30, 0x00	; 0
    13f6:	c9 f0       	breq	.+50     	; 0x142a <__vector_21+0x224>
    13f8:	ab 01       	movw	r20, r22
    13fa:	b9 01       	movw	r22, r18
    13fc:	82 e2       	ldi	r24, 0x22	; 34
    13fe:	93 e0       	ldi	r25, 0x03	; 3
    1400:	09 95       	icall
    1402:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <ADCD1+0x13>
    1406:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <ADCD1+0x14>
    140a:	e8 16       	cp	r14, r24
    140c:	f9 06       	cpc	r15, r25
    140e:	19 f2       	breq	.-122    	; 0x1396 <__vector_21+0x190>
    1410:	c0 90 29 03 	lds	r12, 0x0329	; 0x800329 <ADCD1+0x7>
    1414:	d0 90 2a 03 	lds	r13, 0x032A	; 0x80032a <ADCD1+0x8>
    1418:	58 cf       	rjmp	.-336    	; 0x12ca <__vector_21+0xc4>
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <ADCD1>
    1420:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <ADCD1+0x8>
    1424:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <ADCD1+0x7>
    1428:	ad cf       	rjmp	.-166    	; 0x1384 <__vector_21+0x17e>
    142a:	0e 15       	cp	r16, r14
    142c:	1f 05       	cpc	r17, r15
    142e:	09 f0       	breq	.+2      	; 0x1432 <__vector_21+0x22c>
    1430:	4c cf       	rjmp	.-360    	; 0x12ca <__vector_21+0xc4>
    1432:	66 cf       	rjmp	.-308    	; 0x1300 <__vector_21+0xfa>
    1434:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <ADCD1+0x3>
    1438:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <ADCD1+0x4>
    143c:	82 e2       	ldi	r24, 0x22	; 34
    143e:	93 e0       	ldi	r25, 0x03	; 3
    1440:	f9 01       	movw	r30, r18
    1442:	09 95       	icall
    1444:	5d cf       	rjmp	.-326    	; 0x1300 <__vector_21+0xfa>

00001446 <adc_lld_init>:
    1446:	82 e2       	ldi	r24, 0x22	; 34
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	22 de       	rcall	.-956    	; 0x1090 <adcObjectInit>
    144c:	8f e0       	ldi	r24, 0x0F	; 15
    144e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1452:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1456:	08 95       	ret

00001458 <adc_lld_start>:
    1458:	dc 01       	movw	r26, r24
    145a:	2c 91       	ld	r18, X
    145c:	21 30       	cpi	r18, 0x01	; 1
    145e:	79 f0       	breq	.+30     	; 0x147e <adc_lld_start+0x26>
    1460:	dc 01       	movw	r26, r24
    1462:	11 96       	adiw	r26, 0x01	; 1
    1464:	ed 91       	ld	r30, X+
    1466:	fc 91       	ld	r31, X
    1468:	12 97       	sbiw	r26, 0x02	; 2
    146a:	30 97       	sbiw	r30, 0x00	; 0
    146c:	39 f0       	breq	.+14     	; 0x147c <adc_lld_start+0x24>
    146e:	80 81       	ld	r24, Z
    1470:	82 95       	swap	r24
    1472:	88 0f       	add	r24, r24
    1474:	88 0f       	add	r24, r24
    1476:	80 7c       	andi	r24, 0xC0	; 192
    1478:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    147c:	08 95       	ret
    147e:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1482:	20 68       	ori	r18, 0x80	; 128
    1484:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1488:	eb cf       	rjmp	.-42     	; 0x1460 <adc_lld_start+0x8>

0000148a <adc_lld_start_conversion>:
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {

  adcp->currentBufferPosition=0;
    148a:	dc 01       	movw	r26, r24
    148c:	54 96       	adiw	r26, 0x14	; 20
    148e:	1c 92       	st	X, r1
    1490:	1e 92       	st	-X, r1
    1492:	53 97       	sbiw	r26, 0x13	; 19

  setAdcChannel(getAdcChannelNumberFromMask(adcp->grpp->channelsMask,0));
    1494:	17 96       	adiw	r26, 0x07	; 7
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	18 97       	sbiw	r26, 0x08	; 8
    149c:	85 81       	ldd	r24, Z+5	; 0x05
 * @retval                    -1 in case of error.
 */
static size_t getAdcChannelNumberFromMask(uint8_t mask,
                                          uint8_t currentChannel) {

  for (uint8_t i = 0; mask > 0; i++) {
    149e:	88 23       	and	r24, r24
    14a0:	51 f0       	breq	.+20     	; 0x14b6 <adc_lld_start_conversion+0x2c>
    if (mask & 0x01) {
    14a2:	80 fd       	sbrc	r24, 0
    14a4:	18 c0       	rjmp	.+48     	; 0x14d6 <adc_lld_start_conversion+0x4c>
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <adc_lld_start_conversion+0x24>
    14aa:	80 fd       	sbrc	r24, 0
    14ac:	11 c0       	rjmp	.+34     	; 0x14d0 <adc_lld_start_conversion+0x46>
      if (!currentChannel)
        return i;
      currentChannel--;
    }
    mask >>= 1;
    14ae:	86 95       	lsr	r24
 * @retval                    -1 in case of error.
 */
static size_t getAdcChannelNumberFromMask(uint8_t mask,
                                          uint8_t currentChannel) {

  for (uint8_t i = 0; mask > 0; i++) {
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	81 11       	cpse	r24, r1
    14b4:	fa cf       	rjmp	.-12     	; 0x14aa <adc_lld_start_conversion+0x20>
    14b6:	87 e0       	ldi	r24, 0x07	; 7
 *
 * @param[in] channelNum  the channel number to set.
 */
static void setAdcChannel(uint8_t channelNum) {

  ADMUX = (ADMUX & 0xf8) | (channelNum & 0x07);
    14b8:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    14bc:	98 7f       	andi	r25, 0xF8	; 248
    14be:	98 2b       	or	r25, r24
    14c0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
void adc_lld_start_conversion(ADCDriver *adcp) {

  adcp->currentBufferPosition=0;

  setAdcChannel(getAdcChannelNumberFromMask(adcp->grpp->channelsMask,0));
  ADCSRA |= 1 << ADSC;
    14c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14c8:	80 64       	ori	r24, 0x40	; 64
    14ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14ce:	08 95       	ret
    14d0:	89 2f       	mov	r24, r25
    14d2:	87 70       	andi	r24, 0x07	; 7
    14d4:	f1 cf       	rjmp	.-30     	; 0x14b8 <adc_lld_start_conversion+0x2e>
 */
static size_t getAdcChannelNumberFromMask(uint8_t mask,
                                          uint8_t currentChannel) {

  for (uint8_t i = 0; mask > 0; i++) {
    if (mask & 0x01) {
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	ef cf       	rjmp	.-34     	; 0x14b8 <adc_lld_start_conversion+0x2e>

000014da <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    14da:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
    14dc:	80 81       	ld	r24, Z
    14de:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
    14e0:	81 81       	ldd	r24, Z+1	; 0x01
    14e2:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
    14e8:	83 81       	ldd	r24, Z+3	; 0x03
    14ea:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
    14ec:	84 81       	ldd	r24, Z+4	; 0x04
    14ee:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
    14f0:	85 81       	ldd	r24, Z+5	; 0x05
    14f2:	8a b9       	out	0x0a, r24	; 10
    14f4:	08 95       	ret

000014f6 <__vector_11>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    151e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1522:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__avr_in_isr>
    1526:	ed d8       	rcall	.-3622   	; 0x702 <chSchIsPreemptionRequired>
    1528:	81 11       	cpse	r24, r1
    152a:	fb d8       	rcall	.-3594   	; 0x722 <chSchDoReschedule>
    152c:	ff 91       	pop	r31
}
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <st_lld_init>:
    154e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source. */
  TCCR1A     = 0;
  TCCR1B     = _BV(WGM12);
    1552:	e1 e8       	ldi	r30, 0x81	; 129
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	88 e0       	ldi	r24, 0x08	; 8
    1558:	80 83       	st	Z, r24

  /* start disabled. */
  TCCR1C     = 0;
    155a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  OCR1A      = 0;
    155e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1562:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  TCNT1      = 0;
    1566:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    156a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */    
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
    1572:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  TCCR1B     = PRESCALER;
    1576:	85 e0       	ldi	r24, 0x05	; 5
    1578:	80 83       	st	Z, r24
    157a:	08 95       	ret

0000157c <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    157c:	e1 ec       	ldi	r30, 0xC1	; 193
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 62       	ori	r24, 0x20	; 32
    1584:	80 83       	st	Z, r24
    1586:	08 95       	ret

00001588 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	2f 93       	push	r18
    1594:	3f 93       	push	r19
    1596:	4f 93       	push	r20
    1598:	5f 93       	push	r21
    159a:	6f 93       	push	r22
    159c:	7f 93       	push	r23
    159e:	8f 93       	push	r24
    15a0:	9f 93       	push	r25
    15a2:	af 93       	push	r26
    15a4:	bf 93       	push	r27
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <__avr_in_isr>

  sra = UCSR0A;
    15b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    15b4:	98 2f       	mov	r25, r24
    15b6:	9c 71       	andi	r25, 0x1C	; 28
    15b8:	d9 f4       	brne	.+54     	; 0x15f0 <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    15ba:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    15be:	87 e3       	ldi	r24, 0x37	; 55
    15c0:	93 e0       	ldi	r25, 0x03	; 3
    15c2:	e2 dd       	rcall	.-1084   	; 0x1188 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    15c4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__avr_in_isr>
    15c8:	9c d8       	rcall	.-3784   	; 0x702 <chSchIsPreemptionRequired>
    15ca:	81 11       	cpse	r24, r1
    15cc:	aa d8       	rcall	.-3756   	; 0x722 <chSchDoReschedule>
}
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	bf 91       	pop	r27
    15d4:	af 91       	pop	r26
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	7f 91       	pop	r23
    15dc:	6f 91       	pop	r22
    15de:	5f 91       	pop	r21
    15e0:	4f 91       	pop	r20
    15e2:	3f 91       	pop	r19
    15e4:	2f 91       	pop	r18
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    15f0:	83 fd       	sbrc	r24, 3
    15f2:	09 c0       	rjmp	.+18     	; 0x1606 <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    15f4:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    15f6:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    15f8:	60 62       	ori	r22, 0x20	; 32
  if (sra & fe)
    15fa:	84 fd       	sbrc	r24, 4
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    15fc:	60 64       	ori	r22, 0x40	; 64
    15fe:	89 e3       	ldi	r24, 0x39	; 57
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	3c da       	rcall	.-2952   	; 0xa7c <chEvtBroadcastFlagsI>
    1604:	da cf       	rjmp	.-76     	; 0x15ba <__vector_18+0x32>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    1606:	60 e8       	ldi	r22, 0x80	; 128
    1608:	f6 cf       	rjmp	.-20     	; 0x15f6 <__vector_18+0x6e>

0000160a <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    1632:	87 e3       	ldi	r24, 0x37	; 55
    1634:	93 e0       	ldi	r25, 0x03	; 3
    1636:	cc dd       	rcall	.-1128   	; 0x11d0 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    1638:	97 fd       	sbrc	r25, 7
    163a:	18 c0       	rjmp	.+48     	; 0x166c <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    163c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  OSAL_IRQ_EPILOGUE();
    1640:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__avr_in_isr>
    1644:	5e d8       	rcall	.-3908   	; 0x702 <chSchIsPreemptionRequired>
    1646:	81 11       	cpse	r24, r1
    1648:	6c d8       	rcall	.-3880   	; 0x722 <chSchDoReschedule>
}
    164a:	ff 91       	pop	r31
    164c:	ef 91       	pop	r30
    164e:	bf 91       	pop	r27
    1650:	af 91       	pop	r26
    1652:	9f 91       	pop	r25
    1654:	8f 91       	pop	r24
    1656:	7f 91       	pop	r23
    1658:	6f 91       	pop	r22
    165a:	5f 91       	pop	r21
    165c:	4f 91       	pop	r20
    165e:	3f 91       	pop	r19
    1660:	2f 91       	pop	r18
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    166c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1670:	8f 7d       	andi	r24, 0xDF	; 223
    1672:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1676:	e4 cf       	rjmp	.-56     	; 0x1640 <__vector_19+0x36>

00001678 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    1678:	4e eb       	ldi	r20, 0xBE	; 190
    167a:	5a e0       	ldi	r21, 0x0A	; 10
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	87 e3       	ldi	r24, 0x37	; 55
    1682:	93 e0       	ldi	r25, 0x03	; 3
    1684:	4b cd       	rjmp	.-1386   	; 0x111c <sdObjectInit>

00001686 <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    1686:	61 15       	cp	r22, r1
    1688:	71 05       	cpc	r23, r1
    168a:	19 f1       	breq	.+70     	; 0x16d2 <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    168c:	87 53       	subi	r24, 0x37	; 55
    168e:	93 40       	sbci	r25, 0x03	; 3
    1690:	09 f0       	breq	.+2      	; 0x1694 <sd_lld_start+0xe>
    1692:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    1694:	fb 01       	movw	r30, r22
    1696:	80 81       	ld	r24, Z
    1698:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    169c:	81 81       	ldd	r24, Z+1	; 0x01
    169e:	8f 70       	andi	r24, 0x0F	; 15
    16a0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UCSR0A = (1 << U2X0);
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    16aa:	88 e9       	ldi	r24, 0x98	; 152
    16ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  switch (config->sc_bits_per_char) {
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	b9 f0       	breq	.+46     	; 0x16e4 <sd_lld_start+0x5e>
    16b6:	a0 f0       	brcs	.+40     	; 0x16e0 <sd_lld_start+0x5a>
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	71 f0       	breq	.+28     	; 0x16d8 <sd_lld_start+0x52>
    16bc:	84 30       	cpi	r24, 0x04	; 4
    16be:	71 f4       	brne	.+28     	; 0x16dc <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    16c0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    16c4:	84 60       	ori	r24, 0x04	; 4
    16c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    16ca:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    16cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    16d0:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    16d2:	67 e4       	ldi	r22, 0x47	; 71
    16d4:	71 e0       	ldi	r23, 0x01	; 1
    16d6:	da cf       	rjmp	.-76     	; 0x168c <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	f8 cf       	rjmp	.-16     	; 0x16cc <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    16dc:	86 e0       	ldi	r24, 0x06	; 6
    16de:	f6 cf       	rjmp	.-20     	; 0x16cc <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	f4 cf       	rjmp	.-24     	; 0x16cc <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	f2 cf       	rjmp	.-28     	; 0x16cc <sd_lld_start+0x46>

000016e8 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    16e8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  EIMSK  = 0x00;
    16ec:	1d ba       	out	0x1d, r1	; 29
    16ee:	08 95       	ret

000016f0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    16f0:	2f 92       	push	r2
    16f2:	3f 92       	push	r3
    16f4:	4f 92       	push	r4
    16f6:	5f 92       	push	r5
    16f8:	6f 92       	push	r6
    16fa:	7f 92       	push	r7
    16fc:	8f 92       	push	r8
    16fe:	9f 92       	push	r9
    1700:	af 92       	push	r10
    1702:	bf 92       	push	r11
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	a2 97       	sbiw	r28, 0x22	; 34
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	1c 01       	movw	r2, r24
    1726:	6b 01       	movw	r12, r22
    1728:	58 8f       	std	Y+24, r21	; 0x18
    172a:	4f 8b       	std	Y+23, r20	; 0x17
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    172c:	1e 8a       	std	Y+22, r1	; 0x16
    172e:	1d 8a       	std	Y+21, r1	; 0x15
    1730:	9e 01       	movw	r18, r28
    1732:	2e 5f       	subi	r18, 0xFE	; 254
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	3e 87       	std	Y+14, r19	; 0x0e
    1738:	2d 87       	std	Y+13, r18	; 0x0d
    173a:	ae 01       	movw	r20, r28
    173c:	4f 5f       	subi	r20, 0xFF	; 255
    173e:	5f 4f       	sbci	r21, 0xFF	; 255
    1740:	58 8b       	std	Y+16, r21	; 0x10
    1742:	4f 87       	std	Y+15, r20	; 0x0f
    1744:	24 1b       	sub	r18, r20
    1746:	35 0b       	sbc	r19, r21
    1748:	38 a3       	std	Y+32, r19	; 0x20
    174a:	2f 8f       	std	Y+31, r18	; 0x1f
    174c:	21 50       	subi	r18, 0x01	; 1
    174e:	31 09       	sbc	r19, r1
    1750:	3a a3       	std	Y+34, r19	; 0x22
    1752:	29 a3       	std	Y+33, r18	; 0x21
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1754:	ce 01       	movw	r24, r28
    1756:	0c 96       	adiw	r24, 0x0c	; 12
    1758:	9a 8b       	std	Y+18, r25	; 0x12
    175a:	89 8b       	std	Y+17, r24	; 0x11
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    175c:	86 01       	movw	r16, r12
    175e:	0f 5f       	subi	r16, 0xFF	; 255
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	d6 01       	movw	r26, r12
    1764:	6c 91       	ld	r22, X
    if (c == 0)
    1766:	66 23       	and	r22, r22
    1768:	b9 f0       	breq	.+46     	; 0x1798 <chvprintf+0xa8>
      return n;
    if (c != '%') {
    176a:	65 32       	cpi	r22, 0x25	; 37
    176c:	81 f1       	breq	.+96     	; 0x17ce <chvprintf+0xde>
      streamPut(chp, (uint8_t)c);
    176e:	d1 01       	movw	r26, r2
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	06 80       	ldd	r0, Z+6	; 0x06
    1776:	f7 81       	ldd	r31, Z+7	; 0x07
    1778:	e0 2d       	mov	r30, r0
    177a:	c1 01       	movw	r24, r2
    177c:	09 95       	icall
      n++;
    177e:	ed 89       	ldd	r30, Y+21	; 0x15
    1780:	fe 89       	ldd	r31, Y+22	; 0x16
    1782:	31 96       	adiw	r30, 0x01	; 1
    1784:	fe 8b       	std	Y+22, r31	; 0x16
    1786:	ed 8b       	std	Y+21, r30	; 0x15
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1788:	68 01       	movw	r12, r16
    178a:	86 01       	movw	r16, r12
    178c:	0f 5f       	subi	r16, 0xFF	; 255
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	d6 01       	movw	r26, r12
    1792:	6c 91       	ld	r22, X
    if (c == 0)
    1794:	61 11       	cpse	r22, r1
    1796:	e9 cf       	rjmp	.-46     	; 0x176a <chvprintf+0x7a>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    1798:	8d 89       	ldd	r24, Y+21	; 0x15
    179a:	9e 89       	ldd	r25, Y+22	; 0x16
    179c:	a2 96       	adiw	r28, 0x22	; 34
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	7f 90       	pop	r7
    17c2:	6f 90       	pop	r6
    17c4:	5f 90       	pop	r5
    17c6:	4f 90       	pop	r4
    17c8:	3f 90       	pop	r3
    17ca:	2f 90       	pop	r2
    17cc:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    17ce:	d6 01       	movw	r26, r12
    17d0:	11 96       	adiw	r26, 0x01	; 1
    17d2:	8c 91       	ld	r24, X
    17d4:	11 97       	sbiw	r26, 0x01	; 1
    17d6:	8d 32       	cpi	r24, 0x2D	; 45
    17d8:	09 f4       	brne	.+2      	; 0x17dc <chvprintf+0xec>
    17da:	ec c0       	rjmp	.+472    	; 0x19b4 <chvprintf+0x2c4>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    17dc:	1a 8e       	std	Y+26, r1	; 0x1a
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    17de:	80 33       	cpi	r24, 0x30	; 48
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <chvprintf+0xf4>
    17e2:	e1 c0       	rjmp	.+450    	; 0x19a6 <chvprintf+0x2b6>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    17e4:	20 e2       	ldi	r18, 0x20	; 32
    17e6:	29 8f       	std	Y+25, r18	; 0x19
    17e8:	a8 01       	movw	r20, r16
    17ea:	4f 5f       	subi	r20, 0xFF	; 255
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    17ee:	00 e0       	ldi	r16, 0x00	; 0
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	ef 89       	ldd	r30, Y+23	; 0x17
    17f4:	f8 8d       	ldd	r31, Y+24	; 0x18
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <chvprintf+0x12e>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    17f8:	90 81       	ld	r25, Z
    17fa:	32 96       	adiw	r30, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    17fc:	98 01       	movw	r18, r16
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	00 0f       	add	r16, r16
    1804:	11 1f       	adc	r17, r17
    1806:	00 0f       	add	r16, r16
    1808:	11 1f       	adc	r17, r17
    180a:	00 0f       	add	r16, r16
    180c:	11 1f       	adc	r17, r17
    180e:	02 0f       	add	r16, r18
    1810:	13 1f       	adc	r17, r19
    1812:	09 0f       	add	r16, r25
    1814:	11 1d       	adc	r17, r1
    1816:	4f 5f       	subi	r20, 0xFF	; 255
    1818:	5f 4f       	sbci	r21, 0xFF	; 255
    181a:	d6 01       	movw	r26, r12
    181c:	8c 91       	ld	r24, X
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    181e:	6a 01       	movw	r12, r20
      if (c >= '0' && c <= '9')
    1820:	90 ed       	ldi	r25, 0xD0	; 208
    1822:	98 0f       	add	r25, r24
    1824:	9a 30       	cpi	r25, 0x0A	; 10
    1826:	50 f3       	brcs	.-44     	; 0x17fc <chvprintf+0x10c>
        c -= '0';
      else if (c == '*')
    1828:	8a 32       	cpi	r24, 0x2A	; 42
    182a:	31 f3       	breq	.-52     	; 0x17f8 <chvprintf+0x108>
    182c:	f8 8f       	std	Y+24, r31	; 0x18
    182e:	ef 8b       	std	Y+23, r30	; 0x17
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    1834:	8e 32       	cpi	r24, 0x2E	; 46
    1836:	09 f4       	brne	.+2      	; 0x183a <chvprintf+0x14a>
    1838:	96 c0       	rjmp	.+300    	; 0x1966 <chvprintf+0x276>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    183a:	98 2f       	mov	r25, r24
    183c:	9f 7d       	andi	r25, 0xDF	; 223
    183e:	9c 34       	cpi	r25, 0x4C	; 76
    1840:	09 f4       	brne	.+2      	; 0x1844 <chvprintf+0x154>
    1842:	7e c0       	rjmp	.+252    	; 0x1940 <chvprintf+0x250>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    1844:	af eb       	ldi	r26, 0xBF	; 191
    1846:	a8 0f       	add	r26, r24
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	aa 31       	cpi	r26, 0x1A	; 26
    184c:	08 f0       	brcs	.+2      	; 0x1850 <chvprintf+0x160>
    184e:	90 e0       	ldi	r25, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    1850:	48 2f       	mov	r20, r24
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	fa 01       	movw	r30, r20
    1856:	e4 54       	subi	r30, 0x44	; 68
    1858:	f1 09       	sbc	r31, r1
    185a:	e5 33       	cpi	r30, 0x35	; 53
    185c:	f1 05       	cpc	r31, r1
    185e:	08 f4       	brcc	.+2      	; 0x1862 <chvprintf+0x172>
    1860:	b1 c0       	rjmp	.+354    	; 0x19c4 <chvprintf+0x2d4>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1866:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    1868:	89 a0       	ldd	r8, Y+33	; 0x21
    186a:	9a a0       	ldd	r9, Y+34	; 0x22
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    186c:	ae 01       	movw	r20, r28
    186e:	4f 5f       	subi	r20, 0xFF	; 255
    1870:	5f 4f       	sbci	r21, 0xFF	; 255
    1872:	7a 01       	movw	r14, r20
    1874:	58 01       	movw	r10, r16
    1876:	ae 1a       	sub	r10, r30
    1878:	bf 0a       	sbc	r11, r31
    187a:	b7 fc       	sbrc	r11, 7
    187c:	d9 c0       	rjmp	.+434    	; 0x1a30 <chvprintf+0x340>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    187e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1880:	51 11       	cpse	r21, r1
    1882:	5b c0       	rjmp	.+182    	; 0x193a <chvprintf+0x24a>
      width = -width;
    1884:	00 27       	eor	r16, r16
    1886:	11 27       	eor	r17, r17
    1888:	0a 19       	sub	r16, r10
    188a:	1b 09       	sbc	r17, r11
    if (width < 0) {
    188c:	09 f4       	brne	.+2      	; 0x1890 <chvprintf+0x1a0>
    188e:	5b c1       	rjmp	.+694    	; 0x1b46 <chvprintf+0x456>
      if (*s == '-' && filler == '0') {
    1890:	d7 01       	movw	r26, r14
    1892:	8c 91       	ld	r24, X
    1894:	8d 32       	cpi	r24, 0x2D	; 45
    1896:	09 f4       	brne	.+2      	; 0x189a <chvprintf+0x1aa>
    1898:	5f c1       	rjmp	.+702    	; 0x1b58 <chvprintf+0x468>
    189a:	79 8c       	ldd	r7, Y+25	; 0x19
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    189c:	d1 01       	movw	r26, r2
    189e:	ed 91       	ld	r30, X+
    18a0:	fc 91       	ld	r31, X
    18a2:	06 80       	ldd	r0, Z+6	; 0x06
    18a4:	f7 81       	ldd	r31, Z+7	; 0x07
    18a6:	e0 2d       	mov	r30, r0
    18a8:	67 2d       	mov	r22, r7
    18aa:	c1 01       	movw	r24, r2
    18ac:	09 95       	icall
        n++;
      } while (++width != 0);
    18ae:	0f 5f       	subi	r16, 0xFF	; 255
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	a1 f7       	brne	.-24     	; 0x189c <chvprintf+0x1ac>
    18b4:	2d 89       	ldd	r18, Y+21	; 0x15
    18b6:	3e 89       	ldd	r19, Y+22	; 0x16
    18b8:	2f 5f       	subi	r18, 0xFF	; 255
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	8a 19       	sub	r24, r10
    18c2:	9b 09       	sbc	r25, r11
    18c4:	a9 01       	movw	r20, r18
    18c6:	48 1b       	sub	r20, r24
    18c8:	59 0b       	sbc	r21, r25
    18ca:	5e 8b       	std	Y+22, r21	; 0x16
    18cc:	4d 8b       	std	Y+21, r20	; 0x15
    }
    while (--i >= 0) {
    18ce:	97 fc       	sbrc	r9, 7
    18d0:	45 cf       	rjmp	.-374    	; 0x175c <chvprintf+0x6c>
    18d2:	a1 2c       	mov	r10, r1
    18d4:	b1 2c       	mov	r11, r1
    18d6:	84 01       	movw	r16, r8
      streamPut(chp, (uint8_t)*s++);
    18d8:	f7 01       	movw	r30, r14
    18da:	61 91       	ld	r22, Z+
    18dc:	7f 01       	movw	r14, r30
    18de:	d1 01       	movw	r26, r2
    18e0:	ed 91       	ld	r30, X+
    18e2:	fc 91       	ld	r31, X
    18e4:	06 80       	ldd	r0, Z+6	; 0x06
    18e6:	f7 81       	ldd	r31, Z+7	; 0x07
    18e8:	e0 2d       	mov	r30, r0
    18ea:	c1 01       	movw	r24, r2
    18ec:	09 95       	icall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    18ee:	01 50       	subi	r16, 0x01	; 1
    18f0:	11 09       	sbc	r17, r1
    18f2:	90 f7       	brcc	.-28     	; 0x18d8 <chvprintf+0x1e8>
    18f4:	8d 89       	ldd	r24, Y+21	; 0x15
    18f6:	9e 89       	ldd	r25, Y+22	; 0x16
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	97 fc       	sbrc	r9, 7
    18fc:	2a c1       	rjmp	.+596    	; 0x1b52 <chvprintf+0x462>
    18fe:	f4 01       	movw	r30, r8
    1900:	e8 0f       	add	r30, r24
    1902:	f9 1f       	adc	r31, r25
    1904:	fe 8b       	std	Y+22, r31	; 0x16
    1906:	ed 8b       	std	Y+21, r30	; 0x15
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1908:	a1 14       	cp	r10, r1
    190a:	b1 04       	cpc	r11, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <chvprintf+0x220>
    190e:	26 cf       	rjmp	.-436    	; 0x175c <chvprintf+0x6c>
    1910:	85 01       	movw	r16, r10
    1912:	f9 8c       	ldd	r15, Y+25	; 0x19
      streamPut(chp, (uint8_t)filler);
    1914:	d1 01       	movw	r26, r2
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	06 80       	ldd	r0, Z+6	; 0x06
    191c:	f7 81       	ldd	r31, Z+7	; 0x07
    191e:	e0 2d       	mov	r30, r0
    1920:	6f 2d       	mov	r22, r15
    1922:	c1 01       	movw	r24, r2
    1924:	09 95       	icall
      n++;
      width--;
    1926:	01 50       	subi	r16, 0x01	; 1
    1928:	11 09       	sbc	r17, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    192a:	a1 f7       	brne	.-24     	; 0x1914 <chvprintf+0x224>
    192c:	ed 89       	ldd	r30, Y+21	; 0x15
    192e:	fe 89       	ldd	r31, Y+22	; 0x16
    1930:	ea 0d       	add	r30, r10
    1932:	fb 1d       	adc	r31, r11
    1934:	fe 8b       	std	Y+22, r31	; 0x16
    1936:	ed 8b       	std	Y+21, r30	; 0x15
    1938:	11 cf       	rjmp	.-478    	; 0x175c <chvprintf+0x6c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    193a:	97 fe       	sbrs	r9, 7
    193c:	cc cf       	rjmp	.-104    	; 0x18d6 <chvprintf+0x1e6>
    193e:	e4 cf       	rjmp	.-56     	; 0x1908 <chvprintf+0x218>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
    1940:	d6 01       	movw	r26, r12
    1942:	4c 91       	ld	r20, X
    1944:	44 23       	and	r20, r20
    1946:	09 f4       	brne	.+2      	; 0x194a <chvprintf+0x25a>
    1948:	8c cf       	rjmp	.-232    	; 0x1862 <chvprintf+0x172>
        c = *fmt++;
    194a:	ff ef       	ldi	r31, 0xFF	; 255
    194c:	cf 1a       	sub	r12, r31
    194e:	df 0a       	sbc	r13, r31
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1950:	84 2f       	mov	r24, r20
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	fc 01       	movw	r30, r24
    1956:	e4 54       	subi	r30, 0x44	; 68
    1958:	f1 09       	sbc	r31, r1
    195a:	e5 33       	cpi	r30, 0x35	; 53
    195c:	f1 05       	cpc	r31, r1
    195e:	08 f4       	brcc	.+2      	; 0x1962 <chvprintf+0x272>
    1960:	f5 c0       	rjmp	.+490    	; 0x1b4c <chvprintf+0x45c>
    1962:	84 2f       	mov	r24, r20
    1964:	7e cf       	rjmp	.-260    	; 0x1862 <chvprintf+0x172>
    1966:	df 01       	movw	r26, r30
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <chvprintf+0x298>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    196a:	9c 91       	ld	r25, X
    196c:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    196e:	a9 01       	movw	r20, r18
    1970:	44 0f       	add	r20, r20
    1972:	55 1f       	adc	r21, r21
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	22 0f       	add	r18, r18
    197a:	33 1f       	adc	r19, r19
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	24 0f       	add	r18, r20
    1982:	35 1f       	adc	r19, r21
        precision += c;
    1984:	29 0f       	add	r18, r25
    1986:	31 1d       	adc	r19, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    1988:	ef ef       	ldi	r30, 0xFF	; 255
    198a:	ce 1a       	sub	r12, r30
    198c:	de 0a       	sbc	r13, r30
    198e:	f6 01       	movw	r30, r12
    1990:	31 97       	sbiw	r30, 0x01	; 1
    1992:	80 81       	ld	r24, Z
        if (c >= '0' && c <= '9')
    1994:	90 ed       	ldi	r25, 0xD0	; 208
    1996:	98 0f       	add	r25, r24
    1998:	9a 30       	cpi	r25, 0x0A	; 10
    199a:	48 f3       	brcs	.-46     	; 0x196e <chvprintf+0x27e>
          c -= '0';
        else if (c == '*')
    199c:	8a 32       	cpi	r24, 0x2A	; 42
    199e:	29 f3       	breq	.-54     	; 0x196a <chvprintf+0x27a>
    19a0:	b8 8f       	std	Y+24, r27	; 0x18
    19a2:	af 8b       	std	Y+23, r26	; 0x17
    19a4:	4a cf       	rjmp	.-364    	; 0x183a <chvprintf+0x14a>
    19a6:	f8 01       	movw	r30, r16
    19a8:	81 81       	ldd	r24, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    19aa:	0f 5f       	subi	r16, 0xFF	; 255
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    19ae:	f0 e3       	ldi	r31, 0x30	; 48
    19b0:	f9 8f       	std	Y+25, r31	; 0x19
    19b2:	1a cf       	rjmp	.-460    	; 0x17e8 <chvprintf+0xf8>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    19b4:	86 01       	movw	r16, r12
    19b6:	0e 5f       	subi	r16, 0xFE	; 254
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	12 96       	adiw	r26, 0x02	; 2
    19bc:	8c 91       	ld	r24, X
      left_align = TRUE;
    19be:	b1 e0       	ldi	r27, 0x01	; 1
    19c0:	ba 8f       	std	Y+26, r27	; 0x1a
    19c2:	0d cf       	rjmp	.-486    	; 0x17de <chvprintf+0xee>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    19c4:	ec 5c       	subi	r30, 0xCC	; 204
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	1c c5       	rjmp	.+2616   	; 0x2402 <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	02 96       	adiw	r24, 0x02	; 2
    19d0:	af 89       	ldd	r26, Y+23	; 0x17
    19d2:	b8 8d       	ldd	r27, Y+24	; 0x18
    19d4:	ed 90       	ld	r14, X+
    19d6:	fc 90       	ld	r15, X
    19d8:	e1 14       	cp	r14, r1
    19da:	f1 04       	cpc	r15, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <chvprintf+0x2f0>
    19de:	6a c1       	rjmp	.+724    	; 0x1cb4 <chvprintf+0x5c4>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    19e0:	f7 01       	movw	r30, r14
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    19e2:	21 15       	cp	r18, r1
    19e4:	31 05       	cpc	r19, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <chvprintf+0x2fa>
    19e8:	d1 c0       	rjmp	.+418    	; 0x1b8c <chvprintf+0x49c>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    19ea:	40 81       	ld	r20, Z
    19ec:	44 23       	and	r20, r20
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <chvprintf+0x302>
    19f0:	66 c1       	rjmp	.+716    	; 0x1cbe <chvprintf+0x5ce>
    19f2:	21 50       	subi	r18, 0x01	; 1
    19f4:	31 09       	sbc	r19, r1
    19f6:	f7 01       	movw	r30, r14
    19f8:	31 96       	adiw	r30, 0x01	; 1
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <chvprintf+0x316>
    19fc:	21 50       	subi	r18, 0x01	; 1
    19fe:	31 09       	sbc	r19, r1
    1a00:	08 f4       	brcc	.+2      	; 0x1a04 <chvprintf+0x314>
    1a02:	4d c1       	rjmp	.+666    	; 0x1c9e <chvprintf+0x5ae>
    1a04:	fb 01       	movw	r30, r22
    1a06:	bf 01       	movw	r22, r30
    1a08:	6f 5f       	subi	r22, 0xFF	; 255
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	40 81       	ld	r20, Z
    1a0e:	41 11       	cpse	r20, r1
    1a10:	f5 cf       	rjmp	.-22     	; 0x19fc <chvprintf+0x30c>
    1a12:	ee 19       	sub	r30, r14
    1a14:	ff 09       	sbc	r31, r15
    1a16:	4f 01       	movw	r8, r30
    1a18:	21 e0       	ldi	r18, 0x01	; 1
    1a1a:	82 1a       	sub	r8, r18
    1a1c:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1a1e:	98 8f       	std	Y+24, r25	; 0x18
    1a20:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1a22:	30 e2       	ldi	r19, 0x20	; 32
    1a24:	39 8f       	std	Y+25, r19	; 0x19
    1a26:	58 01       	movw	r10, r16
    1a28:	ae 1a       	sub	r10, r30
    1a2a:	bf 0a       	sbc	r11, r31
    1a2c:	b7 fe       	sbrs	r11, 7
    1a2e:	27 cf       	rjmp	.-434    	; 0x187e <chvprintf+0x18e>
    1a30:	a1 2c       	mov	r10, r1
    1a32:	b1 2c       	mov	r11, r1
    1a34:	24 cf       	rjmp	.-440    	; 0x187e <chvprintf+0x18e>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1a36:	af 89       	ldd	r26, Y+23	; 0x17
    1a38:	b8 8d       	ldd	r27, Y+24	; 0x18
    1a3a:	8c 91       	ld	r24, X
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1a40:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    1a42:	89 a0       	ldd	r8, Y+33	; 0x21
    1a44:	9a a0       	ldd	r9, Y+34	; 0x22

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1a46:	12 96       	adiw	r26, 0x02	; 2
    1a48:	b8 8f       	std	Y+24, r27	; 0x18
    1a4a:	af 8b       	std	Y+23, r26	; 0x17
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    1a4c:	b0 e2       	ldi	r27, 0x20	; 32
    1a4e:	b9 8f       	std	Y+25, r27	; 0x19
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1a50:	9e 01       	movw	r18, r28
    1a52:	2f 5f       	subi	r18, 0xFF	; 255
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	79 01       	movw	r14, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    1a58:	0d cf       	rjmp	.-486    	; 0x1874 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    1a5c:	4a e0       	ldi	r20, 0x0A	; 10
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1a64:	91 11       	cpse	r25, r1
    1a66:	64 c0       	rjmp	.+200    	; 0x1b30 <chvprintf+0x440>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    1a68:	ef 89       	ldd	r30, Y+23	; 0x17
    1a6a:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a6c:	80 80       	ld	r8, Z
    1a6e:	91 80       	ldd	r9, Z+1	; 0x01
    1a70:	a1 2c       	mov	r10, r1
    1a72:	b1 2c       	mov	r11, r1
    1a74:	32 96       	adiw	r30, 0x02	; 2
    1a76:	f8 8f       	std	Y+24, r31	; 0x18
    1a78:	ef 8b       	std	Y+23, r30	; 0x17
    1a7a:	24 01       	movw	r4, r8
    1a7c:	35 01       	movw	r6, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1a7e:	9e 01       	movw	r18, r28
    1a80:	24 5f       	subi	r18, 0xF4	; 244
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	3c 8b       	std	Y+20, r19	; 0x14
    1a86:	2b 8b       	std	Y+19, r18	; 0x13
    1a88:	1c 8f       	std	Y+28, r17	; 0x1c
    1a8a:	0b 8f       	std	Y+27, r16	; 0x1b
    1a8c:	7a 01       	movw	r14, r20
    1a8e:	8b 01       	movw	r16, r22
    1a90:	de 8e       	std	Y+30, r13	; 0x1e
    1a92:	cd 8e       	std	Y+29, r12	; 0x1d
  do {
    i = (int)(l % radix);
    1a94:	c5 01       	movw	r24, r10
    1a96:	b4 01       	movw	r22, r8
    1a98:	a8 01       	movw	r20, r16
    1a9a:	97 01       	movw	r18, r14
    1a9c:	96 d4       	rcall	.+2348   	; 0x23ca <__divmodsi4>
    i += '0';
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	20 5d       	subi	r18, 0xD0	; 208
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i > '9')
    1aa4:	2a 33       	cpi	r18, 0x3A	; 58
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	14 f0       	brlt	.+4      	; 0x1aae <chvprintf+0x3be>
      i += 'A' - '0' - 10;
    1aaa:	29 5f       	subi	r18, 0xF9	; 249
    1aac:	3f 4f       	sbci	r19, 0xFF	; 255
    *--q = i;
    1aae:	d2 2e       	mov	r13, r18
    1ab0:	ab 89       	ldd	r26, Y+19	; 0x13
    1ab2:	bc 89       	ldd	r27, Y+20	; 0x14
    1ab4:	2e 93       	st	-X, r18
    1ab6:	bc 8b       	std	Y+20, r27	; 0x14
    1ab8:	ab 8b       	std	Y+19, r26	; 0x13
    l /= radix;
    1aba:	c5 01       	movw	r24, r10
    1abc:	b4 01       	movw	r22, r8
    1abe:	a8 01       	movw	r20, r16
    1ac0:	97 01       	movw	r18, r14
    1ac2:	83 d4       	rcall	.+2310   	; 0x23ca <__divmodsi4>
    1ac4:	49 01       	movw	r8, r18
    1ac6:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    1ac8:	c3 01       	movw	r24, r6
    1aca:	b2 01       	movw	r22, r4
    1acc:	a8 01       	movw	r20, r16
    1ace:	97 01       	movw	r18, r14
    1ad0:	7c d4       	rcall	.+2296   	; 0x23ca <__divmodsi4>
    1ad2:	29 01       	movw	r4, r18
    1ad4:	3a 01       	movw	r6, r20
    1ad6:	23 2b       	or	r18, r19
    1ad8:	24 2b       	or	r18, r20
    1ada:	25 2b       	or	r18, r21
    1adc:	d9 f6       	brne	.-74     	; 0x1a94 <chvprintf+0x3a4>
    1ade:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1ae0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1ae2:	fd 2c       	mov	r15, r13
    1ae4:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1ae6:	de 8c       	ldd	r13, Y+30	; 0x1e

  i = (int)(p + MAX_FILLER - q);
    1ae8:	89 89       	ldd	r24, Y+17	; 0x11
    1aea:	9a 89       	ldd	r25, Y+18	; 0x12
    1aec:	eb 89       	ldd	r30, Y+19	; 0x13
    1aee:	fc 89       	ldd	r31, Y+20	; 0x14
    1af0:	8e 1b       	sub	r24, r30
    1af2:	9f 0b       	sbc	r25, r31
    1af4:	de 01       	movw	r26, r28
    1af6:	11 96       	adiw	r26, 0x01	; 1
    1af8:	31 96       	adiw	r30, 0x01	; 1
    1afa:	9d 01       	movw	r18, r26
    1afc:	28 0f       	add	r18, r24
    1afe:	39 1f       	adc	r19, r25
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <chvprintf+0x414>
    1b02:	f1 90       	ld	r15, Z+
  do
    *p++ = *q++;
    1b04:	fd 92       	st	X+, r15
  while (--i);
    1b06:	a2 17       	cp	r26, r18
    1b08:	b3 07       	cpc	r27, r19
    1b0a:	d9 f7       	brne	.-10     	; 0x1b02 <chvprintf+0x412>
    1b0c:	4c 01       	movw	r8, r24
    1b0e:	f1 e0       	ldi	r31, 0x01	; 1
    1b10:	8f 1a       	sub	r8, r31
    1b12:	91 08       	sbc	r9, r1
    1b14:	fc 01       	movw	r30, r24
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1b16:	9e 01       	movw	r18, r28
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	79 01       	movw	r14, r18
    1b1e:	aa ce       	rjmp	.-684    	; 0x1874 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	48 e0       	ldi	r20, 0x08	; 8
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1b2a:	99 23       	and	r25, r25
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <chvprintf+0x440>
    1b2e:	9c cf       	rjmp	.-200    	; 0x1a68 <chvprintf+0x378>
        l = va_arg(ap, unsigned long);
    1b30:	af 89       	ldd	r26, Y+23	; 0x17
    1b32:	b8 8d       	ldd	r27, Y+24	; 0x18
    1b34:	8d 90       	ld	r8, X+
    1b36:	9d 90       	ld	r9, X+
    1b38:	ad 90       	ld	r10, X+
    1b3a:	bc 90       	ld	r11, X
    1b3c:	13 97       	sbiw	r26, 0x03	; 3
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	b8 8f       	std	Y+24, r27	; 0x18
    1b42:	af 8b       	std	Y+23, r26	; 0x17
    1b44:	9a cf       	rjmp	.-204    	; 0x1a7a <chvprintf+0x38a>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1b46:	97 fe       	sbrs	r9, 7
    1b48:	c4 ce       	rjmp	.-632    	; 0x18d2 <chvprintf+0x1e2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1b4a:	08 ce       	rjmp	.-1008   	; 0x175c <chvprintf+0x6c>
    1b4c:	e7 59       	subi	r30, 0x97	; 151
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	58 c4       	rjmp	.+2224   	; 0x2402 <__tablejump2__>
    1b52:	81 2c       	mov	r8, r1
    1b54:	91 2c       	mov	r9, r1
    1b56:	d3 ce       	rjmp	.-602    	; 0x18fe <chvprintf+0x20e>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    1b58:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b5a:	b0 33       	cpi	r27, 0x30	; 48
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <chvprintf+0x470>
    1b5e:	9d ce       	rjmp	.-710    	; 0x189a <chvprintf+0x1aa>
        streamPut(chp, (uint8_t)*s++);
    1b60:	ef ef       	ldi	r30, 0xFF	; 255
    1b62:	ee 1a       	sub	r14, r30
    1b64:	fe 0a       	sbc	r15, r30
    1b66:	d1 01       	movw	r26, r2
    1b68:	ed 91       	ld	r30, X+
    1b6a:	fc 91       	ld	r31, X
    1b6c:	06 80       	ldd	r0, Z+6	; 0x06
    1b6e:	f7 81       	ldd	r31, Z+7	; 0x07
    1b70:	e0 2d       	mov	r30, r0
    1b72:	6d e2       	ldi	r22, 0x2D	; 45
    1b74:	c1 01       	movw	r24, r2
    1b76:	09 95       	icall
        n++;
    1b78:	ed 89       	ldd	r30, Y+21	; 0x15
    1b7a:	fe 89       	ldd	r31, Y+22	; 0x16
    1b7c:	31 96       	adiw	r30, 0x01	; 1
    1b7e:	fe 8b       	std	Y+22, r31	; 0x16
    1b80:	ed 8b       	std	Y+21, r30	; 0x15
    1b82:	f1 e0       	ldi	r31, 0x01	; 1
    1b84:	8f 1a       	sub	r8, r31
    1b86:	91 08       	sbc	r9, r1
    1b88:	79 8c       	ldd	r7, Y+25	; 0x19
    1b8a:	88 ce       	rjmp	.-752    	; 0x189c <chvprintf+0x1ac>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1b8c:	20 81       	ld	r18, Z
    1b8e:	22 23       	and	r18, r18
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <chvprintf+0x4a4>
    1b92:	95 c0       	rjmp	.+298    	; 0x1cbe <chvprintf+0x5ce>
    1b94:	2e ef       	ldi	r18, 0xFE	; 254
    1b96:	3f e7       	ldi	r19, 0x7F	; 127
    1b98:	2e cf       	rjmp	.-420    	; 0x19f6 <chvprintf+0x306>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1b9a:	40 e1       	ldi	r20, 0x10	; 16
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	60 cf       	rjmp	.-320    	; 0x1a64 <chvprintf+0x374>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    1ba4:	aa 31       	cpi	r26, 0x1A	; 26
    1ba6:	08 f4       	brcc	.+2      	; 0x1baa <chvprintf+0x4ba>
    1ba8:	59 c0       	rjmp	.+178    	; 0x1c5c <chvprintf+0x56c>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    1baa:	ef 89       	ldd	r30, Y+23	; 0x17
    1bac:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bae:	80 80       	ld	r8, Z
    1bb0:	91 80       	ldd	r9, Z+1	; 0x01
    1bb2:	09 2c       	mov	r0, r9
    1bb4:	00 0c       	add	r0, r0
    1bb6:	aa 08       	sbc	r10, r10
    1bb8:	bb 08       	sbc	r11, r11
    1bba:	32 96       	adiw	r30, 0x02	; 2
    1bbc:	f8 8f       	std	Y+24, r31	; 0x18
    1bbe:	ef 8b       	std	Y+23, r30	; 0x17
      if (l < 0) {
    1bc0:	b7 fc       	sbrc	r11, 7
    1bc2:	58 c0       	rjmp	.+176    	; 0x1c74 <chvprintf+0x584>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1bc4:	ae 01       	movw	r20, r28
    1bc6:	4f 5f       	subi	r20, 0xFF	; 255
    1bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bca:	5c 8f       	std	Y+28, r21	; 0x1c
    1bcc:	4b 8f       	std	Y+27, r20	; 0x1b
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd2:	0b 96       	adiw	r24, 0x0b	; 11
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
    1bd8:	24 01       	movw	r4, r8
    1bda:	35 01       	movw	r6, r10
    1bdc:	1e 8f       	std	Y+30, r17	; 0x1e
    1bde:	0d 8f       	std	Y+29, r16	; 0x1d
    1be0:	7c 01       	movw	r14, r24
  do {
    i = (int)(l % radix);
    1be2:	c5 01       	movw	r24, r10
    1be4:	b4 01       	movw	r22, r8
    1be6:	2a e0       	ldi	r18, 0x0A	; 10
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	ed d3       	rcall	.+2010   	; 0x23ca <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1bf0:	60 5d       	subi	r22, 0xD0	; 208
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	16 2f       	mov	r17, r22
    1bf6:	d7 01       	movw	r26, r14
    1bf8:	6e 93       	st	-X, r22
    1bfa:	7d 01       	movw	r14, r26
    l /= radix;
    1bfc:	49 01       	movw	r8, r18
    1bfe:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    1c00:	c3 01       	movw	r24, r6
    1c02:	b2 01       	movw	r22, r4
    1c04:	2a e0       	ldi	r18, 0x0A	; 10
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	de d3       	rcall	.+1980   	; 0x23ca <__divmodsi4>
    1c0e:	29 01       	movw	r4, r18
    1c10:	3a 01       	movw	r6, r20
    1c12:	23 2b       	or	r18, r19
    1c14:	24 2b       	or	r18, r20
    1c16:	25 2b       	or	r18, r21
    1c18:	21 f7       	brne	.-56     	; 0x1be2 <chvprintf+0x4f2>
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	f1 2e       	mov	r15, r17
    1c1e:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1c20:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c22:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c24:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1c26:	dc 01       	movw	r26, r24
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	2b 89       	ldd	r18, Y+19	; 0x13
    1c2c:	3c 89       	ldd	r19, Y+20	; 0x14
    1c2e:	28 1b       	sub	r18, r24
    1c30:	39 0b       	sbc	r19, r25
    1c32:	c9 01       	movw	r24, r18
    1c34:	8e 0f       	add	r24, r30
    1c36:	9f 1f       	adc	r25, r31
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <chvprintf+0x54c>
    1c3a:	fd 90       	ld	r15, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1c3c:	f1 92       	st	Z+, r15
  while (--i);
    1c3e:	e8 17       	cp	r30, r24
    1c40:	f9 07       	cpc	r31, r25
    1c42:	d9 f7       	brne	.-10     	; 0x1c3a <chvprintf+0x54a>
    1c44:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c46:	58 89       	ldd	r21, Y+16	; 0x10
    1c48:	e4 1b       	sub	r30, r20
    1c4a:	f5 0b       	sbc	r31, r21
    1c4c:	4f 01       	movw	r8, r30
    1c4e:	51 e0       	ldi	r21, 0x01	; 1
    1c50:	85 1a       	sub	r8, r21
    1c52:	91 08       	sbc	r9, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1c54:	ce 01       	movw	r24, r28
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	7c 01       	movw	r14, r24
    1c5a:	0c ce       	rjmp	.-1000   	; 0x1874 <chvprintf+0x184>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    1c5c:	af 89       	ldd	r26, Y+23	; 0x17
    1c5e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c60:	8d 90       	ld	r8, X+
    1c62:	9d 90       	ld	r9, X+
    1c64:	ad 90       	ld	r10, X+
    1c66:	bc 90       	ld	r11, X
    1c68:	13 97       	sbiw	r26, 0x03	; 3
    1c6a:	14 96       	adiw	r26, 0x04	; 4
    1c6c:	b8 8f       	std	Y+24, r27	; 0x18
    1c6e:	af 8b       	std	Y+23, r26	; 0x17
      else
        l = va_arg(ap, int);
      if (l < 0) {
    1c70:	b7 fe       	sbrs	r11, 7
    1c72:	a8 cf       	rjmp	.-176    	; 0x1bc4 <chvprintf+0x4d4>
        *p++ = '-';
    1c74:	8d e2       	ldi	r24, 0x2D	; 45
    1c76:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    1c78:	b0 94       	com	r11
    1c7a:	a0 94       	com	r10
    1c7c:	90 94       	com	r9
    1c7e:	80 94       	com	r8
    1c80:	81 1c       	adc	r8, r1
    1c82:	91 1c       	adc	r9, r1
    1c84:	a1 1c       	adc	r10, r1
    1c86:	b1 1c       	adc	r11, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    1c88:	9e 01       	movw	r18, r28
    1c8a:	2e 5f       	subi	r18, 0xFE	; 254
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	3c 8f       	std	Y+28, r19	; 0x1c
    1c90:	2b 8f       	std	Y+27, r18	; 0x1b
    1c92:	9d cf       	rjmp	.-198    	; 0x1bce <chvprintf+0x4de>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1c94:	40 e1       	ldi	r20, 0x10	; 16
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	49 cf       	rjmp	.-366    	; 0x1b30 <chvprintf+0x440>
    1c9e:	ee 19       	sub	r30, r14
    1ca0:	ff 09       	sbc	r31, r15
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1ca2:	4f 01       	movw	r8, r30
    1ca4:	51 e0       	ldi	r21, 0x01	; 1
    1ca6:	85 1a       	sub	r8, r21
    1ca8:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1caa:	98 8f       	std	Y+24, r25	; 0x18
    1cac:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1cae:	80 e2       	ldi	r24, 0x20	; 32
    1cb0:	89 8f       	std	Y+25, r24	; 0x19
    1cb2:	e0 cd       	rjmp	.-1088   	; 0x1874 <chvprintf+0x184>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    1cb4:	40 e5       	ldi	r20, 0x50	; 80
    1cb6:	e4 2e       	mov	r14, r20
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	f4 2e       	mov	r15, r20
    1cbc:	91 ce       	rjmp	.-734    	; 0x19e0 <chvprintf+0x2f0>
    1cbe:	58 01       	movw	r10, r16
    1cc0:	17 fd       	sbrc	r17, 7
    1cc2:	0e c0       	rjmp	.+28     	; 0x1ce0 <chvprintf+0x5f0>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1cc4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1cc6:	98 8f       	std	Y+24, r25	; 0x18
    1cc8:	8f 8b       	std	Y+23, r24	; 0x17
    1cca:	51 11       	cpse	r21, r1
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <chvprintf+0x5ea>
    1cce:	88 24       	eor	r8, r8
    1cd0:	8a 94       	dec	r8
    1cd2:	98 2c       	mov	r9, r8
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	89 8f       	std	Y+25, r24	; 0x19
    1cd8:	d5 cd       	rjmp	.-1110   	; 0x1884 <chvprintf+0x194>
    1cda:	f0 e2       	ldi	r31, 0x20	; 32
    1cdc:	f9 8f       	std	Y+25, r31	; 0x19
    1cde:	14 ce       	rjmp	.-984    	; 0x1908 <chvprintf+0x218>
    1ce0:	a1 2c       	mov	r10, r1
    1ce2:	b1 2c       	mov	r11, r1
    1ce4:	ef cf       	rjmp	.-34     	; 0x1cc4 <chvprintf+0x5d4>

00001ce6 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1cee:	ae 01       	movw	r20, r28
    1cf0:	47 5f       	subi	r20, 0xF7	; 247
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	f9 dc       	rcall	.-1550   	; 0x16f0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <adc_cb>:


volatile uint8_t flag;
void adc_cb(ADCDriver *adcp, adcsample_t *buffer, size_t n)
{
    flag = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <flag>
    1d0a:	08 95       	ret

00001d0c <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
    1d0c:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <ch+0xb>
    1d10:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <ch+0xc>
    1d14:	87 e5       	ldi	r24, 0x57	; 87
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	94 87       	std	Z+12, r25	; 0x0c
    1d1a:	83 87       	std	Z+11, r24	; 0x0b
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("Blinker");
  while (true) {
    palTogglePad(IOPORT2, PORTB_LED1);
    1d1c:	c0 e2       	ldi	r28, 0x20	; 32
    1d1e:	85 b1       	in	r24, 0x05	; 5
    1d20:	8c 27       	eor	r24, r28
    1d22:	85 b9       	out	0x05, r24	; 5
    chThdSleepMilliseconds(100);
    1d24:	8b e1       	ldi	r24, 0x1B	; 27
    1d26:	96 e0       	ldi	r25, 0x06	; 6
    1d28:	0e 94 d7 04 	call	0x9ae	; 0x9ae <chThdSleep>
    1d2c:	f8 cf       	rjmp	.-16     	; 0x1d1e <Thread1+0x12>

00001d2e <main>:
/*
 * Application entry point.
 */
#define NBR_CHANNELS 1
#define DEPTH 3
int main(void) {
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	2d 97       	sbiw	r28, 0x0d	; 13
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    1d42:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <halInit>
  chSysInit();
    1d46:	0e 94 ce 00 	call	0x19c	; 0x19c <chSysInit>

  /*
   * Activates the serial driver 1 using the driver default configuration.
   */
  sdStart(&SD1, NULL);
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	87 e3       	ldi	r24, 0x37	; 55
    1d50:	93 e0       	ldi	r25, 0x03	; 3
    1d52:	0f da       	rcall	.-3042   	; 0x1172 <sdStart>

  /*
   * 
   */
  ADCConfig cfg = {ANALOG_REFERENCE_AVCC};
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	8d 87       	std	Y+13, r24	; 0x0d
  ADCConversionGroup group = {0, NBR_CHANNELS, adc_cb, 0x7};
    1d58:	86 e0       	ldi	r24, 0x06	; 6
    1d5a:	e0 e0       	ldi	r30, 0x00	; 0
    1d5c:	f1 e0       	ldi	r31, 0x01	; 1
    1d5e:	de 01       	movw	r26, r28
    1d60:	17 96       	adiw	r26, 0x07	; 7
    1d62:	01 90       	ld	r0, Z+
    1d64:	0d 92       	st	X+, r0
    1d66:	8a 95       	dec	r24
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <main+0x34>
  adcsample_t buffer[DEPTH*NBR_CHANNELS];

  adcStart(&ADCD1, &cfg);
    1d6a:	be 01       	movw	r22, r28
    1d6c:	63 5f       	subi	r22, 0xF3	; 243
    1d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d70:	82 e2       	ldi	r24, 0x22	; 34
    1d72:	93 e0       	ldi	r25, 0x03	; 3
    1d74:	9d d9       	rcall	.-3270   	; 0x10b0 <adcStart>
  
  /*
   * Starts the LED blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
    1d76:	00 e0       	ldi	r16, 0x00	; 0
    1d78:	10 e0       	ldi	r17, 0x00	; 0
    1d7a:	26 e8       	ldi	r18, 0x86	; 134
    1d7c:	3e e0       	ldi	r19, 0x0E	; 14
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	61 e8       	ldi	r22, 0x81	; 129
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	92 e0       	ldi	r25, 0x02	; 2
    1d88:	0e 94 5d 04 	call	0x8ba	; 0x8ba <chThdCreateStatic>
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	07 96       	adiw	r24, 0x07	; 7
    1d90:	5c 01       	movw	r10, r24
    adcStartConversion(&ADCD1, &group, buffer, DEPTH);
    while(!flag)
        ;
    flag = 0;
    for(int i=0; i<DEPTH; i++)
        chprintf((BaseSequentialStream *)&SD1, "output =[%d]  \n \r", buffer[i*NBR_CHANNELS]);/*,
    1d92:	8f e5       	ldi	r24, 0x5F	; 95
    1d94:	c8 2e       	mov	r12, r24
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	d8 2e       	mov	r13, r24
    1d9a:	97 e3       	ldi	r25, 0x37	; 55
    1d9c:	e9 2e       	mov	r14, r25
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	f9 2e       	mov	r15, r25
   * Starts the LED blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);

  while(TRUE) {
    adcStartConversion(&ADCD1, &group, buffer, DEPTH);
    1da2:	23 e0       	ldi	r18, 0x03	; 3
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	ae 01       	movw	r20, r28
    1da8:	4f 5f       	subi	r20, 0xFF	; 255
    1daa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dac:	b5 01       	movw	r22, r10
    1dae:	82 e2       	ldi	r24, 0x22	; 34
    1db0:	93 e0       	ldi	r25, 0x03	; 3
    1db2:	8b d9       	rcall	.-3306   	; 0x10ca <adcStartConversion>
    while(!flag)
    1db4:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <flag>
    1db8:	88 23       	and	r24, r24
    1dba:	e1 f3       	breq	.-8      	; 0x1db4 <main+0x86>
        ;
    flag = 0;
    1dbc:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <flag>
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	0f 5f       	subi	r16, 0xFF	; 255
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    for(int i=0; i<DEPTH; i++)
        chprintf((BaseSequentialStream *)&SD1, "output =[%d]  \n \r", buffer[i*NBR_CHANNELS]);/*,
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	0e 5f       	subi	r16, 0xFE	; 254
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	df 92       	push	r13
    1dd6:	cf 92       	push	r12
    1dd8:	ff 92       	push	r15
    1dda:	ef 92       	push	r14
    1ddc:	84 df       	rcall	.-248    	; 0x1ce6 <chprintf>
  while(TRUE) {
    adcStartConversion(&ADCD1, &group, buffer, DEPTH);
    while(!flag)
        ;
    flag = 0;
    for(int i=0; i<DEPTH; i++)
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0a 15       	cp	r16, r10
    1dec:	1b 05       	cpc	r17, r11
    1dee:	59 f7       	brne	.-42     	; 0x1dc6 <main+0x98>
        chprintf((BaseSequentialStream *)&SD1, "output =[%d]  \n \r", buffer[i*NBR_CHANNELS]);/*,
                 buffer[i*NBR_CHANNELS + 1],
                 buffer[i*NBR_CHANNELS + 2]);*/
    chThdSleepMilliseconds(500);
    1df0:	84 e8       	ldi	r24, 0x84	; 132
    1df2:	9e e1       	ldi	r25, 0x1E	; 30
    1df4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <chThdSleep>
  }
    1df8:	d4 cf       	rjmp	.-88     	; 0x1da2 <main+0x74>

00001dfa <vfprintf>:
    1dfa:	ab e0       	ldi	r26, 0x0B	; 11
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e2 e0       	ldi	r30, 0x02	; 2
    1e00:	ff e0       	ldi	r31, 0x0F	; 15
    1e02:	09 c3       	rjmp	.+1554   	; 0x2416 <__prologue_saves__+0x8>
    1e04:	6c 01       	movw	r12, r24
    1e06:	7b 01       	movw	r14, r22
    1e08:	3a 01       	movw	r6, r20
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	17 82       	std	Z+7, r1	; 0x07
    1e0e:	16 82       	std	Z+6, r1	; 0x06
    1e10:	83 81       	ldd	r24, Z+3	; 0x03
    1e12:	81 ff       	sbrs	r24, 1
    1e14:	f9 c0       	rjmp	.+498    	; 0x2008 <vfprintf+0x20e>
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	4c 01       	movw	r8, r24
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	b3 80       	ldd	r11, Z+3	; 0x03
    1e20:	f7 01       	movw	r30, r14
    1e22:	b3 fc       	sbrc	r11, 3
    1e24:	05 91       	lpm	r16, Z+
    1e26:	b3 fe       	sbrs	r11, 3
    1e28:	01 91       	ld	r16, Z+
    1e2a:	7f 01       	movw	r14, r30
    1e2c:	00 23       	and	r16, r16
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <vfprintf+0x38>
    1e30:	e7 c0       	rjmp	.+462    	; 0x2000 <vfprintf+0x206>
    1e32:	05 32       	cpi	r16, 0x25	; 37
    1e34:	49 f4       	brne	.+18     	; 0x1e48 <vfprintf+0x4e>
    1e36:	b3 fc       	sbrc	r11, 3
    1e38:	05 91       	lpm	r16, Z+
    1e3a:	b3 fe       	sbrs	r11, 3
    1e3c:	01 91       	ld	r16, Z+
    1e3e:	7f 01       	movw	r14, r30
    1e40:	05 32       	cpi	r16, 0x25	; 37
    1e42:	11 f0       	breq	.+4      	; 0x1e48 <vfprintf+0x4e>
    1e44:	10 e0       	ldi	r17, 0x00	; 0
    1e46:	17 c0       	rjmp	.+46     	; 0x1e76 <vfprintf+0x7c>
    1e48:	b6 01       	movw	r22, r12
    1e4a:	80 2f       	mov	r24, r16
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	92 d3       	rcall	.+1828   	; 0x2574 <fputc>
    1e50:	53 01       	movw	r10, r6
    1e52:	35 01       	movw	r6, r10
    1e54:	e3 cf       	rjmp	.-58     	; 0x1e1c <vfprintf+0x22>
    1e56:	00 23       	and	r16, r16
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <vfprintf+0x62>
    1e5a:	d2 c0       	rjmp	.+420    	; 0x2000 <vfprintf+0x206>
    1e5c:	60 2f       	mov	r22, r16
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	83 e4       	ldi	r24, 0x43	; 67
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	35 d3       	rcall	.+1642   	; 0x24d0 <strchr_P>
    1e66:	89 2b       	or	r24, r25
    1e68:	49 f0       	breq	.+18     	; 0x1e7c <vfprintf+0x82>
    1e6a:	f7 01       	movw	r30, r14
    1e6c:	b3 fc       	sbrc	r11, 3
    1e6e:	05 91       	lpm	r16, Z+
    1e70:	b3 fe       	sbrs	r11, 3
    1e72:	01 91       	ld	r16, Z+
    1e74:	7f 01       	movw	r14, r30
    1e76:	17 ff       	sbrs	r17, 7
    1e78:	ee cf       	rjmp	.-36     	; 0x1e56 <vfprintf+0x5c>
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <vfprintf+0x8a>
    1e7c:	03 32       	cpi	r16, 0x23	; 35
    1e7e:	39 f0       	breq	.+14     	; 0x1e8e <vfprintf+0x94>
    1e80:	0c 36       	cpi	r16, 0x6C	; 108
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <vfprintf+0x90>
    1e84:	01 11       	cpse	r16, r1
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <vfprintf+0x98>
    1e88:	bb c0       	rjmp	.+374    	; 0x2000 <vfprintf+0x206>
    1e8a:	10 68       	ori	r17, 0x80	; 128
    1e8c:	ee cf       	rjmp	.-36     	; 0x1e6a <vfprintf+0x70>
    1e8e:	10 e1       	ldi	r17, 0x10	; 16
    1e90:	ec cf       	rjmp	.-40     	; 0x1e6a <vfprintf+0x70>
    1e92:	60 2f       	mov	r22, r16
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	8c e3       	ldi	r24, 0x3C	; 60
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	1a d3       	rcall	.+1588   	; 0x24d0 <strchr_P>
    1e9c:	89 2b       	or	r24, r25
    1e9e:	41 f0       	breq	.+16     	; 0x1eb0 <vfprintf+0xb6>
    1ea0:	53 01       	movw	r10, r6
    1ea2:	f4 e0       	ldi	r31, 0x04	; 4
    1ea4:	af 0e       	add	r10, r31
    1ea6:	b1 1c       	adc	r11, r1
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	8f e3       	ldi	r24, 0x3F	; 63
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	10 c0       	rjmp	.+32     	; 0x1ed0 <vfprintf+0xd6>
    1eb0:	03 36       	cpi	r16, 0x63	; 99
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <vfprintf+0xc6>
    1eb4:	03 37       	cpi	r16, 0x73	; 115
    1eb6:	71 f0       	breq	.+28     	; 0x1ed4 <vfprintf+0xda>
    1eb8:	03 35       	cpi	r16, 0x53	; 83
    1eba:	01 f5       	brne	.+64     	; 0x1efc <vfprintf+0x102>
    1ebc:	11 60       	ori	r17, 0x01	; 1
    1ebe:	0a c0       	rjmp	.+20     	; 0x1ed4 <vfprintf+0xda>
    1ec0:	53 01       	movw	r10, r6
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	a8 0e       	add	r10, r24
    1ec6:	b1 1c       	adc	r11, r1
    1ec8:	b6 01       	movw	r22, r12
    1eca:	f3 01       	movw	r30, r6
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	51 d3       	rcall	.+1698   	; 0x2574 <fputc>
    1ed2:	bf cf       	rjmp	.-130    	; 0x1e52 <vfprintf+0x58>
    1ed4:	53 01       	movw	r10, r6
    1ed6:	f2 e0       	ldi	r31, 0x02	; 2
    1ed8:	af 0e       	add	r10, r31
    1eda:	b1 1c       	adc	r11, r1
    1edc:	f3 01       	movw	r30, r6
    1ede:	60 80       	ld	r6, Z
    1ee0:	71 80       	ldd	r7, Z+1	; 0x01
    1ee2:	f3 01       	movw	r30, r6
    1ee4:	10 fd       	sbrc	r17, 0
    1ee6:	85 91       	lpm	r24, Z+
    1ee8:	10 ff       	sbrs	r17, 0
    1eea:	81 91       	ld	r24, Z+
    1eec:	3f 01       	movw	r6, r30
    1eee:	88 23       	and	r24, r24
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <vfprintf+0xfa>
    1ef2:	af cf       	rjmp	.-162    	; 0x1e52 <vfprintf+0x58>
    1ef4:	b6 01       	movw	r22, r12
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	3d d3       	rcall	.+1658   	; 0x2574 <fputc>
    1efa:	f3 cf       	rjmp	.-26     	; 0x1ee2 <vfprintf+0xe8>
    1efc:	04 36       	cpi	r16, 0x64	; 100
    1efe:	11 f0       	breq	.+4      	; 0x1f04 <vfprintf+0x10a>
    1f00:	09 36       	cpi	r16, 0x69	; 105
    1f02:	21 f5       	brne	.+72     	; 0x1f4c <vfprintf+0x152>
    1f04:	53 01       	movw	r10, r6
    1f06:	17 ff       	sbrs	r17, 7
    1f08:	09 c0       	rjmp	.+18     	; 0x1f1c <vfprintf+0x122>
    1f0a:	f4 e0       	ldi	r31, 0x04	; 4
    1f0c:	af 0e       	add	r10, r31
    1f0e:	b1 1c       	adc	r11, r1
    1f10:	f3 01       	movw	r30, r6
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	0a c0       	rjmp	.+20     	; 0x1f30 <vfprintf+0x136>
    1f1c:	f2 e0       	ldi	r31, 0x02	; 2
    1f1e:	af 0e       	add	r10, r31
    1f20:	b1 1c       	adc	r11, r1
    1f22:	f3 01       	movw	r30, r6
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	07 2e       	mov	r0, r23
    1f2a:	00 0c       	add	r0, r0
    1f2c:	88 0b       	sbc	r24, r24
    1f2e:	99 0b       	sbc	r25, r25
    1f30:	1f 7e       	andi	r17, 0xEF	; 239
    1f32:	97 ff       	sbrs	r25, 7
    1f34:	08 c0       	rjmp	.+16     	; 0x1f46 <vfprintf+0x14c>
    1f36:	90 95       	com	r25
    1f38:	80 95       	com	r24
    1f3a:	70 95       	com	r23
    1f3c:	61 95       	neg	r22
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	8f 4f       	sbci	r24, 0xFF	; 255
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	10 64       	ori	r17, 0x40	; 64
    1f46:	2a e0       	ldi	r18, 0x0A	; 10
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	30 c0       	rjmp	.+96     	; 0x1fac <vfprintf+0x1b2>
    1f4c:	00 37       	cpi	r16, 0x70	; 112
    1f4e:	91 f0       	breq	.+36     	; 0x1f74 <vfprintf+0x17a>
    1f50:	40 f4       	brcc	.+16     	; 0x1f62 <vfprintf+0x168>
    1f52:	08 35       	cpi	r16, 0x58	; 88
    1f54:	a1 f0       	breq	.+40     	; 0x1f7e <vfprintf+0x184>
    1f56:	0f 36       	cpi	r16, 0x6F	; 111
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <vfprintf+0x162>
    1f5a:	52 c0       	rjmp	.+164    	; 0x2000 <vfprintf+0x206>
    1f5c:	28 e0       	ldi	r18, 0x08	; 8
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	11 c0       	rjmp	.+34     	; 0x1f84 <vfprintf+0x18a>
    1f62:	05 37       	cpi	r16, 0x75	; 117
    1f64:	19 f0       	breq	.+6      	; 0x1f6c <vfprintf+0x172>
    1f66:	08 37       	cpi	r16, 0x78	; 120
    1f68:	31 f0       	breq	.+12     	; 0x1f76 <vfprintf+0x17c>
    1f6a:	4a c0       	rjmp	.+148    	; 0x2000 <vfprintf+0x206>
    1f6c:	1f 7e       	andi	r17, 0xEF	; 239
    1f6e:	2a e0       	ldi	r18, 0x0A	; 10
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <vfprintf+0x18a>
    1f74:	10 61       	ori	r17, 0x10	; 16
    1f76:	14 62       	ori	r17, 0x24	; 36
    1f78:	20 e1       	ldi	r18, 0x10	; 16
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <vfprintf+0x18a>
    1f7e:	14 60       	ori	r17, 0x04	; 4
    1f80:	20 e1       	ldi	r18, 0x10	; 16
    1f82:	32 e0       	ldi	r19, 0x02	; 2
    1f84:	53 01       	movw	r10, r6
    1f86:	17 ff       	sbrs	r17, 7
    1f88:	09 c0       	rjmp	.+18     	; 0x1f9c <vfprintf+0x1a2>
    1f8a:	f4 e0       	ldi	r31, 0x04	; 4
    1f8c:	af 0e       	add	r10, r31
    1f8e:	b1 1c       	adc	r11, r1
    1f90:	f3 01       	movw	r30, r6
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	08 c0       	rjmp	.+16     	; 0x1fac <vfprintf+0x1b2>
    1f9c:	f2 e0       	ldi	r31, 0x02	; 2
    1f9e:	af 0e       	add	r10, r31
    1fa0:	b1 1c       	adc	r11, r1
    1fa2:	f3 01       	movw	r30, r6
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a4 01       	movw	r20, r8
    1fae:	37 d3       	rcall	.+1646   	; 0x261e <__ultoa_invert>
    1fb0:	08 2f       	mov	r16, r24
    1fb2:	08 19       	sub	r16, r8
    1fb4:	16 ff       	sbrs	r17, 6
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <vfprintf+0x1c6>
    1fb8:	b6 01       	movw	r22, r12
    1fba:	8d e2       	ldi	r24, 0x2D	; 45
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	da d2       	rcall	.+1460   	; 0x2574 <fputc>
    1fc0:	14 ff       	sbrs	r17, 4
    1fc2:	13 c0       	rjmp	.+38     	; 0x1fea <vfprintf+0x1f0>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e0 0f       	add	r30, r16
    1fc8:	f1 1d       	adc	r31, r1
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 33       	cpi	r24, 0x30	; 48
    1fce:	69 f0       	breq	.+26     	; 0x1fea <vfprintf+0x1f0>
    1fd0:	b6 01       	movw	r22, r12
    1fd2:	80 e3       	ldi	r24, 0x30	; 48
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	ce d2       	rcall	.+1436   	; 0x2574 <fputc>
    1fd8:	12 ff       	sbrs	r17, 2
    1fda:	07 c0       	rjmp	.+14     	; 0x1fea <vfprintf+0x1f0>
    1fdc:	10 72       	andi	r17, 0x20	; 32
    1fde:	81 2f       	mov	r24, r17
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	88 5a       	subi	r24, 0xA8	; 168
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	c5 d2       	rcall	.+1418   	; 0x2574 <fputc>
    1fea:	01 50       	subi	r16, 0x01	; 1
    1fec:	f4 01       	movw	r30, r8
    1fee:	e0 0f       	add	r30, r16
    1ff0:	f1 1d       	adc	r31, r1
    1ff2:	80 81       	ld	r24, Z
    1ff4:	b6 01       	movw	r22, r12
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	bd d2       	rcall	.+1402   	; 0x2574 <fputc>
    1ffa:	01 11       	cpse	r16, r1
    1ffc:	f6 cf       	rjmp	.-20     	; 0x1fea <vfprintf+0x1f0>
    1ffe:	29 cf       	rjmp	.-430    	; 0x1e52 <vfprintf+0x58>
    2000:	f6 01       	movw	r30, r12
    2002:	86 81       	ldd	r24, Z+6	; 0x06
    2004:	97 81       	ldd	r25, Z+7	; 0x07
    2006:	02 c0       	rjmp	.+4      	; 0x200c <vfprintf+0x212>
    2008:	8f ef       	ldi	r24, 0xFF	; 255
    200a:	9f ef       	ldi	r25, 0xFF	; 255
    200c:	2b 96       	adiw	r28, 0x0b	; 11
    200e:	ee e0       	ldi	r30, 0x0E	; 14
    2010:	1e c2       	rjmp	.+1084   	; 0x244e <__epilogue_restores__+0x8>

00002012 <putval>:
    2012:	20 fd       	sbrc	r18, 0
    2014:	09 c0       	rjmp	.+18     	; 0x2028 <putval+0x16>
    2016:	fc 01       	movw	r30, r24
    2018:	23 fd       	sbrc	r18, 3
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <putval+0x14>
    201c:	22 ff       	sbrs	r18, 2
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <putval+0x12>
    2020:	73 83       	std	Z+3, r23	; 0x03
    2022:	62 83       	std	Z+2, r22	; 0x02
    2024:	51 83       	std	Z+1, r21	; 0x01
    2026:	40 83       	st	Z, r20
    2028:	08 95       	ret

0000202a <mulacc>:
    202a:	44 fd       	sbrc	r20, 4
    202c:	17 c0       	rjmp	.+46     	; 0x205c <mulacc+0x32>
    202e:	46 fd       	sbrc	r20, 6
    2030:	17 c0       	rjmp	.+46     	; 0x2060 <mulacc+0x36>
    2032:	ab 01       	movw	r20, r22
    2034:	bc 01       	movw	r22, r24
    2036:	da 01       	movw	r26, r20
    2038:	fb 01       	movw	r30, r22
    203a:	aa 0f       	add	r26, r26
    203c:	bb 1f       	adc	r27, r27
    203e:	ee 1f       	adc	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	10 94       	com	r1
    2044:	d1 f7       	brne	.-12     	; 0x203a <mulacc+0x10>
    2046:	4a 0f       	add	r20, r26
    2048:	5b 1f       	adc	r21, r27
    204a:	6e 1f       	adc	r22, r30
    204c:	7f 1f       	adc	r23, r31
    204e:	cb 01       	movw	r24, r22
    2050:	ba 01       	movw	r22, r20
    2052:	66 0f       	add	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	09 c0       	rjmp	.+18     	; 0x206e <mulacc+0x44>
    205c:	33 e0       	ldi	r19, 0x03	; 3
    205e:	01 c0       	rjmp	.+2      	; 0x2062 <mulacc+0x38>
    2060:	34 e0       	ldi	r19, 0x04	; 4
    2062:	66 0f       	add	r22, r22
    2064:	77 1f       	adc	r23, r23
    2066:	88 1f       	adc	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	31 50       	subi	r19, 0x01	; 1
    206c:	d1 f7       	brne	.-12     	; 0x2062 <mulacc+0x38>
    206e:	62 0f       	add	r22, r18
    2070:	71 1d       	adc	r23, r1
    2072:	81 1d       	adc	r24, r1
    2074:	91 1d       	adc	r25, r1
    2076:	08 95       	ret

00002078 <skip_spaces>:
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	8c 01       	movw	r16, r24
    2082:	c8 01       	movw	r24, r16
    2084:	39 d2       	rcall	.+1138   	; 0x24f8 <fgetc>
    2086:	ec 01       	movw	r28, r24
    2088:	97 fd       	sbrc	r25, 7
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <skip_spaces+0x20>
    208c:	19 d2       	rcall	.+1074   	; 0x24c0 <isspace>
    208e:	89 2b       	or	r24, r25
    2090:	c1 f7       	brne	.-16     	; 0x2082 <skip_spaces+0xa>
    2092:	b8 01       	movw	r22, r16
    2094:	ce 01       	movw	r24, r28
    2096:	aa d2       	rcall	.+1364   	; 0x25ec <ungetc>
    2098:	ce 01       	movw	r24, r28
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	08 95       	ret

000020a4 <conv_int>:
    20a4:	8f 92       	push	r8
    20a6:	9f 92       	push	r9
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	8c 01       	movw	r16, r24
    20ba:	d6 2f       	mov	r29, r22
    20bc:	7a 01       	movw	r14, r20
    20be:	b2 2e       	mov	r11, r18
    20c0:	1b d2       	rcall	.+1078   	; 0x24f8 <fgetc>
    20c2:	9c 01       	movw	r18, r24
    20c4:	33 27       	eor	r19, r19
    20c6:	2b 32       	cpi	r18, 0x2B	; 43
    20c8:	31 05       	cpc	r19, r1
    20ca:	31 f0       	breq	.+12     	; 0x20d8 <conv_int+0x34>
    20cc:	2d 32       	cpi	r18, 0x2D	; 45
    20ce:	31 05       	cpc	r19, r1
    20d0:	59 f4       	brne	.+22     	; 0x20e8 <conv_int+0x44>
    20d2:	8b 2d       	mov	r24, r11
    20d4:	80 68       	ori	r24, 0x80	; 128
    20d6:	b8 2e       	mov	r11, r24
    20d8:	d1 50       	subi	r29, 0x01	; 1
    20da:	11 f4       	brne	.+4      	; 0x20e0 <conv_int+0x3c>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	61 c0       	rjmp	.+194    	; 0x21a2 <conv_int+0xfe>
    20e0:	c8 01       	movw	r24, r16
    20e2:	0a d2       	rcall	.+1044   	; 0x24f8 <fgetc>
    20e4:	97 fd       	sbrc	r25, 7
    20e6:	fa cf       	rjmp	.-12     	; 0x20dc <conv_int+0x38>
    20e8:	cb 2d       	mov	r28, r11
    20ea:	cd 7f       	andi	r28, 0xFD	; 253
    20ec:	2b 2d       	mov	r18, r11
    20ee:	20 73       	andi	r18, 0x30	; 48
    20f0:	f9 f4       	brne	.+62     	; 0x2130 <conv_int+0x8c>
    20f2:	80 33       	cpi	r24, 0x30	; 48
    20f4:	e9 f4       	brne	.+58     	; 0x2130 <conv_int+0x8c>
    20f6:	aa 24       	eor	r10, r10
    20f8:	aa 94       	dec	r10
    20fa:	ad 0e       	add	r10, r29
    20fc:	09 f4       	brne	.+2      	; 0x2100 <conv_int+0x5c>
    20fe:	3e c0       	rjmp	.+124    	; 0x217c <conv_int+0xd8>
    2100:	c8 01       	movw	r24, r16
    2102:	fa d1       	rcall	.+1012   	; 0x24f8 <fgetc>
    2104:	97 fd       	sbrc	r25, 7
    2106:	3a c0       	rjmp	.+116    	; 0x217c <conv_int+0xd8>
    2108:	9c 01       	movw	r18, r24
    210a:	2f 7d       	andi	r18, 0xDF	; 223
    210c:	33 27       	eor	r19, r19
    210e:	28 35       	cpi	r18, 0x58	; 88
    2110:	31 05       	cpc	r19, r1
    2112:	41 f4       	brne	.+16     	; 0x2124 <conv_int+0x80>
    2114:	c2 64       	ori	r28, 0x42	; 66
    2116:	d2 50       	subi	r29, 0x02	; 2
    2118:	89 f1       	breq	.+98     	; 0x217c <conv_int+0xd8>
    211a:	c8 01       	movw	r24, r16
    211c:	ed d1       	rcall	.+986    	; 0x24f8 <fgetc>
    211e:	97 ff       	sbrs	r25, 7
    2120:	07 c0       	rjmp	.+14     	; 0x2130 <conv_int+0x8c>
    2122:	2c c0       	rjmp	.+88     	; 0x217c <conv_int+0xd8>
    2124:	b6 fe       	sbrs	r11, 6
    2126:	02 c0       	rjmp	.+4      	; 0x212c <conv_int+0x88>
    2128:	c2 60       	ori	r28, 0x02	; 2
    212a:	01 c0       	rjmp	.+2      	; 0x212e <conv_int+0x8a>
    212c:	c2 61       	ori	r28, 0x12	; 18
    212e:	da 2d       	mov	r29, r10
    2130:	81 2c       	mov	r8, r1
    2132:	91 2c       	mov	r9, r1
    2134:	54 01       	movw	r10, r8
    2136:	20 ed       	ldi	r18, 0xD0	; 208
    2138:	28 0f       	add	r18, r24
    213a:	28 30       	cpi	r18, 0x08	; 8
    213c:	78 f0       	brcs	.+30     	; 0x215c <conv_int+0xb8>
    213e:	c4 ff       	sbrs	r28, 4
    2140:	03 c0       	rjmp	.+6      	; 0x2148 <conv_int+0xa4>
    2142:	b8 01       	movw	r22, r16
    2144:	53 d2       	rcall	.+1190   	; 0x25ec <ungetc>
    2146:	17 c0       	rjmp	.+46     	; 0x2176 <conv_int+0xd2>
    2148:	2a 30       	cpi	r18, 0x0A	; 10
    214a:	40 f0       	brcs	.+16     	; 0x215c <conv_int+0xb8>
    214c:	c6 ff       	sbrs	r28, 6
    214e:	f9 cf       	rjmp	.-14     	; 0x2142 <conv_int+0x9e>
    2150:	2f 7d       	andi	r18, 0xDF	; 223
    2152:	3f ee       	ldi	r19, 0xEF	; 239
    2154:	32 0f       	add	r19, r18
    2156:	36 30       	cpi	r19, 0x06	; 6
    2158:	a0 f7       	brcc	.-24     	; 0x2142 <conv_int+0x9e>
    215a:	27 50       	subi	r18, 0x07	; 7
    215c:	4c 2f       	mov	r20, r28
    215e:	c5 01       	movw	r24, r10
    2160:	b4 01       	movw	r22, r8
    2162:	63 df       	rcall	.-314    	; 0x202a <mulacc>
    2164:	4b 01       	movw	r8, r22
    2166:	5c 01       	movw	r10, r24
    2168:	c2 60       	ori	r28, 0x02	; 2
    216a:	d1 50       	subi	r29, 0x01	; 1
    216c:	51 f0       	breq	.+20     	; 0x2182 <conv_int+0xde>
    216e:	c8 01       	movw	r24, r16
    2170:	c3 d1       	rcall	.+902    	; 0x24f8 <fgetc>
    2172:	97 ff       	sbrs	r25, 7
    2174:	e0 cf       	rjmp	.-64     	; 0x2136 <conv_int+0x92>
    2176:	c1 fd       	sbrc	r28, 1
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <conv_int+0xde>
    217a:	b0 cf       	rjmp	.-160    	; 0x20dc <conv_int+0x38>
    217c:	81 2c       	mov	r8, r1
    217e:	91 2c       	mov	r9, r1
    2180:	54 01       	movw	r10, r8
    2182:	c7 ff       	sbrs	r28, 7
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <conv_int+0xf2>
    2186:	b0 94       	com	r11
    2188:	a0 94       	com	r10
    218a:	90 94       	com	r9
    218c:	80 94       	com	r8
    218e:	81 1c       	adc	r8, r1
    2190:	91 1c       	adc	r9, r1
    2192:	a1 1c       	adc	r10, r1
    2194:	b1 1c       	adc	r11, r1
    2196:	2c 2f       	mov	r18, r28
    2198:	b5 01       	movw	r22, r10
    219a:	a4 01       	movw	r20, r8
    219c:	c7 01       	movw	r24, r14
    219e:	39 df       	rcall	.-398    	; 0x2012 <putval>
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	bf 90       	pop	r11
    21b0:	af 90       	pop	r10
    21b2:	9f 90       	pop	r9
    21b4:	8f 90       	pop	r8
    21b6:	08 95       	ret

000021b8 <vfscanf>:
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e1 ee       	ldi	r30, 0xE1	; 225
    21be:	f0 e1       	ldi	r31, 0x10	; 16
    21c0:	29 c1       	rjmp	.+594    	; 0x2414 <__prologue_saves__+0x6>
    21c2:	6c 01       	movw	r12, r24
    21c4:	eb 01       	movw	r28, r22
    21c6:	5a 01       	movw	r10, r20
    21c8:	fc 01       	movw	r30, r24
    21ca:	17 82       	std	Z+7, r1	; 0x07
    21cc:	16 82       	std	Z+6, r1	; 0x06
    21ce:	51 2c       	mov	r5, r1
    21d0:	f6 01       	movw	r30, r12
    21d2:	f3 80       	ldd	r15, Z+3	; 0x03
    21d4:	fe 01       	movw	r30, r28
    21d6:	f3 fc       	sbrc	r15, 3
    21d8:	85 91       	lpm	r24, Z+
    21da:	f3 fe       	sbrs	r15, 3
    21dc:	81 91       	ld	r24, Z+
    21de:	18 2f       	mov	r17, r24
    21e0:	ef 01       	movw	r28, r30
    21e2:	88 23       	and	r24, r24
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <vfscanf+0x30>
    21e6:	d4 c0       	rjmp	.+424    	; 0x2390 <vfscanf+0x1d8>
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	6a d1       	rcall	.+724    	; 0x24c0 <isspace>
    21ec:	89 2b       	or	r24, r25
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <vfscanf+0x3e>
    21f0:	c6 01       	movw	r24, r12
    21f2:	42 df       	rcall	.-380    	; 0x2078 <skip_spaces>
    21f4:	ed cf       	rjmp	.-38     	; 0x21d0 <vfscanf+0x18>
    21f6:	15 32       	cpi	r17, 0x25	; 37
    21f8:	41 f4       	brne	.+16     	; 0x220a <vfscanf+0x52>
    21fa:	fe 01       	movw	r30, r28
    21fc:	f3 fc       	sbrc	r15, 3
    21fe:	15 91       	lpm	r17, Z+
    2200:	f3 fe       	sbrs	r15, 3
    2202:	11 91       	ld	r17, Z+
    2204:	ef 01       	movw	r28, r30
    2206:	15 32       	cpi	r17, 0x25	; 37
    2208:	71 f4       	brne	.+28     	; 0x2226 <vfscanf+0x6e>
    220a:	c6 01       	movw	r24, r12
    220c:	75 d1       	rcall	.+746    	; 0x24f8 <fgetc>
    220e:	97 fd       	sbrc	r25, 7
    2210:	bd c0       	rjmp	.+378    	; 0x238c <vfscanf+0x1d4>
    2212:	41 2f       	mov	r20, r17
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	9c 01       	movw	r18, r24
    2218:	33 27       	eor	r19, r19
    221a:	24 17       	cp	r18, r20
    221c:	35 07       	cpc	r19, r21
    221e:	c1 f2       	breq	.-80     	; 0x21d0 <vfscanf+0x18>
    2220:	b6 01       	movw	r22, r12
    2222:	e4 d1       	rcall	.+968    	; 0x25ec <ungetc>
    2224:	b5 c0       	rjmp	.+362    	; 0x2390 <vfscanf+0x1d8>
    2226:	1a 32       	cpi	r17, 0x2A	; 42
    2228:	39 f4       	brne	.+14     	; 0x2238 <vfscanf+0x80>
    222a:	f3 fc       	sbrc	r15, 3
    222c:	15 91       	lpm	r17, Z+
    222e:	f3 fe       	sbrs	r15, 3
    2230:	11 91       	ld	r17, Z+
    2232:	ef 01       	movw	r28, r30
    2234:	01 e0       	ldi	r16, 0x01	; 1
    2236:	01 c0       	rjmp	.+2      	; 0x223a <vfscanf+0x82>
    2238:	00 e0       	ldi	r16, 0x00	; 0
    223a:	e1 2c       	mov	r14, r1
    223c:	20 ed       	ldi	r18, 0xD0	; 208
    223e:	21 0f       	add	r18, r17
    2240:	2a 30       	cpi	r18, 0x0A	; 10
    2242:	78 f4       	brcc	.+30     	; 0x2262 <vfscanf+0xaa>
    2244:	02 60       	ori	r16, 0x02	; 2
    2246:	6e 2d       	mov	r22, r14
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	ec de       	rcall	.-552    	; 0x202a <mulacc>
    2252:	e6 2e       	mov	r14, r22
    2254:	fe 01       	movw	r30, r28
    2256:	f3 fc       	sbrc	r15, 3
    2258:	15 91       	lpm	r17, Z+
    225a:	f3 fe       	sbrs	r15, 3
    225c:	11 91       	ld	r17, Z+
    225e:	ef 01       	movw	r28, r30
    2260:	ed cf       	rjmp	.-38     	; 0x223c <vfscanf+0x84>
    2262:	01 ff       	sbrs	r16, 1
    2264:	03 c0       	rjmp	.+6      	; 0x226c <vfscanf+0xb4>
    2266:	e1 10       	cpse	r14, r1
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <vfscanf+0xb8>
    226a:	92 c0       	rjmp	.+292    	; 0x2390 <vfscanf+0x1d8>
    226c:	ee 24       	eor	r14, r14
    226e:	ea 94       	dec	r14
    2270:	18 36       	cpi	r17, 0x68	; 104
    2272:	19 f0       	breq	.+6      	; 0x227a <vfscanf+0xc2>
    2274:	1c 36       	cpi	r17, 0x6C	; 108
    2276:	51 f0       	breq	.+20     	; 0x228c <vfscanf+0xd4>
    2278:	10 c0       	rjmp	.+32     	; 0x229a <vfscanf+0xe2>
    227a:	fe 01       	movw	r30, r28
    227c:	f3 fc       	sbrc	r15, 3
    227e:	15 91       	lpm	r17, Z+
    2280:	f3 fe       	sbrs	r15, 3
    2282:	11 91       	ld	r17, Z+
    2284:	ef 01       	movw	r28, r30
    2286:	18 36       	cpi	r17, 0x68	; 104
    2288:	41 f4       	brne	.+16     	; 0x229a <vfscanf+0xe2>
    228a:	08 60       	ori	r16, 0x08	; 8
    228c:	04 60       	ori	r16, 0x04	; 4
    228e:	fe 01       	movw	r30, r28
    2290:	f3 fc       	sbrc	r15, 3
    2292:	15 91       	lpm	r17, Z+
    2294:	f3 fe       	sbrs	r15, 3
    2296:	11 91       	ld	r17, Z+
    2298:	ef 01       	movw	r28, r30
    229a:	11 23       	and	r17, r17
    229c:	09 f4       	brne	.+2      	; 0x22a0 <vfscanf+0xe8>
    229e:	78 c0       	rjmp	.+240    	; 0x2390 <vfscanf+0x1d8>
    22a0:	61 2f       	mov	r22, r17
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	83 e5       	ldi	r24, 0x53	; 83
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	13 d1       	rcall	.+550    	; 0x24d0 <strchr_P>
    22aa:	89 2b       	or	r24, r25
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <vfscanf+0xf8>
    22ae:	70 c0       	rjmp	.+224    	; 0x2390 <vfscanf+0x1d8>
    22b0:	00 fd       	sbrc	r16, 0
    22b2:	07 c0       	rjmp	.+14     	; 0x22c2 <vfscanf+0x10a>
    22b4:	f5 01       	movw	r30, r10
    22b6:	80 80       	ld	r8, Z
    22b8:	91 80       	ldd	r9, Z+1	; 0x01
    22ba:	c5 01       	movw	r24, r10
    22bc:	02 96       	adiw	r24, 0x02	; 2
    22be:	5c 01       	movw	r10, r24
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <vfscanf+0x10e>
    22c2:	81 2c       	mov	r8, r1
    22c4:	91 2c       	mov	r9, r1
    22c6:	1e 36       	cpi	r17, 0x6E	; 110
    22c8:	49 f4       	brne	.+18     	; 0x22dc <vfscanf+0x124>
    22ca:	f6 01       	movw	r30, r12
    22cc:	46 81       	ldd	r20, Z+6	; 0x06
    22ce:	57 81       	ldd	r21, Z+7	; 0x07
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	20 2f       	mov	r18, r16
    22d6:	c4 01       	movw	r24, r8
    22d8:	9c de       	rcall	.-712    	; 0x2012 <putval>
    22da:	7a cf       	rjmp	.-268    	; 0x21d0 <vfscanf+0x18>
    22dc:	13 36       	cpi	r17, 0x63	; 99
    22de:	a1 f4       	brne	.+40     	; 0x2308 <vfscanf+0x150>
    22e0:	01 fd       	sbrc	r16, 1
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <vfscanf+0x130>
    22e4:	ee 24       	eor	r14, r14
    22e6:	e3 94       	inc	r14
    22e8:	c6 01       	movw	r24, r12
    22ea:	06 d1       	rcall	.+524    	; 0x24f8 <fgetc>
    22ec:	97 fd       	sbrc	r25, 7
    22ee:	4e c0       	rjmp	.+156    	; 0x238c <vfscanf+0x1d4>
    22f0:	81 14       	cp	r8, r1
    22f2:	91 04       	cpc	r9, r1
    22f4:	29 f0       	breq	.+10     	; 0x2300 <vfscanf+0x148>
    22f6:	f4 01       	movw	r30, r8
    22f8:	80 83       	st	Z, r24
    22fa:	c4 01       	movw	r24, r8
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	4c 01       	movw	r8, r24
    2300:	ea 94       	dec	r14
    2302:	e1 10       	cpse	r14, r1
    2304:	f1 cf       	rjmp	.-30     	; 0x22e8 <vfscanf+0x130>
    2306:	3e c0       	rjmp	.+124    	; 0x2384 <vfscanf+0x1cc>
    2308:	c6 01       	movw	r24, r12
    230a:	b6 de       	rcall	.-660    	; 0x2078 <skip_spaces>
    230c:	97 fd       	sbrc	r25, 7
    230e:	3e c0       	rjmp	.+124    	; 0x238c <vfscanf+0x1d4>
    2310:	1f 36       	cpi	r17, 0x6F	; 111
    2312:	49 f1       	breq	.+82     	; 0x2366 <vfscanf+0x1ae>
    2314:	28 f4       	brcc	.+10     	; 0x2320 <vfscanf+0x168>
    2316:	14 36       	cpi	r17, 0x64	; 100
    2318:	21 f1       	breq	.+72     	; 0x2362 <vfscanf+0x1aa>
    231a:	19 36       	cpi	r17, 0x69	; 105
    231c:	39 f1       	breq	.+78     	; 0x236c <vfscanf+0x1b4>
    231e:	25 c0       	rjmp	.+74     	; 0x236a <vfscanf+0x1b2>
    2320:	13 37       	cpi	r17, 0x73	; 115
    2322:	71 f0       	breq	.+28     	; 0x2340 <vfscanf+0x188>
    2324:	15 37       	cpi	r17, 0x75	; 117
    2326:	e9 f0       	breq	.+58     	; 0x2362 <vfscanf+0x1aa>
    2328:	20 c0       	rjmp	.+64     	; 0x236a <vfscanf+0x1b2>
    232a:	81 14       	cp	r8, r1
    232c:	91 04       	cpc	r9, r1
    232e:	29 f0       	breq	.+10     	; 0x233a <vfscanf+0x182>
    2330:	f4 01       	movw	r30, r8
    2332:	60 82       	st	Z, r6
    2334:	c4 01       	movw	r24, r8
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	4c 01       	movw	r8, r24
    233a:	ea 94       	dec	r14
    233c:	ee 20       	and	r14, r14
    233e:	59 f0       	breq	.+22     	; 0x2356 <vfscanf+0x19e>
    2340:	c6 01       	movw	r24, r12
    2342:	da d0       	rcall	.+436    	; 0x24f8 <fgetc>
    2344:	3c 01       	movw	r6, r24
    2346:	97 fd       	sbrc	r25, 7
    2348:	06 c0       	rjmp	.+12     	; 0x2356 <vfscanf+0x19e>
    234a:	ba d0       	rcall	.+372    	; 0x24c0 <isspace>
    234c:	89 2b       	or	r24, r25
    234e:	69 f3       	breq	.-38     	; 0x232a <vfscanf+0x172>
    2350:	b6 01       	movw	r22, r12
    2352:	c3 01       	movw	r24, r6
    2354:	4b d1       	rcall	.+662    	; 0x25ec <ungetc>
    2356:	81 14       	cp	r8, r1
    2358:	91 04       	cpc	r9, r1
    235a:	a1 f0       	breq	.+40     	; 0x2384 <vfscanf+0x1cc>
    235c:	f4 01       	movw	r30, r8
    235e:	10 82       	st	Z, r1
    2360:	11 c0       	rjmp	.+34     	; 0x2384 <vfscanf+0x1cc>
    2362:	00 62       	ori	r16, 0x20	; 32
    2364:	03 c0       	rjmp	.+6      	; 0x236c <vfscanf+0x1b4>
    2366:	00 61       	ori	r16, 0x10	; 16
    2368:	01 c0       	rjmp	.+2      	; 0x236c <vfscanf+0x1b4>
    236a:	00 64       	ori	r16, 0x40	; 64
    236c:	20 2f       	mov	r18, r16
    236e:	a4 01       	movw	r20, r8
    2370:	6e 2d       	mov	r22, r14
    2372:	c6 01       	movw	r24, r12
    2374:	97 de       	rcall	.-722    	; 0x20a4 <conv_int>
    2376:	81 11       	cpse	r24, r1
    2378:	05 c0       	rjmp	.+10     	; 0x2384 <vfscanf+0x1cc>
    237a:	f6 01       	movw	r30, r12
    237c:	83 81       	ldd	r24, Z+3	; 0x03
    237e:	80 73       	andi	r24, 0x30	; 48
    2380:	29 f4       	brne	.+10     	; 0x238c <vfscanf+0x1d4>
    2382:	06 c0       	rjmp	.+12     	; 0x2390 <vfscanf+0x1d8>
    2384:	00 fd       	sbrc	r16, 0
    2386:	24 cf       	rjmp	.-440    	; 0x21d0 <vfscanf+0x18>
    2388:	53 94       	inc	r5
    238a:	22 cf       	rjmp	.-444    	; 0x21d0 <vfscanf+0x18>
    238c:	55 20       	and	r5, r5
    238e:	19 f0       	breq	.+6      	; 0x2396 <vfscanf+0x1de>
    2390:	85 2d       	mov	r24, r5
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	02 c0       	rjmp	.+4      	; 0x239a <vfscanf+0x1e2>
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	9f ef       	ldi	r25, 0xFF	; 255
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ef e0       	ldi	r30, 0x0F	; 15
    23a0:	55 c0       	rjmp	.+170    	; 0x244c <__epilogue_restores__+0x6>

000023a2 <__udivmodhi4>:
    23a2:	aa 1b       	sub	r26, r26
    23a4:	bb 1b       	sub	r27, r27
    23a6:	51 e1       	ldi	r21, 0x11	; 17
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <__udivmodhi4_ep>

000023aa <__udivmodhi4_loop>:
    23aa:	aa 1f       	adc	r26, r26
    23ac:	bb 1f       	adc	r27, r27
    23ae:	a6 17       	cp	r26, r22
    23b0:	b7 07       	cpc	r27, r23
    23b2:	10 f0       	brcs	.+4      	; 0x23b8 <__udivmodhi4_ep>
    23b4:	a6 1b       	sub	r26, r22
    23b6:	b7 0b       	sbc	r27, r23

000023b8 <__udivmodhi4_ep>:
    23b8:	88 1f       	adc	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	5a 95       	dec	r21
    23be:	a9 f7       	brne	.-22     	; 0x23aa <__udivmodhi4_loop>
    23c0:	80 95       	com	r24
    23c2:	90 95       	com	r25
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	08 95       	ret

000023ca <__divmodsi4>:
    23ca:	05 2e       	mov	r0, r21
    23cc:	97 fb       	bst	r25, 7
    23ce:	16 f4       	brtc	.+4      	; 0x23d4 <__divmodsi4+0xa>
    23d0:	00 94       	com	r0
    23d2:	0f d0       	rcall	.+30     	; 0x23f2 <__negsi2>
    23d4:	57 fd       	sbrc	r21, 7
    23d6:	05 d0       	rcall	.+10     	; 0x23e2 <__divmodsi4_neg2>
    23d8:	51 d0       	rcall	.+162    	; 0x247c <__udivmodsi4>
    23da:	07 fc       	sbrc	r0, 7
    23dc:	02 d0       	rcall	.+4      	; 0x23e2 <__divmodsi4_neg2>
    23de:	46 f4       	brtc	.+16     	; 0x23f0 <__divmodsi4_exit>
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <__negsi2>

000023e2 <__divmodsi4_neg2>:
    23e2:	50 95       	com	r21
    23e4:	40 95       	com	r20
    23e6:	30 95       	com	r19
    23e8:	21 95       	neg	r18
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	4f 4f       	sbci	r20, 0xFF	; 255
    23ee:	5f 4f       	sbci	r21, 0xFF	; 255

000023f0 <__divmodsi4_exit>:
    23f0:	08 95       	ret

000023f2 <__negsi2>:
    23f2:	90 95       	com	r25
    23f4:	80 95       	com	r24
    23f6:	70 95       	com	r23
    23f8:	61 95       	neg	r22
    23fa:	7f 4f       	sbci	r23, 0xFF	; 255
    23fc:	8f 4f       	sbci	r24, 0xFF	; 255
    23fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2400:	08 95       	ret

00002402 <__tablejump2__>:
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	05 90       	lpm	r0, Z+
    2408:	f4 91       	lpm	r31, Z
    240a:	e0 2d       	mov	r30, r0
    240c:	09 94       	ijmp

0000240e <__prologue_saves__>:
    240e:	2f 92       	push	r2
    2410:	3f 92       	push	r3
    2412:	4f 92       	push	r4
    2414:	5f 92       	push	r5
    2416:	6f 92       	push	r6
    2418:	7f 92       	push	r7
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	ca 1b       	sub	r28, r26
    2438:	db 0b       	sbc	r29, r27
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	09 94       	ijmp

00002446 <__epilogue_restores__>:
    2446:	2a 88       	ldd	r2, Y+18	; 0x12
    2448:	39 88       	ldd	r3, Y+17	; 0x11
    244a:	48 88       	ldd	r4, Y+16	; 0x10
    244c:	5f 84       	ldd	r5, Y+15	; 0x0f
    244e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2450:	7d 84       	ldd	r7, Y+13	; 0x0d
    2452:	8c 84       	ldd	r8, Y+12	; 0x0c
    2454:	9b 84       	ldd	r9, Y+11	; 0x0b
    2456:	aa 84       	ldd	r10, Y+10	; 0x0a
    2458:	b9 84       	ldd	r11, Y+9	; 0x09
    245a:	c8 84       	ldd	r12, Y+8	; 0x08
    245c:	df 80       	ldd	r13, Y+7	; 0x07
    245e:	ee 80       	ldd	r14, Y+6	; 0x06
    2460:	fd 80       	ldd	r15, Y+5	; 0x05
    2462:	0c 81       	ldd	r16, Y+4	; 0x04
    2464:	1b 81       	ldd	r17, Y+3	; 0x03
    2466:	aa 81       	ldd	r26, Y+2	; 0x02
    2468:	b9 81       	ldd	r27, Y+1	; 0x01
    246a:	ce 0f       	add	r28, r30
    246c:	d1 1d       	adc	r29, r1
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	ed 01       	movw	r28, r26
    247a:	08 95       	ret

0000247c <__udivmodsi4>:
    247c:	a1 e2       	ldi	r26, 0x21	; 33
    247e:	1a 2e       	mov	r1, r26
    2480:	aa 1b       	sub	r26, r26
    2482:	bb 1b       	sub	r27, r27
    2484:	fd 01       	movw	r30, r26
    2486:	0d c0       	rjmp	.+26     	; 0x24a2 <__udivmodsi4_ep>

00002488 <__udivmodsi4_loop>:
    2488:	aa 1f       	adc	r26, r26
    248a:	bb 1f       	adc	r27, r27
    248c:	ee 1f       	adc	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	a2 17       	cp	r26, r18
    2492:	b3 07       	cpc	r27, r19
    2494:	e4 07       	cpc	r30, r20
    2496:	f5 07       	cpc	r31, r21
    2498:	20 f0       	brcs	.+8      	; 0x24a2 <__udivmodsi4_ep>
    249a:	a2 1b       	sub	r26, r18
    249c:	b3 0b       	sbc	r27, r19
    249e:	e4 0b       	sbc	r30, r20
    24a0:	f5 0b       	sbc	r31, r21

000024a2 <__udivmodsi4_ep>:
    24a2:	66 1f       	adc	r22, r22
    24a4:	77 1f       	adc	r23, r23
    24a6:	88 1f       	adc	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	1a 94       	dec	r1
    24ac:	69 f7       	brne	.-38     	; 0x2488 <__udivmodsi4_loop>
    24ae:	60 95       	com	r22
    24b0:	70 95       	com	r23
    24b2:	80 95       	com	r24
    24b4:	90 95       	com	r25
    24b6:	9b 01       	movw	r18, r22
    24b8:	ac 01       	movw	r20, r24
    24ba:	bd 01       	movw	r22, r26
    24bc:	cf 01       	movw	r24, r30
    24be:	08 95       	ret

000024c0 <isspace>:
    24c0:	91 11       	cpse	r25, r1
    24c2:	0b c1       	rjmp	.+534    	; 0x26da <__ctype_isfalse>
    24c4:	80 32       	cpi	r24, 0x20	; 32
    24c6:	19 f0       	breq	.+6      	; 0x24ce <isspace+0xe>
    24c8:	89 50       	subi	r24, 0x09	; 9
    24ca:	85 50       	subi	r24, 0x05	; 5
    24cc:	d0 f7       	brcc	.-12     	; 0x24c2 <isspace+0x2>
    24ce:	08 95       	ret

000024d0 <strchr_P>:
    24d0:	fc 01       	movw	r30, r24
    24d2:	05 90       	lpm	r0, Z+
    24d4:	06 16       	cp	r0, r22
    24d6:	21 f0       	breq	.+8      	; 0x24e0 <strchr_P+0x10>
    24d8:	00 20       	and	r0, r0
    24da:	d9 f7       	brne	.-10     	; 0x24d2 <strchr_P+0x2>
    24dc:	c0 01       	movw	r24, r0
    24de:	08 95       	ret
    24e0:	31 97       	sbiw	r30, 0x01	; 1
    24e2:	cf 01       	movw	r24, r30
    24e4:	08 95       	ret

000024e6 <memcpy>:
    24e6:	fb 01       	movw	r30, r22
    24e8:	dc 01       	movw	r26, r24
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <memcpy+0xa>
    24ec:	01 90       	ld	r0, Z+
    24ee:	0d 92       	st	X+, r0
    24f0:	41 50       	subi	r20, 0x01	; 1
    24f2:	50 40       	sbci	r21, 0x00	; 0
    24f4:	d8 f7       	brcc	.-10     	; 0x24ec <memcpy+0x6>
    24f6:	08 95       	ret

000024f8 <fgetc>:
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	ec 01       	movw	r28, r24
    24fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2500:	20 ff       	sbrs	r18, 0
    2502:	33 c0       	rjmp	.+102    	; 0x256a <fgetc+0x72>
    2504:	26 ff       	sbrs	r18, 6
    2506:	0a c0       	rjmp	.+20     	; 0x251c <fgetc+0x24>
    2508:	2f 7b       	andi	r18, 0xBF	; 191
    250a:	2b 83       	std	Y+3, r18	; 0x03
    250c:	8e 81       	ldd	r24, Y+6	; 0x06
    250e:	9f 81       	ldd	r25, Y+7	; 0x07
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	9f 83       	std	Y+7, r25	; 0x07
    2514:	8e 83       	std	Y+6, r24	; 0x06
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	29 c0       	rjmp	.+82     	; 0x256e <fgetc+0x76>
    251c:	22 ff       	sbrs	r18, 2
    251e:	0f c0       	rjmp	.+30     	; 0x253e <fgetc+0x46>
    2520:	e8 81       	ld	r30, Y
    2522:	f9 81       	ldd	r31, Y+1	; 0x01
    2524:	80 81       	ld	r24, Z
    2526:	08 2e       	mov	r0, r24
    2528:	00 0c       	add	r0, r0
    252a:	99 0b       	sbc	r25, r25
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	19 f4       	brne	.+6      	; 0x2536 <fgetc+0x3e>
    2530:	20 62       	ori	r18, 0x20	; 32
    2532:	2b 83       	std	Y+3, r18	; 0x03
    2534:	1a c0       	rjmp	.+52     	; 0x256a <fgetc+0x72>
    2536:	31 96       	adiw	r30, 0x01	; 1
    2538:	f9 83       	std	Y+1, r31	; 0x01
    253a:	e8 83       	st	Y, r30
    253c:	0e c0       	rjmp	.+28     	; 0x255a <fgetc+0x62>
    253e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2540:	fb 85       	ldd	r31, Y+11	; 0x0b
    2542:	09 95       	icall
    2544:	97 ff       	sbrs	r25, 7
    2546:	09 c0       	rjmp	.+18     	; 0x255a <fgetc+0x62>
    2548:	2b 81       	ldd	r18, Y+3	; 0x03
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	11 f0       	breq	.+4      	; 0x2552 <fgetc+0x5a>
    254e:	80 e2       	ldi	r24, 0x20	; 32
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <fgetc+0x5c>
    2552:	80 e1       	ldi	r24, 0x10	; 16
    2554:	82 2b       	or	r24, r18
    2556:	8b 83       	std	Y+3, r24	; 0x03
    2558:	08 c0       	rjmp	.+16     	; 0x256a <fgetc+0x72>
    255a:	2e 81       	ldd	r18, Y+6	; 0x06
    255c:	3f 81       	ldd	r19, Y+7	; 0x07
    255e:	2f 5f       	subi	r18, 0xFF	; 255
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	3f 83       	std	Y+7, r19	; 0x07
    2564:	2e 83       	std	Y+6, r18	; 0x06
    2566:	99 27       	eor	r25, r25
    2568:	02 c0       	rjmp	.+4      	; 0x256e <fgetc+0x76>
    256a:	8f ef       	ldi	r24, 0xFF	; 255
    256c:	9f ef       	ldi	r25, 0xFF	; 255
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	08 95       	ret

00002574 <fputc>:
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	fb 01       	movw	r30, r22
    257e:	23 81       	ldd	r18, Z+3	; 0x03
    2580:	21 fd       	sbrc	r18, 1
    2582:	03 c0       	rjmp	.+6      	; 0x258a <fputc+0x16>
    2584:	8f ef       	ldi	r24, 0xFF	; 255
    2586:	9f ef       	ldi	r25, 0xFF	; 255
    2588:	2c c0       	rjmp	.+88     	; 0x25e2 <fputc+0x6e>
    258a:	22 ff       	sbrs	r18, 2
    258c:	16 c0       	rjmp	.+44     	; 0x25ba <fputc+0x46>
    258e:	46 81       	ldd	r20, Z+6	; 0x06
    2590:	57 81       	ldd	r21, Z+7	; 0x07
    2592:	24 81       	ldd	r18, Z+4	; 0x04
    2594:	35 81       	ldd	r19, Z+5	; 0x05
    2596:	42 17       	cp	r20, r18
    2598:	53 07       	cpc	r21, r19
    259a:	44 f4       	brge	.+16     	; 0x25ac <fputc+0x38>
    259c:	a0 81       	ld	r26, Z
    259e:	b1 81       	ldd	r27, Z+1	; 0x01
    25a0:	9d 01       	movw	r18, r26
    25a2:	2f 5f       	subi	r18, 0xFF	; 255
    25a4:	3f 4f       	sbci	r19, 0xFF	; 255
    25a6:	31 83       	std	Z+1, r19	; 0x01
    25a8:	20 83       	st	Z, r18
    25aa:	8c 93       	st	X, r24
    25ac:	26 81       	ldd	r18, Z+6	; 0x06
    25ae:	37 81       	ldd	r19, Z+7	; 0x07
    25b0:	2f 5f       	subi	r18, 0xFF	; 255
    25b2:	3f 4f       	sbci	r19, 0xFF	; 255
    25b4:	37 83       	std	Z+7, r19	; 0x07
    25b6:	26 83       	std	Z+6, r18	; 0x06
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <fputc+0x6e>
    25ba:	8b 01       	movw	r16, r22
    25bc:	ec 01       	movw	r28, r24
    25be:	fb 01       	movw	r30, r22
    25c0:	00 84       	ldd	r0, Z+8	; 0x08
    25c2:	f1 85       	ldd	r31, Z+9	; 0x09
    25c4:	e0 2d       	mov	r30, r0
    25c6:	09 95       	icall
    25c8:	89 2b       	or	r24, r25
    25ca:	e1 f6       	brne	.-72     	; 0x2584 <fputc+0x10>
    25cc:	d8 01       	movw	r26, r16
    25ce:	16 96       	adiw	r26, 0x06	; 6
    25d0:	8d 91       	ld	r24, X+
    25d2:	9c 91       	ld	r25, X
    25d4:	17 97       	sbiw	r26, 0x07	; 7
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	17 96       	adiw	r26, 0x07	; 7
    25da:	9c 93       	st	X, r25
    25dc:	8e 93       	st	-X, r24
    25de:	16 97       	sbiw	r26, 0x06	; 6
    25e0:	ce 01       	movw	r24, r28
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	08 95       	ret

000025ec <ungetc>:
    25ec:	fb 01       	movw	r30, r22
    25ee:	23 81       	ldd	r18, Z+3	; 0x03
    25f0:	20 ff       	sbrs	r18, 0
    25f2:	12 c0       	rjmp	.+36     	; 0x2618 <ungetc+0x2c>
    25f4:	26 fd       	sbrc	r18, 6
    25f6:	10 c0       	rjmp	.+32     	; 0x2618 <ungetc+0x2c>
    25f8:	8f 3f       	cpi	r24, 0xFF	; 255
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	93 07       	cpc	r25, r19
    25fe:	61 f0       	breq	.+24     	; 0x2618 <ungetc+0x2c>
    2600:	82 83       	std	Z+2, r24	; 0x02
    2602:	2f 7d       	andi	r18, 0xDF	; 223
    2604:	20 64       	ori	r18, 0x40	; 64
    2606:	23 83       	std	Z+3, r18	; 0x03
    2608:	26 81       	ldd	r18, Z+6	; 0x06
    260a:	37 81       	ldd	r19, Z+7	; 0x07
    260c:	21 50       	subi	r18, 0x01	; 1
    260e:	31 09       	sbc	r19, r1
    2610:	37 83       	std	Z+7, r19	; 0x07
    2612:	26 83       	std	Z+6, r18	; 0x06
    2614:	99 27       	eor	r25, r25
    2616:	08 95       	ret
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	9f ef       	ldi	r25, 0xFF	; 255
    261c:	08 95       	ret

0000261e <__ultoa_invert>:
    261e:	fa 01       	movw	r30, r20
    2620:	aa 27       	eor	r26, r26
    2622:	28 30       	cpi	r18, 0x08	; 8
    2624:	51 f1       	breq	.+84     	; 0x267a <__ultoa_invert+0x5c>
    2626:	20 31       	cpi	r18, 0x10	; 16
    2628:	81 f1       	breq	.+96     	; 0x268a <__ultoa_invert+0x6c>
    262a:	e8 94       	clt
    262c:	6f 93       	push	r22
    262e:	6e 7f       	andi	r22, 0xFE	; 254
    2630:	6e 5f       	subi	r22, 0xFE	; 254
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	8f 4f       	sbci	r24, 0xFF	; 255
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	af 4f       	sbci	r26, 0xFF	; 255
    263a:	b1 e0       	ldi	r27, 0x01	; 1
    263c:	3e d0       	rcall	.+124    	; 0x26ba <__ultoa_invert+0x9c>
    263e:	b4 e0       	ldi	r27, 0x04	; 4
    2640:	3c d0       	rcall	.+120    	; 0x26ba <__ultoa_invert+0x9c>
    2642:	67 0f       	add	r22, r23
    2644:	78 1f       	adc	r23, r24
    2646:	89 1f       	adc	r24, r25
    2648:	9a 1f       	adc	r25, r26
    264a:	a1 1d       	adc	r26, r1
    264c:	68 0f       	add	r22, r24
    264e:	79 1f       	adc	r23, r25
    2650:	8a 1f       	adc	r24, r26
    2652:	91 1d       	adc	r25, r1
    2654:	a1 1d       	adc	r26, r1
    2656:	6a 0f       	add	r22, r26
    2658:	71 1d       	adc	r23, r1
    265a:	81 1d       	adc	r24, r1
    265c:	91 1d       	adc	r25, r1
    265e:	a1 1d       	adc	r26, r1
    2660:	20 d0       	rcall	.+64     	; 0x26a2 <__ultoa_invert+0x84>
    2662:	09 f4       	brne	.+2      	; 0x2666 <__ultoa_invert+0x48>
    2664:	68 94       	set
    2666:	3f 91       	pop	r19
    2668:	2a e0       	ldi	r18, 0x0A	; 10
    266a:	26 9f       	mul	r18, r22
    266c:	11 24       	eor	r1, r1
    266e:	30 19       	sub	r19, r0
    2670:	30 5d       	subi	r19, 0xD0	; 208
    2672:	31 93       	st	Z+, r19
    2674:	de f6       	brtc	.-74     	; 0x262c <__ultoa_invert+0xe>
    2676:	cf 01       	movw	r24, r30
    2678:	08 95       	ret
    267a:	46 2f       	mov	r20, r22
    267c:	47 70       	andi	r20, 0x07	; 7
    267e:	40 5d       	subi	r20, 0xD0	; 208
    2680:	41 93       	st	Z+, r20
    2682:	b3 e0       	ldi	r27, 0x03	; 3
    2684:	0f d0       	rcall	.+30     	; 0x26a4 <__ultoa_invert+0x86>
    2686:	c9 f7       	brne	.-14     	; 0x267a <__ultoa_invert+0x5c>
    2688:	f6 cf       	rjmp	.-20     	; 0x2676 <__ultoa_invert+0x58>
    268a:	46 2f       	mov	r20, r22
    268c:	4f 70       	andi	r20, 0x0F	; 15
    268e:	40 5d       	subi	r20, 0xD0	; 208
    2690:	4a 33       	cpi	r20, 0x3A	; 58
    2692:	18 f0       	brcs	.+6      	; 0x269a <__ultoa_invert+0x7c>
    2694:	49 5d       	subi	r20, 0xD9	; 217
    2696:	31 fd       	sbrc	r19, 1
    2698:	40 52       	subi	r20, 0x20	; 32
    269a:	41 93       	st	Z+, r20
    269c:	02 d0       	rcall	.+4      	; 0x26a2 <__ultoa_invert+0x84>
    269e:	a9 f7       	brne	.-22     	; 0x268a <__ultoa_invert+0x6c>
    26a0:	ea cf       	rjmp	.-44     	; 0x2676 <__ultoa_invert+0x58>
    26a2:	b4 e0       	ldi	r27, 0x04	; 4
    26a4:	a6 95       	lsr	r26
    26a6:	97 95       	ror	r25
    26a8:	87 95       	ror	r24
    26aa:	77 95       	ror	r23
    26ac:	67 95       	ror	r22
    26ae:	ba 95       	dec	r27
    26b0:	c9 f7       	brne	.-14     	; 0x26a4 <__ultoa_invert+0x86>
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	61 05       	cpc	r22, r1
    26b6:	71 05       	cpc	r23, r1
    26b8:	08 95       	ret
    26ba:	9b 01       	movw	r18, r22
    26bc:	ac 01       	movw	r20, r24
    26be:	0a 2e       	mov	r0, r26
    26c0:	06 94       	lsr	r0
    26c2:	57 95       	ror	r21
    26c4:	47 95       	ror	r20
    26c6:	37 95       	ror	r19
    26c8:	27 95       	ror	r18
    26ca:	ba 95       	dec	r27
    26cc:	c9 f7       	brne	.-14     	; 0x26c0 <__ultoa_invert+0xa2>
    26ce:	62 0f       	add	r22, r18
    26d0:	73 1f       	adc	r23, r19
    26d2:	84 1f       	adc	r24, r20
    26d4:	95 1f       	adc	r25, r21
    26d6:	a0 1d       	adc	r26, r0
    26d8:	08 95       	ret

000026da <__ctype_isfalse>:
    26da:	99 27       	eor	r25, r25
    26dc:	88 27       	eor	r24, r24

000026de <__ctype_istrue>:
    26de:	08 95       	ret

000026e0 <_exit>:
    26e0:	f8 94       	cli

000026e2 <__stop_program>:
    26e2:	ff cf       	rjmp	.-2      	; 0x26e2 <__stop_program>
