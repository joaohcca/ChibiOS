
build/ch.elf:     formato de ficheiro elf32-avr

Secções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  000029c2  00002a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  008001e4  008001e4  00002b3a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002b3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000788  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000144a0  00000000  00000000  00003314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046cb  00000000  00000000  000177b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a6f  00000000  00000000  0001be7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000157c  00000000  00000000  000218f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f00  00000000  00000000  00022e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007bf7  00000000  00000000  00024d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  0002c963  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da secção .text:

00000000 <__vectors>:
       0:	77 c1       	rjmp	.+750    	; 0x2f0 <__ctors_end>
       2:	00 00       	nop
       4:	92 c1       	rjmp	.+804    	; 0x32a <__bad_interrupt>
       6:	00 00       	nop
       8:	90 c1       	rjmp	.+800    	; 0x32a <__bad_interrupt>
       a:	00 00       	nop
       c:	8e c1       	rjmp	.+796    	; 0x32a <__bad_interrupt>
       e:	00 00       	nop
      10:	8c c1       	rjmp	.+792    	; 0x32a <__bad_interrupt>
      12:	00 00       	nop
      14:	8a c1       	rjmp	.+788    	; 0x32a <__bad_interrupt>
      16:	00 00       	nop
      18:	88 c1       	rjmp	.+784    	; 0x32a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	86 c1       	rjmp	.+780    	; 0x32a <__bad_interrupt>
      1e:	00 00       	nop
      20:	84 c1       	rjmp	.+776    	; 0x32a <__bad_interrupt>
      22:	00 00       	nop
      24:	82 c1       	rjmp	.+772    	; 0x32a <__bad_interrupt>
      26:	00 00       	nop
      28:	80 c1       	rjmp	.+768    	; 0x32a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_11>
      30:	7c c1       	rjmp	.+760    	; 0x32a <__bad_interrupt>
      32:	00 00       	nop
      34:	7a c1       	rjmp	.+756    	; 0x32a <__bad_interrupt>
      36:	00 00       	nop
      38:	78 c1       	rjmp	.+752    	; 0x32a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	76 c1       	rjmp	.+748    	; 0x32a <__bad_interrupt>
      3e:	00 00       	nop
      40:	74 c1       	rjmp	.+744    	; 0x32a <__bad_interrupt>
      42:	00 00       	nop
      44:	72 c1       	rjmp	.+740    	; 0x32a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__vector_18>
      4c:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__vector_19>
      50:	6c c1       	rjmp	.+728    	; 0x32a <__bad_interrupt>
      52:	00 00       	nop
      54:	6a c1       	rjmp	.+724    	; 0x32a <__bad_interrupt>
      56:	00 00       	nop
      58:	68 c1       	rjmp	.+720    	; 0x32a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	66 c1       	rjmp	.+716    	; 0x32a <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_24>
      64:	62 c1       	rjmp	.+708    	; 0x32a <__bad_interrupt>
      66:	00 00       	nop
      68:	40 0b       	sbc	r20, r16
      6a:	0b 0a       	sbc	r0, r27
      6c:	0b 0a       	sbc	r0, r27
      6e:	0b 0a       	sbc	r0, r27
      70:	0b 0a       	sbc	r0, r27
      72:	0b 0a       	sbc	r0, r27
      74:	0b 0a       	sbc	r0, r27
      76:	0b 0a       	sbc	r0, r27
      78:	46 0b       	sbc	r20, r22
      7a:	0b 0a       	sbc	r0, r27
      7c:	0b 0a       	sbc	r0, r27
      7e:	0b 0a       	sbc	r0, r27
      80:	0b 0a       	sbc	r0, r27
      82:	0b 0a       	sbc	r0, r27
      84:	0b 0a       	sbc	r0, r27
      86:	0b 0a       	sbc	r0, r27
      88:	46 0b       	sbc	r20, r22
      8a:	0b 0a       	sbc	r0, r27
      8c:	0b 0a       	sbc	r0, r27
      8e:	0b 0a       	sbc	r0, r27
      90:	0b 0a       	sbc	r0, r27
      92:	0b 0a       	sbc	r0, r27
      94:	0b 0a       	sbc	r0, r27
      96:	0b 0a       	sbc	r0, r27
      98:	69 0b       	sbc	r22, r25
      9a:	0b 0a       	sbc	r0, r27
      9c:	0b 0a       	sbc	r0, r27
      9e:	0b 0a       	sbc	r0, r27
      a0:	0b 0a       	sbc	r0, r27
      a2:	0b 0a       	sbc	r0, r27
      a4:	0b 0a       	sbc	r0, r27
      a6:	0b 0a       	sbc	r0, r27
      a8:	63 0a       	sbc	r6, r19
      aa:	0b 0a       	sbc	r0, r27
      ac:	0b 0a       	sbc	r0, r27
      ae:	0b 0a       	sbc	r0, r27
      b0:	0b 0a       	sbc	r0, r27
      b2:	0b 0a       	sbc	r0, r27
      b4:	0b 0a       	sbc	r0, r27
      b6:	0b 0a       	sbc	r0, r27
      b8:	69 0b       	sbc	r22, r25
      ba:	0b 0a       	sbc	r0, r27
      bc:	0b 0a       	sbc	r0, r27
      be:	0b 0a       	sbc	r0, r27
      c0:	0b 0a       	sbc	r0, r27
      c2:	0b 0a       	sbc	r0, r27
      c4:	0b 0a       	sbc	r0, r27
      c6:	0b 0a       	sbc	r0, r27
      c8:	63 0a       	sbc	r6, r19
      ca:	0b 0a       	sbc	r0, r27
      cc:	0b 0a       	sbc	r0, r27
      ce:	0b 0a       	sbc	r0, r27
      d0:	0b 0a       	sbc	r0, r27
      d2:	0b 0a       	sbc	r0, r27
      d4:	0b 0a       	sbc	r0, r27
      d6:	0b 0a       	sbc	r0, r27
      d8:	27 0b       	sbc	r18, r23
      da:	0b 0a       	sbc	r0, r27
      dc:	0b 0a       	sbc	r0, r27
      de:	0b 0a       	sbc	r0, r27
      e0:	0b 0a       	sbc	r0, r27
      e2:	0b 0a       	sbc	r0, r27
      e4:	0b 0a       	sbc	r0, r27
      e6:	0b 0a       	sbc	r0, r27
      e8:	ab 0a       	sbc	r10, r27
      ea:	0b 0a       	sbc	r0, r27
      ec:	0b 0a       	sbc	r0, r27
      ee:	0b 0a       	sbc	r0, r27
      f0:	0b 0a       	sbc	r0, r27
      f2:	0b 0a       	sbc	r0, r27
      f4:	0b 0a       	sbc	r0, r27
      f6:	0b 0a       	sbc	r0, r27
      f8:	63 0a       	sbc	r6, r19
      fa:	0b 0a       	sbc	r0, r27
      fc:	0b 0a       	sbc	r0, r27
      fe:	0b 0a       	sbc	r0, r27
     100:	0b 0a       	sbc	r0, r27
     102:	0b 0a       	sbc	r0, r27
     104:	0b 0a       	sbc	r0, r27
     106:	0b 0a       	sbc	r0, r27
     108:	96 0a       	sbc	r9, r22
     10a:	0b 0a       	sbc	r0, r27
     10c:	0b 0a       	sbc	r0, r27
     10e:	0b 0a       	sbc	r0, r27
     110:	0b 0a       	sbc	r0, r27
     112:	0b 0a       	sbc	r0, r27
     114:	0b 0a       	sbc	r0, r27
     116:	0b 0a       	sbc	r0, r27
     118:	4e 0a       	sbc	r4, r30
     11a:	0b 0a       	sbc	r0, r27
     11c:	0b 0a       	sbc	r0, r27
     11e:	0b 0a       	sbc	r0, r27
     120:	0b 0a       	sbc	r0, r27
     122:	0b 0a       	sbc	r0, r27
     124:	0b 0a       	sbc	r0, r27
     126:	0b 0a       	sbc	r0, r27
     128:	be 0a       	sbc	r11, r30
     12a:	0b 0a       	sbc	r0, r27
     12c:	0b 0a       	sbc	r0, r27
     12e:	0b 0a       	sbc	r0, r27
     130:	0b 0a       	sbc	r0, r27
     132:	0b 0a       	sbc	r0, r27
     134:	0b 0a       	sbc	r0, r27
     136:	0b 0a       	sbc	r0, r27
     138:	d1 0a       	sbc	r13, r17
     13a:	0b 0a       	sbc	r0, r27
     13c:	0b 0a       	sbc	r0, r27
     13e:	0b 0a       	sbc	r0, r27
     140:	0b 0a       	sbc	r0, r27
     142:	0b 0a       	sbc	r0, r27
     144:	0b 0a       	sbc	r0, r27
     146:	0b 0a       	sbc	r0, r27
     148:	0b 0a       	sbc	r0, r27
     14a:	0b 0a       	sbc	r0, r27
     14c:	0b 0a       	sbc	r0, r27
     14e:	0b 0a       	sbc	r0, r27
     150:	0b 0a       	sbc	r0, r27
     152:	0b 0a       	sbc	r0, r27
     154:	0b 0a       	sbc	r0, r27
     156:	0b 0a       	sbc	r0, r27
     158:	0b 0a       	sbc	r0, r27
     15a:	0b 0a       	sbc	r0, r27
     15c:	0b 0a       	sbc	r0, r27
     15e:	0b 0a       	sbc	r0, r27
     160:	0b 0a       	sbc	r0, r27
     162:	0b 0a       	sbc	r0, r27
     164:	0b 0a       	sbc	r0, r27
     166:	0b 0a       	sbc	r0, r27
     168:	86 0b       	sbc	r24, r22
     16a:	0b 0a       	sbc	r0, r27
     16c:	0b 0a       	sbc	r0, r27
     16e:	0b 0a       	sbc	r0, r27
     170:	0b 0a       	sbc	r0, r27
     172:	0b 0a       	sbc	r0, r27
     174:	0b 0a       	sbc	r0, r27
     176:	0b 0a       	sbc	r0, r27
     178:	07 0b       	sbc	r16, r23
     17a:	0b 0a       	sbc	r0, r27
     17c:	0b 0a       	sbc	r0, r27
     17e:	0b 0a       	sbc	r0, r27
     180:	0b 0a       	sbc	r0, r27
     182:	0b 0a       	sbc	r0, r27
     184:	0b 0a       	sbc	r0, r27
     186:	0b 0a       	sbc	r0, r27
     188:	0b 0a       	sbc	r0, r27
     18a:	0b 0a       	sbc	r0, r27
     18c:	0b 0a       	sbc	r0, r27
     18e:	0b 0a       	sbc	r0, r27
     190:	0b 0a       	sbc	r0, r27
     192:	0b 0a       	sbc	r0, r27
     194:	0b 0a       	sbc	r0, r27
     196:	0b 0a       	sbc	r0, r27
     198:	0b 0a       	sbc	r0, r27
     19a:	0b 0a       	sbc	r0, r27
     19c:	0b 0a       	sbc	r0, r27
     19e:	0b 0a       	sbc	r0, r27
     1a0:	0b 0a       	sbc	r0, r27
     1a2:	0b 0a       	sbc	r0, r27
     1a4:	0b 0a       	sbc	r0, r27
     1a6:	0b 0a       	sbc	r0, r27
     1a8:	71 0a       	sbc	r7, r17
     1aa:	0b 0a       	sbc	r0, r27
     1ac:	0b 0a       	sbc	r0, r27
     1ae:	0b 0a       	sbc	r0, r27
     1b0:	0b 0a       	sbc	r0, r27
     1b2:	0b 0a       	sbc	r0, r27
     1b4:	0b 0a       	sbc	r0, r27
     1b6:	0b 0a       	sbc	r0, r27
     1b8:	74 0a       	sbc	r7, r20
     1ba:	0b 0a       	sbc	r0, r27
     1bc:	0b 0a       	sbc	r0, r27
     1be:	0b 0a       	sbc	r0, r27
     1c0:	0b 0a       	sbc	r0, r27
     1c2:	0b 0a       	sbc	r0, r27
     1c4:	0b 0a       	sbc	r0, r27
     1c6:	0b 0a       	sbc	r0, r27
     1c8:	32 0a       	sbc	r3, r18
     1ca:	0b 0a       	sbc	r0, r27
     1cc:	0b 0a       	sbc	r0, r27
     1ce:	0b 0a       	sbc	r0, r27
     1d0:	0b 0a       	sbc	r0, r27
     1d2:	0b 0a       	sbc	r0, r27
     1d4:	0b 0a       	sbc	r0, r27
     1d6:	0b 0a       	sbc	r0, r27
     1d8:	2d 0b       	sbc	r18, r29
     1da:	0b 0a       	sbc	r0, r27
     1dc:	0b 0a       	sbc	r0, r27
     1de:	0b 0a       	sbc	r0, r27
     1e0:	0b 0a       	sbc	r0, r27
     1e2:	0b 0a       	sbc	r0, r27
     1e4:	0b 0a       	sbc	r0, r27
     1e6:	0b 0a       	sbc	r0, r27
     1e8:	48 0a       	sbc	r4, r24
     1ea:	0b 0a       	sbc	r0, r27
     1ec:	0b 0a       	sbc	r0, r27
     1ee:	0b 0a       	sbc	r0, r27
     1f0:	0b 0a       	sbc	r0, r27
     1f2:	0b 0a       	sbc	r0, r27
     1f4:	0b 0a       	sbc	r0, r27
     1f6:	0b 0a       	sbc	r0, r27
     1f8:	48 0a       	sbc	r4, r24
     1fa:	33 0f       	add	r19, r19
     1fc:	92 0d       	add	r25, r2
     1fe:	92 0d       	add	r25, r2
     200:	92 0d       	add	r25, r2
     202:	92 0d       	add	r25, r2
     204:	33 0f       	add	r19, r19
     206:	92 0d       	add	r25, r2
     208:	92 0d       	add	r25, r2
     20a:	92 0d       	add	r25, r2
     20c:	92 0d       	add	r25, r2
     20e:	92 0d       	add	r25, r2
     210:	f2 0e       	add	r15, r18
     212:	92 0d       	add	r25, r2
     214:	92 0d       	add	r25, r2
     216:	92 0d       	add	r25, r2
     218:	92 0d       	add	r25, r2
     21a:	92 0d       	add	r25, r2
     21c:	8f 0e       	add	r8, r31
     21e:	92 0d       	add	r25, r2
     220:	92 0d       	add	r25, r2
     222:	2e 0f       	add	r18, r30
     224:	92 0d       	add	r25, r2
     226:	92 0d       	add	r25, r2
     228:	92 0d       	add	r25, r2
     22a:	92 0d       	add	r25, r2
     22c:	92 0d       	add	r25, r2
     22e:	92 0d       	add	r25, r2
     230:	92 0d       	add	r25, r2
     232:	92 0d       	add	r25, r2
     234:	92 0d       	add	r25, r2
     236:	92 0d       	add	r25, r2
     238:	7c 0e       	add	r7, r28
     23a:	33 0f       	add	r19, r19
     23c:	92 0d       	add	r25, r2
     23e:	92 0d       	add	r25, r2
     240:	92 0d       	add	r25, r2
     242:	92 0d       	add	r25, r2
     244:	33 0f       	add	r19, r19
     246:	92 0d       	add	r25, r2
     248:	92 0d       	add	r25, r2
     24a:	92 0d       	add	r25, r2
     24c:	92 0d       	add	r25, r2
     24e:	92 0d       	add	r25, r2
     250:	f2 0e       	add	r15, r18
     252:	92 0d       	add	r25, r2
     254:	92 0d       	add	r25, r2
     256:	92 0d       	add	r25, r2
     258:	46 0e       	add	r4, r22
     25a:	92 0d       	add	r25, r2
     25c:	8f 0e       	add	r8, r31
     25e:	92 0d       	add	r25, r2
     260:	92 0d       	add	r25, r2
     262:	2e 0f       	add	r18, r30
     264:	8f 0f       	add	r24, r31
     266:	12 0e       	add	r1, r18
     268:	12 0e       	add	r1, r18
     26a:	12 0e       	add	r1, r18
     26c:	12 0e       	add	r1, r18
     26e:	8f 0f       	add	r24, r31
     270:	12 0e       	add	r1, r18
     272:	12 0e       	add	r1, r18
     274:	12 0e       	add	r1, r18
     276:	12 0e       	add	r1, r18
     278:	12 0e       	add	r1, r18
     27a:	f1 0e       	add	r15, r17
     27c:	12 0e       	add	r1, r18
     27e:	12 0e       	add	r1, r18
     280:	12 0e       	add	r1, r18
     282:	12 0e       	add	r1, r18
     284:	12 0e       	add	r1, r18
     286:	8e 0e       	add	r8, r30
     288:	12 0e       	add	r1, r18
     28a:	12 0e       	add	r1, r18
     28c:	ab 0f       	add	r26, r27
     28e:	12 0e       	add	r1, r18
     290:	12 0e       	add	r1, r18
     292:	12 0e       	add	r1, r18
     294:	12 0e       	add	r1, r18
     296:	12 0e       	add	r1, r18
     298:	12 0e       	add	r1, r18
     29a:	12 0e       	add	r1, r18
     29c:	12 0e       	add	r1, r18
     29e:	12 0e       	add	r1, r18
     2a0:	12 0e       	add	r1, r18
     2a2:	7c 0e       	add	r7, r28
     2a4:	8f 0f       	add	r24, r31
     2a6:	12 0e       	add	r1, r18
     2a8:	12 0e       	add	r1, r18
     2aa:	12 0e       	add	r1, r18
     2ac:	12 0e       	add	r1, r18
     2ae:	8f 0f       	add	r24, r31
     2b0:	12 0e       	add	r1, r18
     2b2:	12 0e       	add	r1, r18
     2b4:	12 0e       	add	r1, r18
     2b6:	12 0e       	add	r1, r18
     2b8:	12 0e       	add	r1, r18
     2ba:	f1 0e       	add	r15, r17
     2bc:	12 0e       	add	r1, r18
     2be:	12 0e       	add	r1, r18
     2c0:	12 0e       	add	r1, r18
     2c2:	46 0e       	add	r4, r22
     2c4:	12 0e       	add	r1, r18
     2c6:	8e 0e       	add	r8, r30
     2c8:	12 0e       	add	r1, r18
     2ca:	12 0e       	add	r1, r18
     2cc:	ab 0f       	add	r26, r27

000002ce <__trampolines_end>:
     2ce:	45 46       	sbci	r20, 0x65	; 101
     2d0:	47 65       	ori	r20, 0x57	; 87
     2d2:	66 67       	ori	r22, 0x76	; 118
	...

000002d5 <__c.2314>:
     2d5:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000002e5 <__c.2449>:
     2e5:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

000002f0 <__ctors_end>:
     2f0:	11 24       	eor	r1, r1
     2f2:	1f be       	out	0x3f, r1	; 63
     2f4:	cf ef       	ldi	r28, 0xFF	; 255
     2f6:	d8 e0       	ldi	r29, 0x08	; 8
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	cd bf       	out	0x3d, r28	; 61

000002fc <__do_copy_data>:
     2fc:	11 e0       	ldi	r17, 0x01	; 1
     2fe:	a0 e0       	ldi	r26, 0x00	; 0
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	e2 ec       	ldi	r30, 0xC2	; 194
     304:	f9 e2       	ldi	r31, 0x29	; 41
     306:	02 c0       	rjmp	.+4      	; 0x30c <__do_copy_data+0x10>
     308:	05 90       	lpm	r0, Z+
     30a:	0d 92       	st	X+, r0
     30c:	a4 3e       	cpi	r26, 0xE4	; 228
     30e:	b1 07       	cpc	r27, r17
     310:	d9 f7       	brne	.-10     	; 0x308 <__do_copy_data+0xc>

00000312 <__do_clear_bss>:
     312:	24 e0       	ldi	r18, 0x04	; 4
     314:	a4 ee       	ldi	r26, 0xE4	; 228
     316:	b1 e0       	ldi	r27, 0x01	; 1
     318:	01 c0       	rjmp	.+2      	; 0x31c <.do_clear_bss_start>

0000031a <.do_clear_bss_loop>:
     31a:	1d 92       	st	X+, r1

0000031c <.do_clear_bss_start>:
     31c:	aa 30       	cpi	r26, 0x0A	; 10
     31e:	b2 07       	cpc	r27, r18
     320:	e1 f7       	brne	.-8      	; 0x31a <.do_clear_bss_loop>
     322:	0e 94 58 10 	call	0x20b0	; 0x20b0 <main>
     326:	0c 94 df 14 	jmp	0x29be	; 0x29be <_exit>

0000032a <__bad_interrupt>:
     32a:	6a ce       	rjmp	.-812    	; 0x0 <__vectors>

0000032c <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     32c:	ff cf       	rjmp	.-2      	; 0x32c <_idle_thread>

0000032e <chSysInit>:
     32e:	e7 d1       	rcall	.+974    	; 0x6fe <_scheduler_init>
     330:	88 d0       	rcall	.+272    	; 0x442 <_vt_init>
     332:	a3 d4       	rcall	.+2374   	; 0xc7a <_core_init>
     334:	da d4       	rcall	.+2484   	; 0xcea <_heap_init>
     336:	40 e8       	ldi	r20, 0x80	; 128
     338:	67 e1       	ldi	r22, 0x17	; 23
     33a:	71 e0       	ldi	r23, 0x01	; 1
     33c:	83 e7       	ldi	r24, 0x73	; 115
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	f5 d2       	rcall	.+1514   	; 0x92c <_thread_init>
     342:	fc 01       	movw	r30, r24
     344:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <ch+0xc>
     348:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <ch+0xb>
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	95 87       	std	Z+13, r25	; 0x0d
     350:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <__avr_in_isr>
     354:	78 94       	sei
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	6b c3       	rjmp	.+1750   	; 0xa32 <chThdCreate>

0000035c <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
     36c:	c0 91 69 03 	lds	r28, 0x0369	; 0x800369 <ch+0xd>
     370:	d0 91 6a 03 	lds	r29, 0x036A	; 0x80036a <ch+0xe>
     374:	2c 81       	ldd	r18, Y+4	; 0x04
     376:	3d 81       	ldd	r19, Y+5	; 0x05
     378:	89 e6       	ldi	r24, 0x69	; 105
     37a:	e8 2e       	mov	r14, r24
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	f8 2e       	mov	r15, r24
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     380:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     384:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
     388:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <ch+0x13>
     38c:	50 91 70 03 	lds	r21, 0x0370	; 0x800370 <ch+0x14>
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
     390:	8b 01       	movw	r16, r22
     392:	04 1b       	sub	r16, r20
     394:	15 0b       	sbc	r17, r21

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
     396:	02 17       	cp	r16, r18
     398:	13 07       	cpc	r17, r19
     39a:	90 f4       	brcc	.+36     	; 0x3c0 <chSysTimerHandlerI+0x64>
     39c:	2a c0       	rjmp	.+84     	; 0x3f2 <chSysTimerHandlerI+0x96>
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
     39e:	88 85       	ldd	r24, Y+8	; 0x08
     3a0:	99 85       	ldd	r25, Y+9	; 0x09
     3a2:	f6 01       	movw	r30, r12
     3a4:	09 95       	icall
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
     3a6:	c0 91 69 03 	lds	r28, 0x0369	; 0x800369 <ch+0xd>
     3aa:	d0 91 6a 03 	lds	r29, 0x036A	; 0x80036a <ch+0xe>
    }
    while (vtp->delta <= nowdelta);
     3ae:	2c 81       	ldd	r18, Y+4	; 0x04
     3b0:	3d 81       	ldd	r19, Y+5	; 0x05
     3b2:	02 17       	cp	r16, r18
     3b4:	13 07       	cpc	r17, r19
     3b6:	20 f3       	brcs	.-56     	; 0x380 <chSysTimerHandlerI+0x24>
     3b8:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <ch+0x13>
     3bc:	50 91 70 03 	lds	r21, 0x0370	; 0x800370 <ch+0x14>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
     3c0:	42 0f       	add	r20, r18
     3c2:	53 1f       	adc	r21, r19
     3c4:	50 93 70 03 	sts	0x0370, r21	; 0x800370 <ch+0x14>
     3c8:	40 93 6f 03 	sts	0x036F, r20	; 0x80036f <ch+0x13>
      nowdelta -= vtp->delta;
     3cc:	02 1b       	sub	r16, r18
     3ce:	13 0b       	sbc	r17, r19

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     3d0:	e8 81       	ld	r30, Y
     3d2:	f9 81       	ldd	r31, Y+1	; 0x01
     3d4:	f3 82       	std	Z+3, r15	; 0x03
     3d6:	e2 82       	std	Z+2, r14	; 0x02
      ch.vtlist.next = vtp->next;
     3d8:	f0 93 6a 03 	sts	0x036A, r31	; 0x80036a <ch+0xe>
     3dc:	e0 93 69 03 	sts	0x0369, r30	; 0x800369 <ch+0xd>
      fn = vtp->func;
     3e0:	ce 80       	ldd	r12, Y+6	; 0x06
     3e2:	df 80       	ldd	r13, Y+7	; 0x07
      vtp->func = NULL;
     3e4:	1f 82       	std	Y+7, r1	; 0x07
     3e6:	1e 82       	std	Y+6, r1	; 0x06

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     3e8:	e9 56       	subi	r30, 0x69	; 105
     3ea:	f3 40       	sbci	r31, 0x03	; 3
     3ec:	c1 f6       	brne	.-80     	; 0x39e <chSysTimerHandlerI+0x42>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     3ee:	d0 d4       	rcall	.+2464   	; 0xd90 <stStopAlarm>
     3f0:	d6 cf       	rjmp	.-84     	; 0x39e <chSysTimerHandlerI+0x42>
    }
    while (vtp->delta <= nowdelta);
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     3f2:	f3 e0       	ldi	r31, 0x03	; 3
     3f4:	c9 36       	cpi	r28, 0x69	; 105
     3f6:	df 07       	cpc	r29, r31
     3f8:	d9 f0       	breq	.+54     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
     3fa:	70 93 70 03 	sts	0x0370, r23	; 0x800370 <ch+0x14>
     3fe:	60 93 6f 03 	sts	0x036F, r22	; 0x80036f <ch+0x13>
  ch.vtlist.next->delta -= nowdelta;
     402:	8c 81       	ldd	r24, Y+4	; 0x04
     404:	9d 81       	ldd	r25, Y+5	; 0x05
     406:	80 1b       	sub	r24, r16
     408:	91 0b       	sbc	r25, r17
     40a:	9d 83       	std	Y+5, r25	; 0x05
     40c:	8c 83       	std	Y+4, r24	; 0x04

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	91 05       	cpc	r25, r1
     412:	58 f0       	brcs	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     414:	86 0f       	add	r24, r22
     416:	97 1f       	adc	r25, r23
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	b6 c4       	rjmp	.+2412   	; 0xd96 <stSetAlarm>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	f2 cf       	rjmp	.-28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     442:	ec e5       	ldi	r30, 0x5C	; 92
     444:	f3 e0       	ldi	r31, 0x03	; 3
     446:	89 e6       	ldi	r24, 0x69	; 105
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	96 87       	std	Z+14, r25	; 0x0e
     44c:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     44e:	90 8b       	std	Z+16, r25	; 0x10
     450:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	9f ef       	ldi	r25, 0xFF	; 255
     456:	92 8b       	std	Z+18, r25	; 0x12
     458:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
     45a:	14 8a       	std	Z+20, r1	; 0x14
     45c:	13 8a       	std	Z+19, r1	; 0x13
     45e:	08 95       	ret

00000460 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	7c 01       	movw	r14, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     46e:	dc 01       	movw	r26, r24
     470:	19 96       	adiw	r26, 0x09	; 9
     472:	3c 93       	st	X, r19
     474:	2e 93       	st	-X, r18
     476:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     478:	17 96       	adiw	r26, 0x07	; 7
     47a:	5c 93       	st	X, r21
     47c:	4e 93       	st	-X, r20
     47e:	16 97       	sbiw	r26, 0x06	; 6
     480:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     484:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     488:	62 30       	cpi	r22, 0x02	; 2
     48a:	71 05       	cpc	r23, r1
     48c:	08 f4       	brcc	.+2      	; 0x490 <chVTDoSetI+0x30>
     48e:	59 c0       	rjmp	.+178    	; 0x542 <chVTDoSetI+0xe2>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     490:	00 91 69 03 	lds	r16, 0x0369	; 0x800369 <ch+0xd>
     494:	10 91 6a 03 	lds	r17, 0x036A	; 0x80036a <ch+0xe>
     498:	b3 e0       	ldi	r27, 0x03	; 3
     49a:	09 36       	cpi	r16, 0x69	; 105
     49c:	1b 07       	cpc	r17, r27
     49e:	09 f4       	brne	.+2      	; 0x4a2 <chVTDoSetI+0x42>
     4a0:	5a c0       	rjmp	.+180    	; 0x556 <chVTDoSetI+0xf6>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
     4a2:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <ch+0x13>
     4a6:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <ch+0x14>
     4aa:	28 1b       	sub	r18, r24
     4ac:	39 0b       	sbc	r19, r25
     4ae:	eb 01       	movw	r28, r22
     4b0:	c2 0f       	add	r28, r18
     4b2:	d3 1f       	adc	r29, r19

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     4b4:	d8 01       	movw	r26, r16

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
     4b6:	c2 17       	cp	r28, r18
     4b8:	d3 07       	cpc	r29, r19
     4ba:	e0 f1       	brcs	.+120    	; 0x534 <chVTDoSetI+0xd4>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
     4bc:	14 96       	adiw	r26, 0x04	; 4
     4be:	2d 91       	ld	r18, X+
     4c0:	3c 91       	ld	r19, X
     4c2:	15 97       	sbiw	r26, 0x05	; 5
     4c4:	c2 17       	cp	r28, r18
     4c6:	d3 07       	cpc	r29, r19
     4c8:	48 f4       	brcc	.+18     	; 0x4dc <chVTDoSetI+0x7c>
     4ca:	3e c0       	rjmp	.+124    	; 0x548 <chVTDoSetI+0xe8>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     4cc:	c2 1b       	sub	r28, r18
     4ce:	d3 0b       	sbc	r29, r19
    p = p->next;
     4d0:	d8 01       	movw	r26, r16
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
     4d2:	0d 91       	ld	r16, X+
     4d4:	1c 91       	ld	r17, X
     4d6:	f8 01       	movw	r30, r16
     4d8:	24 81       	ldd	r18, Z+4	; 0x04
     4da:	35 81       	ldd	r19, Z+5	; 0x05
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     4dc:	2c 17       	cp	r18, r28
     4de:	3d 07       	cpc	r19, r29
     4e0:	a8 f3       	brcs	.-22     	; 0x4cc <chVTDoSetI+0x6c>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     4e2:	d7 01       	movw	r26, r14
     4e4:	0d 93       	st	X+, r16
     4e6:	1c 93       	st	X, r17
  vtp->prev = vtp->next->prev;
     4e8:	d8 01       	movw	r26, r16
     4ea:	12 96       	adiw	r26, 0x02	; 2
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	13 97       	sbiw	r26, 0x03	; 3
     4f2:	d7 01       	movw	r26, r14
     4f4:	13 96       	adiw	r26, 0x03	; 3
     4f6:	fc 93       	st	X, r31
     4f8:	ee 93       	st	-X, r30
     4fa:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     4fc:	f1 82       	std	Z+1, r15	; 0x01
     4fe:	e0 82       	st	Z, r14
  p->prev = vtp;
     500:	f8 01       	movw	r30, r16
     502:	f3 82       	std	Z+3, r15	; 0x03
     504:	e2 82       	std	Z+2, r14	; 0x02
  vtp->delta = delta;
     506:	15 96       	adiw	r26, 0x05	; 5
     508:	dc 93       	st	X, r29
     50a:	ce 93       	st	-X, r28
     50c:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     50e:	84 81       	ldd	r24, Z+4	; 0x04
     510:	95 81       	ldd	r25, Z+5	; 0x05
     512:	8c 1b       	sub	r24, r28
     514:	9d 0b       	sbc	r25, r29
     516:	95 83       	std	Z+5, r25	; 0x05
     518:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	9f ef       	ldi	r25, 0xFF	; 255
     51e:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <ch+0x12>
     522:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <ch+0x11>
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	08 95       	ret

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     534:	14 96       	adiw	r26, 0x04	; 4
     536:	8d 91       	ld	r24, X+
     538:	9c 91       	ld	r25, X
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	c8 1b       	sub	r28, r24
     53e:	d9 0b       	sbc	r29, r25
     540:	c8 cf       	rjmp	.-112    	; 0x4d2 <chVTDoSetI+0x72>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     542:	62 e0       	ldi	r22, 0x02	; 2
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	a4 cf       	rjmp	.-184    	; 0x490 <chVTDoSetI+0x30>
     548:	8c 0f       	add	r24, r28
     54a:	9d 1f       	adc	r25, r29
     54c:	24 d4       	rcall	.+2120   	; 0xd96 <stSetAlarm>
     54e:	f8 01       	movw	r30, r16
     550:	24 81       	ldd	r18, Z+4	; 0x04
     552:	35 81       	ldd	r19, Z+5	; 0x05
     554:	c3 cf       	rjmp	.-122    	; 0x4dc <chVTDoSetI+0x7c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
     556:	30 93 70 03 	sts	0x0370, r19	; 0x800370 <ch+0x14>
     55a:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <ch+0x13>
      ch.vtlist.next = vtp;
     55e:	f0 92 6a 03 	sts	0x036A, r15	; 0x80036a <ch+0xe>
     562:	e0 92 69 03 	sts	0x0369, r14	; 0x800369 <ch+0xd>
      ch.vtlist.prev = vtp;
     566:	f0 92 6c 03 	sts	0x036C, r15	; 0x80036c <ch+0x10>
     56a:	e0 92 6b 03 	sts	0x036B, r14	; 0x80036b <ch+0xf>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
     56e:	f7 01       	movw	r30, r14
     570:	11 83       	std	Z+1, r17	; 0x01
     572:	00 83       	st	Z, r16
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
     574:	13 83       	std	Z+3, r17	; 0x03
     576:	02 83       	std	Z+2, r16	; 0x02
      vtp->delta = delay;
     578:	75 83       	std	Z+5, r23	; 0x05
     57a:	64 83       	std	Z+4, r22	; 0x04
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
     57c:	cb 01       	movw	r24, r22
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	f7 c3       	rjmp	.+2030   	; 0xd7e <stStartAlarm>

00000590 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	fc 01       	movw	r30, r24
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
     596:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <ch+0xd>
     59a:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <ch+0xe>
     59e:	a8 17       	cp	r26, r24
     5a0:	b9 07       	cpc	r27, r25
     5a2:	09 f1       	breq	.+66     	; 0x5e6 <chVTDoResetI+0x56>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
     5a4:	c2 81       	ldd	r28, Z+2	; 0x02
     5a6:	d3 81       	ldd	r29, Z+3	; 0x03
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	99 83       	std	Y+1, r25	; 0x01
     5ae:	88 83       	st	Y, r24
    vtp->next->prev = vtp->prev;
     5b0:	a0 81       	ld	r26, Z
     5b2:	b1 81       	ldd	r27, Z+1	; 0x01
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	dc 93       	st	X, r29
     5b8:	ce 93       	st	-X, r28
     5ba:	12 97       	sbiw	r26, 0x02	; 2
    vtp->func = NULL;
     5bc:	17 82       	std	Z+7, r1	; 0x07
     5be:	16 82       	std	Z+6, r1	; 0x06

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	a9 36       	cpi	r26, 0x69	; 105
     5c4:	b8 07       	cpc	r27, r24
     5c6:	61 f0       	breq	.+24     	; 0x5e0 <chVTDoResetI+0x50>
      vtp->next->delta += vtp->delta;
     5c8:	14 96       	adiw	r26, 0x04	; 4
     5ca:	2d 91       	ld	r18, X+
     5cc:	3c 91       	ld	r19, X
     5ce:	15 97       	sbiw	r26, 0x05	; 5
     5d0:	84 81       	ldd	r24, Z+4	; 0x04
     5d2:	95 81       	ldd	r25, Z+5	; 0x05
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	15 96       	adiw	r26, 0x05	; 5
     5da:	9c 93       	st	X, r25
     5dc:	8e 93       	st	-X, r24
     5de:	14 97       	sbiw	r26, 0x04	; 4
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
     5e6:	ed 91       	ld	r30, X+
     5e8:	fc 91       	ld	r31, X
     5ea:	11 97       	sbiw	r26, 0x01	; 1
     5ec:	f0 93 6a 03 	sts	0x036A, r31	; 0x80036a <ch+0xe>
     5f0:	e0 93 69 03 	sts	0x0369, r30	; 0x800369 <ch+0xd>
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
     5f4:	89 e6       	ldi	r24, 0x69	; 105
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	93 83       	std	Z+3, r25	; 0x03
     5fa:	82 83       	std	Z+2, r24	; 0x02
  vtp->func = NULL;
     5fc:	17 96       	adiw	r26, 0x07	; 7
     5fe:	1c 92       	st	X, r1
     600:	1e 92       	st	-X, r1
     602:	16 97       	sbiw	r26, 0x06	; 6

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     604:	e8 17       	cp	r30, r24
     606:	f9 07       	cpc	r31, r25
     608:	29 f1       	breq	.+74     	; 0x654 <chVTDoResetI+0xc4>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
     60a:	24 81       	ldd	r18, Z+4	; 0x04
     60c:	35 81       	ldd	r19, Z+5	; 0x05
     60e:	14 96       	adiw	r26, 0x04	; 4
     610:	8d 91       	ld	r24, X+
     612:	9c 91       	ld	r25, X
     614:	15 97       	sbiw	r26, 0x05	; 5
     616:	82 0f       	add	r24, r18
     618:	93 1f       	adc	r25, r19
     61a:	95 83       	std	Z+5, r25	; 0x05
     61c:	84 83       	std	Z+4, r24	; 0x04
     61e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     622:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
     626:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <ch+0x13>
     62a:	50 91 70 03 	lds	r21, 0x0370	; 0x800370 <ch+0x14>
     62e:	24 1b       	sub	r18, r20
     630:	35 0b       	sbc	r19, r21

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
     632:	28 17       	cp	r18, r24
     634:	39 07       	cpc	r19, r25
     636:	a0 f6       	brcc	.-88     	; 0x5e0 <chVTDoResetI+0x50>
  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     638:	bc 01       	movw	r22, r24
     63a:	62 1b       	sub	r22, r18
     63c:	73 0b       	sbc	r23, r19
     63e:	62 30       	cpi	r22, 0x02	; 2
     640:	71 05       	cpc	r23, r1
     642:	28 f0       	brcs	.+10     	; 0x64e <chVTDoResetI+0xbe>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     644:	84 0f       	add	r24, r20
     646:	95 1f       	adc	r25, r21
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	a4 c3       	rjmp	.+1864   	; 0xd96 <stSetAlarm>
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     64e:	c9 01       	movw	r24, r18
     650:	02 96       	adiw	r24, 0x02	; 2
     652:	f8 cf       	rjmp	.-16     	; 0x644 <chVTDoResetI+0xb4>
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     654:	df 91       	pop	r29
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     656:	cf 91       	pop	r28
     658:	9b c3       	rjmp	.+1846   	; 0xd90 <stStopAlarm>

0000065a <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	dc 01       	movw	r26, r24
     660:	1d 96       	adiw	r26, 0x0d	; 13
     662:	8c 91       	ld	r24, X
     664:	1d 97       	sbiw	r26, 0x0d	; 13
     666:	84 30       	cpi	r24, 0x04	; 4
     668:	99 f1       	breq	.+102    	; 0x6d0 <wakeup+0x76>
     66a:	70 f5       	brcc	.+92     	; 0x6c8 <wakeup+0x6e>
     66c:	88 23       	and	r24, r24
     66e:	49 f1       	breq	.+82     	; 0x6c2 <wakeup+0x68>
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	31 f4       	brne	.+12     	; 0x680 <wakeup+0x26>
     674:	50 96       	adiw	r26, 0x10	; 16
     676:	ed 91       	ld	r30, X+
     678:	fc 91       	ld	r31, X
     67a:	51 97       	sbiw	r26, 0x11	; 17
     67c:	11 82       	std	Z+1, r1	; 0x01
     67e:	10 82       	st	Z, r1
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	51 96       	adiw	r26, 0x11	; 17
     686:	9c 93       	st	X, r25
     688:	8e 93       	st	-X, r24
     68a:	50 97       	sbiw	r26, 0x10	; 16
     68c:	1d 96       	adiw	r26, 0x0d	; 13
     68e:	1c 92       	st	X, r1
     690:	1d 97       	sbiw	r26, 0x0d	; 13
     692:	14 96       	adiw	r26, 0x04	; 4
     694:	2c 91       	ld	r18, X
     696:	14 97       	sbiw	r26, 0x04	; 4
     698:	ec e5       	ldi	r30, 0x5C	; 92
     69a:	f3 e0       	ldi	r31, 0x03	; 3
     69c:	01 90       	ld	r0, Z+
     69e:	f0 81       	ld	r31, Z
     6a0:	e0 2d       	mov	r30, r0
     6a2:	94 81       	ldd	r25, Z+4	; 0x04
     6a4:	92 17       	cp	r25, r18
     6a6:	d0 f7       	brcc	.-12     	; 0x69c <wakeup+0x42>
     6a8:	11 96       	adiw	r26, 0x01	; 1
     6aa:	fc 93       	st	X, r31
     6ac:	ee 93       	st	-X, r30
     6ae:	c2 81       	ldd	r28, Z+2	; 0x02
     6b0:	d3 81       	ldd	r29, Z+3	; 0x03
     6b2:	13 96       	adiw	r26, 0x03	; 3
     6b4:	dc 93       	st	X, r29
     6b6:	ce 93       	st	-X, r28
     6b8:	12 97       	sbiw	r26, 0x02	; 2
     6ba:	b9 83       	std	Y+1, r27	; 0x01
     6bc:	a8 83       	st	Y, r26
     6be:	b3 83       	std	Z+3, r27	; 0x03
     6c0:	a2 83       	std	Z+2, r26	; 0x02
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret
     6c8:	85 30       	cpi	r24, 0x05	; 5
     6ca:	89 f0       	breq	.+34     	; 0x6ee <wakeup+0x94>
     6cc:	87 30       	cpi	r24, 0x07	; 7
     6ce:	c1 f6       	brne	.-80     	; 0x680 <wakeup+0x26>
     6d0:	12 96       	adiw	r26, 0x02	; 2
     6d2:	ed 91       	ld	r30, X+
     6d4:	fc 91       	ld	r31, X
     6d6:	13 97       	sbiw	r26, 0x03	; 3
     6d8:	8d 91       	ld	r24, X+
     6da:	9c 91       	ld	r25, X
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	91 83       	std	Z+1, r25	; 0x01
     6e0:	80 83       	st	Z, r24
     6e2:	cd 91       	ld	r28, X+
     6e4:	dc 91       	ld	r29, X
     6e6:	11 97       	sbiw	r26, 0x01	; 1
     6e8:	fb 83       	std	Y+3, r31	; 0x03
     6ea:	ea 83       	std	Y+2, r30	; 0x02
     6ec:	c9 cf       	rjmp	.-110    	; 0x680 <wakeup+0x26>
     6ee:	50 96       	adiw	r26, 0x10	; 16
     6f0:	ed 91       	ld	r30, X+
     6f2:	fc 91       	ld	r31, X
     6f4:	51 97       	sbiw	r26, 0x11	; 17
     6f6:	84 81       	ldd	r24, Z+4	; 0x04
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	84 83       	std	Z+4, r24	; 0x04
     6fc:	e9 cf       	rjmp	.-46     	; 0x6d0 <wakeup+0x76>

000006fe <_scheduler_init>:
     6fe:	ec e5       	ldi	r30, 0x5C	; 92
     700:	f3 e0       	ldi	r31, 0x03	; 3
     702:	f1 83       	std	Z+1, r31	; 0x01
     704:	e0 83       	st	Z, r30
     706:	f3 83       	std	Z+3, r31	; 0x03
     708:	e2 83       	std	Z+2, r30	; 0x02
     70a:	14 82       	std	Z+4, r1	; 0x04
     70c:	f0 87       	std	Z+8, r31	; 0x08
     70e:	e7 83       	std	Z+7, r30	; 0x07
     710:	f2 87       	std	Z+10, r31	; 0x0a
     712:	e1 87       	std	Z+9, r30	; 0x09
     714:	08 95       	ret

00000716 <chSchReadyI>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	dc 01       	movw	r26, r24
     71c:	1d 96       	adiw	r26, 0x0d	; 13
     71e:	1c 92       	st	X, r1
     720:	1d 97       	sbiw	r26, 0x0d	; 13
     722:	14 96       	adiw	r26, 0x04	; 4
     724:	2c 91       	ld	r18, X
     726:	14 97       	sbiw	r26, 0x04	; 4
     728:	ec e5       	ldi	r30, 0x5C	; 92
     72a:	f3 e0       	ldi	r31, 0x03	; 3
     72c:	01 90       	ld	r0, Z+
     72e:	f0 81       	ld	r31, Z
     730:	e0 2d       	mov	r30, r0
     732:	94 81       	ldd	r25, Z+4	; 0x04
     734:	92 17       	cp	r25, r18
     736:	d0 f7       	brcc	.-12     	; 0x72c <chSchReadyI+0x16>
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	fc 93       	st	X, r31
     73c:	ee 93       	st	-X, r30
     73e:	c2 81       	ldd	r28, Z+2	; 0x02
     740:	d3 81       	ldd	r29, Z+3	; 0x03
     742:	13 96       	adiw	r26, 0x03	; 3
     744:	dc 93       	st	X, r29
     746:	ce 93       	st	-X, r28
     748:	12 97       	sbiw	r26, 0x02	; 2
     74a:	b9 83       	std	Y+1, r27	; 0x01
     74c:	a8 83       	st	Y, r26
     74e:	b3 83       	std	Z+3, r27	; 0x03
     750:	a2 83       	std	Z+2, r26	; 0x02
     752:	cd 01       	movw	r24, r26
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <chSchGoSleepS>:
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec e5       	ldi	r30, 0x5C	; 92
     760:	f3 e0       	ldi	r31, 0x03	; 3
     762:	63 85       	ldd	r22, Z+11	; 0x0b
     764:	74 85       	ldd	r23, Z+12	; 0x0c
     766:	db 01       	movw	r26, r22
     768:	1d 96       	adiw	r26, 0x0d	; 13
     76a:	8c 93       	st	X, r24
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	ec 01       	movw	r28, r24
     772:	a8 81       	ld	r26, Y
     774:	b9 81       	ldd	r27, Y+1	; 0x01
     776:	b1 83       	std	Z+1, r27	; 0x01
     778:	a0 83       	st	Z, r26
     77a:	13 96       	adiw	r26, 0x03	; 3
     77c:	fc 93       	st	X, r31
     77e:	ee 93       	st	-X, r30
     780:	12 97       	sbiw	r26, 0x02	; 2
     782:	94 87       	std	Z+12, r25	; 0x0c
     784:	83 87       	std	Z+11, r24	; 0x0b
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	2d 87       	std	Y+13, r18	; 0x0d
     78a:	bc d2       	rcall	.+1400   	; 0xd04 <_port_switch>
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <chSchGoSleepTimeoutS>:
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	2a 97       	sbiw	r28, 0x0a	; 10
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	18 2f       	mov	r17, r24
     7aa:	6f 3f       	cpi	r22, 0xFF	; 255
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	78 07       	cpc	r23, r24
     7b0:	11 f1       	breq	.+68     	; 0x7f6 <chSchGoSleepTimeoutS+0x64>
     7b2:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <ch+0xb>
     7b6:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <ch+0xc>
     7ba:	4d e2       	ldi	r20, 0x2D	; 45
     7bc:	53 e0       	ldi	r21, 0x03	; 3
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	4e de       	rcall	.-868    	; 0x460 <chVTDoSetI>
     7c4:	81 2f       	mov	r24, r17
     7c6:	c9 df       	rcall	.-110    	; 0x75a <chSchGoSleepS>
     7c8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ca:	98 85       	ldd	r25, Y+8	; 0x08
     7cc:	89 2b       	or	r24, r25
     7ce:	19 f0       	breq	.+6      	; 0x7d6 <chSchGoSleepTimeoutS+0x44>
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	dd de       	rcall	.-582    	; 0x590 <chVTDoResetI>
     7d6:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <ch+0xb>
     7da:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <ch+0xc>
     7de:	80 89       	ldd	r24, Z+16	; 0x10
     7e0:	91 89       	ldd	r25, Z+17	; 0x11
     7e2:	2a 96       	adiw	r28, 0x0a	; 10
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	08 95       	ret
     7f6:	81 2f       	mov	r24, r17
     7f8:	b0 df       	rcall	.-160    	; 0x75a <chSchGoSleepS>
     7fa:	ed cf       	rjmp	.-38     	; 0x7d6 <chSchGoSleepTimeoutS+0x44>

000007fc <chSchWakeupS>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	dc 01       	movw	r26, r24
     802:	c0 91 67 03 	lds	r28, 0x0367	; 0x800367 <ch+0xb>
     806:	d0 91 68 03 	lds	r29, 0x0368	; 0x800368 <ch+0xc>
     80a:	51 96       	adiw	r26, 0x11	; 17
     80c:	7c 93       	st	X, r23
     80e:	6e 93       	st	-X, r22
     810:	50 97       	sbiw	r26, 0x10	; 16
     812:	14 96       	adiw	r26, 0x04	; 4
     814:	2c 91       	ld	r18, X
     816:	14 97       	sbiw	r26, 0x04	; 4
     818:	8c 81       	ldd	r24, Y+4	; 0x04
     81a:	82 17       	cp	r24, r18
     81c:	d8 f0       	brcs	.+54     	; 0x854 <chSchWakeupS+0x58>
     81e:	1d 96       	adiw	r26, 0x0d	; 13
     820:	1c 92       	st	X, r1
     822:	1d 97       	sbiw	r26, 0x0d	; 13
     824:	ec e5       	ldi	r30, 0x5C	; 92
     826:	f3 e0       	ldi	r31, 0x03	; 3
     828:	01 90       	ld	r0, Z+
     82a:	f0 81       	ld	r31, Z
     82c:	e0 2d       	mov	r30, r0
     82e:	94 81       	ldd	r25, Z+4	; 0x04
     830:	92 17       	cp	r25, r18
     832:	d0 f7       	brcc	.-12     	; 0x828 <chSchWakeupS+0x2c>
     834:	11 96       	adiw	r26, 0x01	; 1
     836:	fc 93       	st	X, r31
     838:	ee 93       	st	-X, r30
     83a:	c2 81       	ldd	r28, Z+2	; 0x02
     83c:	d3 81       	ldd	r29, Z+3	; 0x03
     83e:	13 96       	adiw	r26, 0x03	; 3
     840:	dc 93       	st	X, r29
     842:	ce 93       	st	-X, r28
     844:	12 97       	sbiw	r26, 0x02	; 2
     846:	b9 83       	std	Y+1, r27	; 0x01
     848:	a8 83       	st	Y, r26
     84a:	b3 83       	std	Z+3, r27	; 0x03
     84c:	a2 83       	std	Z+2, r26	; 0x02
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret
     854:	1d 86       	std	Y+13, r1	; 0x0d
     856:	ec e5       	ldi	r30, 0x5C	; 92
     858:	f3 e0       	ldi	r31, 0x03	; 3
     85a:	01 90       	ld	r0, Z+
     85c:	f0 81       	ld	r31, Z
     85e:	e0 2d       	mov	r30, r0
     860:	94 81       	ldd	r25, Z+4	; 0x04
     862:	98 17       	cp	r25, r24
     864:	d0 f7       	brcc	.-12     	; 0x85a <chSchWakeupS+0x5e>
     866:	cd 01       	movw	r24, r26
     868:	f9 83       	std	Y+1, r31	; 0x01
     86a:	e8 83       	st	Y, r30
     86c:	a2 81       	ldd	r26, Z+2	; 0x02
     86e:	b3 81       	ldd	r27, Z+3	; 0x03
     870:	bb 83       	std	Y+3, r27	; 0x03
     872:	aa 83       	std	Y+2, r26	; 0x02
     874:	cd 93       	st	X+, r28
     876:	dc 93       	st	X, r29
     878:	d3 83       	std	Z+3, r29	; 0x03
     87a:	c2 83       	std	Z+2, r28	; 0x02
     87c:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <ch+0xc>
     880:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <ch+0xb>
     884:	21 e0       	ldi	r18, 0x01	; 1
     886:	fc 01       	movw	r30, r24
     888:	25 87       	std	Z+13, r18	; 0x0d
     88a:	be 01       	movw	r22, r28
     88c:	3b d2       	rcall	.+1142   	; 0xd04 <_port_switch>
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <chSchIsPreemptionRequired>:
     894:	a0 91 5c 03 	lds	r26, 0x035C	; 0x80035c <ch>
     898:	b0 91 5d 03 	lds	r27, 0x035D	; 0x80035d <ch+0x1>
     89c:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <ch+0xb>
     8a0:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <ch+0xc>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	14 96       	adiw	r26, 0x04	; 4
     8a8:	2c 91       	ld	r18, X
     8aa:	94 81       	ldd	r25, Z+4	; 0x04
     8ac:	92 17       	cp	r25, r18
     8ae:	08 f0       	brcs	.+2      	; 0x8b2 <chSchIsPreemptionRequired+0x1e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	08 95       	ret

000008b4 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
  thread_t *otp = currp;
     8b8:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <ch+0xb>
     8bc:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     8c0:	40 91 5c 03 	lds	r20, 0x035C	; 0x80035c <ch>
     8c4:	50 91 5d 03 	lds	r21, 0x035D	; 0x80035d <ch+0x1>

  tqp->next             = tp->queue.next;
     8c8:	ea 01       	movw	r28, r20
     8ca:	e8 81       	ld	r30, Y
     8cc:	f9 81       	ldd	r31, Y+1	; 0x01
     8ce:	f0 93 5d 03 	sts	0x035D, r31	; 0x80035d <ch+0x1>
     8d2:	e0 93 5c 03 	sts	0x035C, r30	; 0x80035c <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     8d6:	8c e5       	ldi	r24, 0x5C	; 92
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	93 83       	std	Z+3, r25	; 0x03
     8dc:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     8de:	50 93 68 03 	sts	0x0368, r21	; 0x800368 <ch+0xc>
     8e2:	40 93 67 03 	sts	0x0367, r20	; 0x800367 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     8ea:	1d 96       	adiw	r26, 0x0d	; 13
     8ec:	1c 92       	st	X, r1
     8ee:	1d 97       	sbiw	r26, 0x0d	; 13
     8f0:	14 96       	adiw	r26, 0x04	; 4
     8f2:	2c 91       	ld	r18, X
     8f4:	14 97       	sbiw	r26, 0x04	; 4
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <chSchDoReschedule+0x4a>
     8f8:	01 90       	ld	r0, Z+
     8fa:	f0 81       	ld	r31, Z
     8fc:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     8fe:	94 81       	ldd	r25, Z+4	; 0x04
     900:	29 17       	cp	r18, r25
     902:	d0 f3       	brcs	.-12     	; 0x8f8 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     904:	11 96       	adiw	r26, 0x01	; 1
     906:	fc 93       	st	X, r31
     908:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     90a:	82 81       	ldd	r24, Z+2	; 0x02
     90c:	93 81       	ldd	r25, Z+3	; 0x03
     90e:	13 96       	adiw	r26, 0x03	; 3
     910:	9c 93       	st	X, r25
     912:	8e 93       	st	-X, r24
     914:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     916:	ec 01       	movw	r28, r24
     918:	b9 83       	std	Y+1, r27	; 0x01
     91a:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     91c:	b3 83       	std	Z+3, r27	; 0x03
     91e:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     920:	bd 01       	movw	r22, r26
     922:	ca 01       	movw	r24, r20
     924:	ef d1       	rcall	.+990    	; 0xd04 <_port_switch>
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	fc 01       	movw	r30, r24
     932:	44 83       	std	Z+4, r20	; 0x04
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	85 87       	std	Z+13, r24	; 0x0d
     938:	16 86       	std	Z+14, r1	; 0x0e
     93a:	43 8f       	std	Z+27, r20	; 0x1b
     93c:	12 8e       	std	Z+26, r1	; 0x1a
     93e:	11 8e       	std	Z+25, r1	; 0x19
     940:	10 8e       	std	Z+24, r1	; 0x18
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	87 87       	std	Z+15, r24	; 0x0f
     946:	74 87       	std	Z+12, r23	; 0x0c
     948:	63 87       	std	Z+11, r22	; 0x0b
     94a:	ac e5       	ldi	r26, 0x5C	; 92
     94c:	b3 e0       	ldi	r27, 0x03	; 3
     94e:	b0 87       	std	Z+8, r27	; 0x08
     950:	a7 83       	std	Z+7, r26	; 0x07
     952:	19 96       	adiw	r26, 0x09	; 9
     954:	cd 91       	ld	r28, X+
     956:	dc 91       	ld	r29, X
     958:	1a 97       	sbiw	r26, 0x0a	; 10
     95a:	d2 87       	std	Z+10, r29	; 0x0a
     95c:	c1 87       	std	Z+9, r28	; 0x09
     95e:	f8 87       	std	Y+8, r31	; 0x08
     960:	ef 83       	std	Y+7, r30	; 0x07
     962:	1a 96       	adiw	r26, 0x0a	; 10
     964:	fc 93       	st	X, r31
     966:	ee 93       	st	-X, r30
     968:	19 97       	sbiw	r26, 0x09	; 9
     96a:	cf 01       	movw	r24, r30
     96c:	42 96       	adiw	r24, 0x12	; 18
     96e:	93 8b       	std	Z+19, r25	; 0x13
     970:	82 8b       	std	Z+18, r24	; 0x12
     972:	02 96       	adiw	r24, 0x02	; 2
     974:	95 8b       	std	Z+21, r25	; 0x15
     976:	84 8b       	std	Z+20, r24	; 0x14
     978:	97 8b       	std	Z+23, r25	; 0x17
     97a:	86 8b       	std	Z+22, r24	; 0x16
     97c:	cf 01       	movw	r24, r30
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <chThdCreateSuspendedI>:
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
     98a:	4c 81       	ldd	r20, Y+4	; 0x04
     98c:	5d 81       	ldd	r21, Y+5	; 0x05
     98e:	fa 01       	movw	r30, r20
     990:	7c 97       	sbiw	r30, 0x1c	; 28
     992:	ca 01       	movw	r24, r20
     994:	c1 97       	sbiw	r24, 0x31	; 49
     996:	96 83       	std	Z+6, r25	; 0x06
     998:	85 83       	std	Z+5, r24	; 0x05
     99a:	2f 81       	ldd	r18, Y+7	; 0x07
     99c:	dc 01       	movw	r26, r24
     99e:	52 96       	adiw	r26, 0x12	; 18
     9a0:	2c 93       	st	X, r18
     9a2:	52 97       	sbiw	r26, 0x12	; 18
     9a4:	28 85       	ldd	r18, Y+8	; 0x08
     9a6:	51 96       	adiw	r26, 0x11	; 17
     9a8:	2c 93       	st	X, r18
     9aa:	51 97       	sbiw	r26, 0x11	; 17
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	50 96       	adiw	r26, 0x10	; 16
     9b0:	2c 93       	st	X, r18
     9b2:	50 97       	sbiw	r26, 0x10	; 16
     9b4:	2a 85       	ldd	r18, Y+10	; 0x0a
     9b6:	1f 96       	adiw	r26, 0x0f	; 15
     9b8:	2c 93       	st	X, r18
     9ba:	1f 97       	sbiw	r26, 0x0f	; 15
     9bc:	21 eb       	ldi	r18, 0xB1	; 177
     9be:	36 e0       	ldi	r19, 0x06	; 6
     9c0:	53 96       	adiw	r26, 0x13	; 19
     9c2:	3c 93       	st	X, r19
     9c4:	53 97       	sbiw	r26, 0x13	; 19
     9c6:	54 96       	adiw	r26, 0x14	; 20
     9c8:	2c 93       	st	X, r18
     9ca:	8e 81       	ldd	r24, Y+6	; 0x06
     9cc:	28 81       	ld	r18, Y
     9ce:	39 81       	ldd	r19, Y+1	; 0x01
     9d0:	84 83       	std	Z+4, r24	; 0x04
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	95 87       	std	Z+13, r25	; 0x0d
     9d6:	16 86       	std	Z+14, r1	; 0x0e
     9d8:	83 8f       	std	Z+27, r24	; 0x1b
     9da:	12 8e       	std	Z+26, r1	; 0x1a
     9dc:	11 8e       	std	Z+25, r1	; 0x19
     9de:	10 8e       	std	Z+24, r1	; 0x18
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	87 87       	std	Z+15, r24	; 0x0f
     9e4:	34 87       	std	Z+12, r19	; 0x0c
     9e6:	23 87       	std	Z+11, r18	; 0x0b
     9e8:	cc e5       	ldi	r28, 0x5C	; 92
     9ea:	d3 e0       	ldi	r29, 0x03	; 3
     9ec:	d0 87       	std	Z+8, r29	; 0x08
     9ee:	c7 83       	std	Z+7, r28	; 0x07
     9f0:	89 85       	ldd	r24, Y+9	; 0x09
     9f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f4:	92 87       	std	Z+10, r25	; 0x0a
     9f6:	81 87       	std	Z+9, r24	; 0x09
     9f8:	dc 01       	movw	r26, r24
     9fa:	18 96       	adiw	r26, 0x08	; 8
     9fc:	fc 93       	st	X, r31
     9fe:	ee 93       	st	-X, r30
     a00:	17 97       	sbiw	r26, 0x07	; 7
     a02:	fa 87       	std	Y+10, r31	; 0x0a
     a04:	e9 87       	std	Y+9, r30	; 0x09
     a06:	ea 01       	movw	r28, r20
     a08:	2a 97       	sbiw	r28, 0x0a	; 10
     a0a:	d9 83       	std	Y+1, r29	; 0x01
     a0c:	c8 83       	st	Y, r28
     a0e:	da 01       	movw	r26, r20
     a10:	18 97       	sbiw	r26, 0x08	; 8
     a12:	0b 2e       	mov	r0, r27
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	0c 92       	st	X, r0
     a18:	11 97       	sbiw	r26, 0x01	; 1
     a1a:	ac 93       	st	X, r26
     a1c:	0a 2e       	mov	r0, r26
     a1e:	1b 2e       	mov	r1, r27
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	1c 92       	st	X, r1
     a24:	0e 92       	st	-X, r0
     a26:	11 24       	eor	r1, r1
     a28:	12 97       	sbiw	r26, 0x02	; 2
     a2a:	cf 01       	movw	r24, r30
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <chThdCreate>:
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	f8 94       	cli
     a38:	a5 df       	rcall	.-182    	; 0x984 <chThdCreateSuspendedI>
     a3a:	ec 01       	movw	r28, r24
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	dd de       	rcall	.-582    	; 0x7fc <chSchWakeupS>
     a42:	78 94       	sei
     a44:	ce 01       	movw	r24, r28
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <chThdCreateStatic>:
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	f8 94       	cli
     a56:	6c 51       	subi	r22, 0x1C	; 28
     a58:	71 09       	sbc	r23, r1
     a5a:	ec 01       	movw	r28, r24
     a5c:	c6 0f       	add	r28, r22
     a5e:	d7 1f       	adc	r29, r23
     a60:	fe 01       	movw	r30, r28
     a62:	75 97       	sbiw	r30, 0x15	; 21
     a64:	fe 83       	std	Y+6, r31	; 0x06
     a66:	ed 83       	std	Y+5, r30	; 0x05
     a68:	22 8b       	std	Z+18, r18	; 0x12
     a6a:	31 8b       	std	Z+17, r19	; 0x11
     a6c:	00 8b       	std	Z+16, r16	; 0x10
     a6e:	17 87       	std	Z+15, r17	; 0x0f
     a70:	81 eb       	ldi	r24, 0xB1	; 177
     a72:	96 e0       	ldi	r25, 0x06	; 6
     a74:	93 8b       	std	Z+19, r25	; 0x13
     a76:	84 8b       	std	Z+20, r24	; 0x14
     a78:	4c 83       	std	Y+4, r20	; 0x04
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	8d 87       	std	Y+13, r24	; 0x0d
     a7e:	1e 86       	std	Y+14, r1	; 0x0e
     a80:	4b 8f       	std	Y+27, r20	; 0x1b
     a82:	1a 8e       	std	Y+26, r1	; 0x1a
     a84:	19 8e       	std	Y+25, r1	; 0x19
     a86:	18 8e       	std	Y+24, r1	; 0x18
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	8f 87       	std	Y+15, r24	; 0x0f
     a8c:	80 e1       	ldi	r24, 0x10	; 16
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	9c 87       	std	Y+12, r25	; 0x0c
     a92:	8b 87       	std	Y+11, r24	; 0x0b
     a94:	ec e5       	ldi	r30, 0x5C	; 92
     a96:	f3 e0       	ldi	r31, 0x03	; 3
     a98:	f8 87       	std	Y+8, r31	; 0x08
     a9a:	ef 83       	std	Y+7, r30	; 0x07
     a9c:	a1 85       	ldd	r26, Z+9	; 0x09
     a9e:	b2 85       	ldd	r27, Z+10	; 0x0a
     aa0:	ba 87       	std	Y+10, r27	; 0x0a
     aa2:	a9 87       	std	Y+9, r26	; 0x09
     aa4:	18 96       	adiw	r26, 0x08	; 8
     aa6:	dc 93       	st	X, r29
     aa8:	ce 93       	st	-X, r28
     aaa:	17 97       	sbiw	r26, 0x07	; 7
     aac:	d2 87       	std	Z+10, r29	; 0x0a
     aae:	c1 87       	std	Z+9, r28	; 0x09
     ab0:	ce 01       	movw	r24, r28
     ab2:	42 96       	adiw	r24, 0x12	; 18
     ab4:	9b 8b       	std	Y+19, r25	; 0x13
     ab6:	8a 8b       	std	Y+18, r24	; 0x12
     ab8:	02 96       	adiw	r24, 0x02	; 2
     aba:	9d 8b       	std	Y+21, r25	; 0x15
     abc:	8c 8b       	std	Y+20, r24	; 0x14
     abe:	9f 8b       	std	Y+23, r25	; 0x17
     ac0:	8e 8b       	std	Y+22, r24	; 0x16
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	ce 01       	movw	r24, r28
     ac8:	99 de       	rcall	.-718    	; 0x7fc <chSchWakeupS>
     aca:	78 94       	sei
     acc:	ce 01       	movw	r24, r28
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <chThdExitS>:
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	c0 91 67 03 	lds	r28, 0x0367	; 0x800367 <ch+0xb>
     ae4:	d0 91 68 03 	lds	r29, 0x0368	; 0x800368 <ch+0xc>
     ae8:	99 8b       	std	Y+17, r25	; 0x11
     aea:	88 8b       	std	Y+16, r24	; 0x10
     aec:	8e 01       	movw	r16, r28
     aee:	0e 5e       	subi	r16, 0xEE	; 238
     af0:	1f 4f       	sbci	r17, 0xFF	; 255
     af2:	8a 89       	ldd	r24, Y+18	; 0x12
     af4:	9b 89       	ldd	r25, Y+19	; 0x13
     af6:	08 17       	cp	r16, r24
     af8:	19 07       	cpc	r17, r25
     afa:	59 f0       	breq	.+22     	; 0xb12 <chThdExitS+0x3a>
     afc:	fc 01       	movw	r30, r24
     afe:	20 81       	ld	r18, Z
     b00:	31 81       	ldd	r19, Z+1	; 0x01
     b02:	3b 8b       	std	Y+19, r19	; 0x13
     b04:	2a 8b       	std	Y+18, r18	; 0x12
     b06:	07 de       	rcall	.-1010   	; 0x716 <chSchReadyI>
     b08:	8a 89       	ldd	r24, Y+18	; 0x12
     b0a:	9b 89       	ldd	r25, Y+19	; 0x13
     b0c:	80 17       	cp	r24, r16
     b0e:	91 07       	cpc	r25, r17
     b10:	a9 f7       	brne	.-22     	; 0xafc <chThdExitS+0x24>
     b12:	8f 85       	ldd	r24, Y+15	; 0x0f
     b14:	81 11       	cpse	r24, r1
     b16:	0c c0       	rjmp	.+24     	; 0xb30 <chThdExitS+0x58>
     b18:	e9 85       	ldd	r30, Y+9	; 0x09
     b1a:	fa 85       	ldd	r31, Y+10	; 0x0a
     b1c:	8f 81       	ldd	r24, Y+7	; 0x07
     b1e:	98 85       	ldd	r25, Y+8	; 0x08
     b20:	90 87       	std	Z+8, r25	; 0x08
     b22:	87 83       	std	Z+7, r24	; 0x07
     b24:	af 81       	ldd	r26, Y+7	; 0x07
     b26:	b8 85       	ldd	r27, Y+8	; 0x08
     b28:	1a 96       	adiw	r26, 0x0a	; 10
     b2a:	fc 93       	st	X, r31
     b2c:	ee 93       	st	-X, r30
     b2e:	19 97       	sbiw	r26, 0x09	; 9
     b30:	8f e0       	ldi	r24, 0x0F	; 15
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	0f ce       	rjmp	.-994    	; 0x75a <chSchGoSleepS>

00000b3c <chThdExit>:
     b3c:	f8 94       	cli
     b3e:	cc cf       	rjmp	.-104    	; 0xad8 <chThdExitS>

00000b40 <chThdSleep>:
     b40:	f8 94       	cli
     b42:	bc 01       	movw	r22, r24
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	25 de       	rcall	.-950    	; 0x792 <chSchGoSleepTimeoutS>
     b48:	78 94       	sei
     b4a:	08 95       	ret

00000b4c <chThdSuspendTimeoutS>:
     b4c:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <ch+0xb>
     b50:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <ch+0xc>
     b54:	61 15       	cp	r22, r1
     b56:	71 05       	cpc	r23, r1
     b58:	39 f0       	breq	.+14     	; 0xb68 <chThdSuspendTimeoutS+0x1c>
     b5a:	dc 01       	movw	r26, r24
     b5c:	ed 93       	st	X+, r30
     b5e:	fc 93       	st	X, r31
     b60:	91 8b       	std	Z+17, r25	; 0x11
     b62:	80 8b       	std	Z+16, r24	; 0x10
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	15 ce       	rjmp	.-982    	; 0x792 <chSchGoSleepTimeoutS>
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	9f ef       	ldi	r25, 0xFF	; 255
     b6c:	08 95       	ret

00000b6e <chThdResumeI>:
     b6e:	dc 01       	movw	r26, r24
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	30 97       	sbiw	r30, 0x00	; 0
     b78:	31 f0       	breq	.+12     	; 0xb86 <chThdResumeI+0x18>
     b7a:	1d 92       	st	X+, r1
     b7c:	1c 92       	st	X, r1
     b7e:	71 8b       	std	Z+17, r23	; 0x11
     b80:	60 8b       	std	Z+16, r22	; 0x10
     b82:	cf 01       	movw	r24, r30
     b84:	c8 cd       	rjmp	.-1136   	; 0x716 <chSchReadyI>
     b86:	08 95       	ret

00000b88 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     b8c:	61 15       	cp	r22, r1
     b8e:	71 05       	cpc	r23, r1
     b90:	99 f0       	breq	.+38     	; 0xbb8 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     b92:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <ch+0xb>
     b96:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     b9e:	ec 01       	movw	r28, r24
     ba0:	aa 81       	ldd	r26, Y+2	; 0x02
     ba2:	bb 81       	ldd	r27, Y+3	; 0x03
     ba4:	b3 83       	std	Z+3, r27	; 0x03
     ba6:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     ba8:	ed 93       	st	X+, r30
     baa:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     bac:	fb 83       	std	Y+3, r31	; 0x03
     bae:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     bb0:	84 e0       	ldi	r24, 0x04	; 4
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     bb6:	ed cd       	rjmp	.-1062   	; 0x792 <chSchGoSleepTimeoutS>
}
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	9f ef       	ldi	r25, 0xFF	; 255
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     bc8:	80 81       	ld	r24, Z
     bca:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     bcc:	e8 17       	cp	r30, r24
     bce:	f9 07       	cpc	r31, r25
     bd0:	71 f0       	breq	.+28     	; 0xbee <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     bd2:	ec 01       	movw	r28, r24
     bd4:	a8 81       	ld	r26, Y
     bd6:	b9 81       	ldd	r27, Y+1	; 0x01
     bd8:	b1 83       	std	Z+1, r27	; 0x01
     bda:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	fc 93       	st	X, r31
     be0:	ee 93       	st	-X, r30
     be2:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     be4:	79 8b       	std	Y+17, r23	; 0x11
     be6:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
     bec:	94 cd       	rjmp	.-1240   	; 0x716 <chSchReadyI>
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     bf4:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     bfa:	93 83       	std	Z+3, r25	; 0x03
     bfc:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     bfe:	15 82       	std	Z+5, r1	; 0x05
     c00:	14 82       	std	Z+4, r1	; 0x04
     c02:	08 95       	ret

00000c04 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     c04:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     c06:	90 8d       	ldd	r25, Z+24	; 0x18
     c08:	69 2b       	or	r22, r25
     c0a:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     c0c:	85 85       	ldd	r24, Z+13	; 0x0d
     c0e:	8a 30       	cpi	r24, 0x0A	; 10
     c10:	59 f0       	breq	.+22     	; 0xc28 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     c12:	8b 30       	cpi	r24, 0x0B	; 11
     c14:	09 f0       	breq	.+2      	; 0xc18 <chEvtSignalI+0x14>
     c16:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     c18:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     c1a:	68 23       	and	r22, r24
     c1c:	86 13       	cpse	r24, r22
     c1e:	fb cf       	rjmp	.-10     	; 0xc16 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     c20:	11 8a       	std	Z+17, r1	; 0x11
     c22:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     c24:	cf 01       	movw	r24, r30
     c26:	77 cd       	rjmp	.-1298   	; 0x716 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     c28:	80 89       	ldd	r24, Z+16	; 0x10
     c2a:	68 23       	and	r22, r24
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <chEvtSignalI+0x1c>
     c2e:	08 95       	ret

00000c30 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	7c 01       	movw	r14, r24
     c3c:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     c3e:	fc 01       	movw	r30, r24
     c40:	c0 81       	ld	r28, Z
     c42:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     c44:	8c 17       	cp	r24, r28
     c46:	9d 07       	cpc	r25, r29
     c48:	91 f0       	breq	.+36     	; 0xc6e <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	81 2b       	or	r24, r17
     c4e:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     c50:	11 23       	and	r17, r17
     c52:	19 f0       	breq	.+6      	; 0xc5a <chEvtBroadcastFlagsI+0x2a>
     c54:	8e 81       	ldd	r24, Y+6	; 0x06
     c56:	81 23       	and	r24, r17
     c58:	21 f0       	breq	.+8      	; 0xc62 <chEvtBroadcastFlagsI+0x32>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     c5a:	6c 81       	ldd	r22, Y+4	; 0x04
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	d1 df       	rcall	.-94     	; 0xc04 <chEvtSignalI>
    }
    elp = elp->next;
     c62:	09 90       	ld	r0, Y+
     c64:	d8 81       	ld	r29, Y
     c66:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     c68:	ec 16       	cp	r14, r28
     c6a:	fd 06       	cpc	r15, r29
     c6c:	71 f7       	brne	.-36     	; 0xc4a <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	08 95       	ret

00000c7a <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     c7a:	ef e8       	ldi	r30, 0x8F	; 143
     c7c:	f3 e0       	ldi	r31, 0x03	; 3
     c7e:	84 ee       	ldi	r24, 0xE4	; 228
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	80 83       	st	Z, r24
     c86:	84 e6       	ldi	r24, 0x64	; 100
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	93 83       	std	Z+3, r25	; 0x03
     c8c:	82 83       	std	Z+2, r24	; 0x02
     c8e:	08 95       	ret

00000c90 <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     c90:	f8 94       	cli
     c92:	9b 01       	movw	r18, r22
     c94:	21 50       	subi	r18, 0x01	; 1
     c96:	31 09       	sbc	r19, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     c98:	71 95       	neg	r23
     c9a:	61 95       	neg	r22
     c9c:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     c9e:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <ch_memcore>
     ca2:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <ch_memcore+0x1>
     ca6:	4e 0f       	add	r20, r30
     ca8:	5f 1f       	adc	r21, r31
     caa:	42 0f       	add	r20, r18
     cac:	53 1f       	adc	r21, r19
     cae:	46 23       	and	r20, r22
     cb0:	57 23       	and	r21, r23
  next = p + size;
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	68 23       	and	r22, r24
     cb8:	79 23       	and	r23, r25
     cba:	ca 01       	movw	r24, r20
     cbc:	86 0f       	add	r24, r22
     cbe:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     cc0:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <ch_memcore+0x2>
     cc4:	30 91 92 03 	lds	r19, 0x0392	; 0x800392 <ch_memcore+0x3>
     cc8:	28 17       	cp	r18, r24
     cca:	39 07       	cpc	r19, r25
     ccc:	50 f0       	brcs	.+20     	; 0xce2 <chCoreAllocAlignedWithOffset+0x52>
     cce:	8e 17       	cp	r24, r30
     cd0:	9f 07       	cpc	r25, r31
     cd2:	38 f0       	brcs	.+14     	; 0xce2 <chCoreAllocAlignedWithOffset+0x52>
    return NULL;
  }

  ch_memcore.nextmem = next;
     cd4:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <ch_memcore+0x1>
     cd8:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <ch_memcore>

  return p;
     cdc:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     cde:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     ce0:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     ce8:	08 95       	ret

00000cea <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     cea:	e4 e6       	ldi	r30, 0x64	; 100
     cec:	f2 e0       	ldi	r31, 0x02	; 2
     cee:	88 e4       	ldi	r24, 0x48	; 72
     cf0:	96 e0       	ldi	r25, 0x06	; 6
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     cf6:	13 82       	std	Z+3, r1	; 0x03
     cf8:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     cfa:	15 82       	std	Z+5, r1	; 0x05
     cfc:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     cfe:	8a e6       	ldi	r24, 0x6A	; 106
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	78 cf       	rjmp	.-272    	; 0xbf4 <chMtxObjectInit>

00000d04 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     d04:	2f 92       	push	r2
  asm volatile ("push    r3");
     d06:	3f 92       	push	r3
  asm volatile ("push    r4");
     d08:	4f 92       	push	r4
  asm volatile ("push    r5");
     d0a:	5f 92       	push	r5
  asm volatile ("push    r6");
     d0c:	6f 92       	push	r6
  asm volatile ("push    r7");
     d0e:	7f 92       	push	r7
  asm volatile ("push    r8");
     d10:	8f 92       	push	r8
  asm volatile ("push    r9");
     d12:	9f 92       	push	r9
  asm volatile ("push    r10");
     d14:	af 92       	push	r10
  asm volatile ("push    r11");
     d16:	bf 92       	push	r11
  asm volatile ("push    r12");
     d18:	cf 92       	push	r12
  asm volatile ("push    r13");
     d1a:	df 92       	push	r13
  asm volatile ("push    r14");
     d1c:	ef 92       	push	r14
  asm volatile ("push    r15");
     d1e:	ff 92       	push	r15
  asm volatile ("push    r16");
     d20:	0f 93       	push	r16
  asm volatile ("push    r17");
     d22:	1f 93       	push	r17
  asm volatile ("push    r28");
     d24:	cf 93       	push	r28
  asm volatile ("push    r29");
     d26:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     d28:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     d2a:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     d2c:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     d2e:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     d30:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     d32:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     d34:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     d36:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     d38:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     d3a:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     d3c:	df 91       	pop	r29
  asm volatile ("pop     r28");
     d3e:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     d40:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     d42:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     d44:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     d46:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     d48:	df 90       	pop	r13
  asm volatile ("pop     r12");
     d4a:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     d4c:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     d4e:	af 90       	pop	r10
  asm volatile ("pop     r9");
     d50:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     d52:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     d54:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     d56:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     d58:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     d5a:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     d5c:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     d5e:	2f 90       	pop	r2
  asm volatile ("ret");
     d60:	08 95       	ret

00000d62 <_port_thread_start>:
     d62:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     d64:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     d66:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     d68:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     d6a:	e8 ce       	rjmp	.-560    	; 0xb3c <chThdExit>

00000d6c <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     d6c:	28 d3       	rcall	.+1616   	; 0x13be <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
     d6e:	84 e4       	ldi	r24, 0x44	; 68
     d70:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
     d72:	26 d3       	rcall	.+1612   	; 0x13c0 <_pal_lld_init>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
     d74:	66 d2       	rcall	.+1228   	; 0x1242 <i2cInit>
     d76:	ae d2       	rcall	.+1372   	; 0x12d4 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     d78:	18 d6       	rcall	.+3120   	; 0x19aa <boardInit>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <stInit>

00000d7c <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     d7c:	47 c5       	rjmp	.+2702   	; 0x180c <st_lld_init>

00000d7e <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     d7e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d82:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	86 bb       	out	0x16, r24	; 22

  /* Enable interrupt. */
  TIMSK_REG = _BV(OCIE1A);
     d8a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     d8e:	08 95       	ret

00000d90 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
     d90:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     d94:	08 95       	ret

00000d96 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     d96:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d9a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d9e:	08 95       	ret

00000da0 <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	ec 01       	movw	r28, r24
     db6:	6b 01       	movw	r12, r22
     db8:	8a 01       	movw	r16, r20
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	9d 81       	ldd	r25, Y+5	; 0x05
     dbe:	84 17       	cp	r24, r20
     dc0:	95 07       	cpc	r25, r21
     dc2:	10 f4       	brcc	.+4      	; 0xdc8 <iq_read+0x28>
     dc4:	0c 81       	ldd	r16, Y+4	; 0x04
     dc6:	1d 81       	ldd	r17, Y+5	; 0x05
     dc8:	6c 85       	ldd	r22, Y+12	; 0x0c
     dca:	7d 85       	ldd	r23, Y+13	; 0x0d
     dcc:	e8 84       	ldd	r14, Y+8	; 0x08
     dce:	f9 84       	ldd	r15, Y+9	; 0x09
     dd0:	e6 1a       	sub	r14, r22
     dd2:	f7 0a       	sbc	r15, r23
     dd4:	0e 15       	cp	r16, r14
     dd6:	1f 05       	cpc	r17, r15
     dd8:	98 f1       	brcs	.+102    	; 0xe40 <iq_read+0xa0>
     dda:	e0 16       	cp	r14, r16
     ddc:	f1 06       	cpc	r15, r17
     dde:	d0 f0       	brcs	.+52     	; 0xe14 <iq_read+0x74>
     de0:	a8 01       	movw	r20, r16
     de2:	c6 01       	movw	r24, r12
     de4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     de8:	8e 81       	ldd	r24, Y+6	; 0x06
     dea:	9f 81       	ldd	r25, Y+7	; 0x07
     dec:	9d 87       	std	Y+13, r25	; 0x0d
     dee:	8c 87       	std	Y+12, r24	; 0x0c
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	80 1b       	sub	r24, r16
     df6:	91 0b       	sbc	r25, r17
     df8:	9d 83       	std	Y+5, r25	; 0x05
     dfa:	8c 83       	std	Y+4, r24	; 0x04
     dfc:	c8 01       	movw	r24, r16
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	bf 90       	pop	r11
     e10:	af 90       	pop	r10
     e12:	08 95       	ret
     e14:	a7 01       	movw	r20, r14
     e16:	c6 01       	movw	r24, r12
     e18:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     e1c:	58 01       	movw	r10, r16
     e1e:	ae 18       	sub	r10, r14
     e20:	bf 08       	sbc	r11, r15
     e22:	6e 81       	ldd	r22, Y+6	; 0x06
     e24:	7f 81       	ldd	r23, Y+7	; 0x07
     e26:	a5 01       	movw	r20, r10
     e28:	c6 01       	movw	r24, r12
     e2a:	8e 0d       	add	r24, r14
     e2c:	9f 1d       	adc	r25, r15
     e2e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	9f 81       	ldd	r25, Y+7	; 0x07
     e36:	a8 0e       	add	r10, r24
     e38:	b9 1e       	adc	r11, r25
     e3a:	bd 86       	std	Y+13, r11	; 0x0d
     e3c:	ac 86       	std	Y+12, r10	; 0x0c
     e3e:	d8 cf       	rjmp	.-80     	; 0xdf0 <iq_read+0x50>
     e40:	a8 01       	movw	r20, r16
     e42:	c6 01       	movw	r24, r12
     e44:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     e48:	8c 85       	ldd	r24, Y+12	; 0x0c
     e4a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e4c:	80 0f       	add	r24, r16
     e4e:	91 1f       	adc	r25, r17
     e50:	9d 87       	std	Y+13, r25	; 0x0d
     e52:	8c 87       	std	Y+12, r24	; 0x0c
     e54:	cd cf       	rjmp	.-102    	; 0xdf0 <iq_read+0x50>

00000e56 <oq_write>:
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ec 01       	movw	r28, r24
     e6c:	6b 01       	movw	r12, r22
     e6e:	8a 01       	movw	r16, r20
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	84 17       	cp	r24, r20
     e76:	95 07       	cpc	r25, r21
     e78:	10 f4       	brcc	.+4      	; 0xe7e <oq_write+0x28>
     e7a:	0c 81       	ldd	r16, Y+4	; 0x04
     e7c:	1d 81       	ldd	r17, Y+5	; 0x05
     e7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e80:	9b 85       	ldd	r25, Y+11	; 0x0b
     e82:	e8 84       	ldd	r14, Y+8	; 0x08
     e84:	f9 84       	ldd	r15, Y+9	; 0x09
     e86:	e8 1a       	sub	r14, r24
     e88:	f9 0a       	sbc	r15, r25
     e8a:	0e 15       	cp	r16, r14
     e8c:	1f 05       	cpc	r17, r15
     e8e:	98 f1       	brcs	.+102    	; 0xef6 <oq_write+0xa0>
     e90:	e0 16       	cp	r14, r16
     e92:	f1 06       	cpc	r15, r17
     e94:	d0 f0       	brcs	.+52     	; 0xeca <oq_write+0x74>
     e96:	a8 01       	movw	r20, r16
     e98:	b6 01       	movw	r22, r12
     e9a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	9b 87       	std	Y+11, r25	; 0x0b
     ea4:	8a 87       	std	Y+10, r24	; 0x0a
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	80 1b       	sub	r24, r16
     eac:	91 0b       	sbc	r25, r17
     eae:	9d 83       	std	Y+5, r25	; 0x05
     eb0:	8c 83       	std	Y+4, r24	; 0x04
     eb2:	c8 01       	movw	r24, r16
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	08 95       	ret
     eca:	a7 01       	movw	r20, r14
     ecc:	b6 01       	movw	r22, r12
     ece:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     ed2:	58 01       	movw	r10, r16
     ed4:	ae 18       	sub	r10, r14
     ed6:	bf 08       	sbc	r11, r15
     ed8:	b6 01       	movw	r22, r12
     eda:	6e 0d       	add	r22, r14
     edc:	7f 1d       	adc	r23, r15
     ede:	a5 01       	movw	r20, r10
     ee0:	8e 81       	ldd	r24, Y+6	; 0x06
     ee2:	9f 81       	ldd	r25, Y+7	; 0x07
     ee4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     ee8:	8e 81       	ldd	r24, Y+6	; 0x06
     eea:	9f 81       	ldd	r25, Y+7	; 0x07
     eec:	a8 0e       	add	r10, r24
     eee:	b9 1e       	adc	r11, r25
     ef0:	bb 86       	std	Y+11, r11	; 0x0b
     ef2:	aa 86       	std	Y+10, r10	; 0x0a
     ef4:	d8 cf       	rjmp	.-80     	; 0xea6 <oq_write+0x50>
     ef6:	a8 01       	movw	r20, r16
     ef8:	b6 01       	movw	r22, r12
     efa:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     efe:	8a 85       	ldd	r24, Y+10	; 0x0a
     f00:	9b 85       	ldd	r25, Y+11	; 0x0b
     f02:	80 0f       	add	r24, r16
     f04:	91 1f       	adc	r25, r17
     f06:	9b 87       	std	Y+11, r25	; 0x0b
     f08:	8a 87       	std	Y+10, r24	; 0x0a
     f0a:	cd cf       	rjmp	.-102    	; 0xea6 <oq_write+0x50>

00000f0c <iqObjectInit>:
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	fc 01       	movw	r30, r24
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	93 83       	std	Z+3, r25	; 0x03
     f18:	82 83       	std	Z+2, r24	; 0x02
     f1a:	15 82       	std	Z+5, r1	; 0x05
     f1c:	14 82       	std	Z+4, r1	; 0x04
     f1e:	77 83       	std	Z+7, r23	; 0x07
     f20:	66 83       	std	Z+6, r22	; 0x06
     f22:	75 87       	std	Z+13, r23	; 0x0d
     f24:	64 87       	std	Z+12, r22	; 0x0c
     f26:	73 87       	std	Z+11, r23	; 0x0b
     f28:	62 87       	std	Z+10, r22	; 0x0a
     f2a:	64 0f       	add	r22, r20
     f2c:	75 1f       	adc	r23, r21
     f2e:	71 87       	std	Z+9, r23	; 0x09
     f30:	60 87       	std	Z+8, r22	; 0x08
     f32:	37 87       	std	Z+15, r19	; 0x0f
     f34:	26 87       	std	Z+14, r18	; 0x0e
     f36:	11 8b       	std	Z+17, r17	; 0x11
     f38:	00 8b       	std	Z+16, r16	; 0x10
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	08 95       	ret

00000f40 <iqPutI>:
     f40:	fc 01       	movw	r30, r24
     f42:	a2 85       	ldd	r26, Z+10	; 0x0a
     f44:	b3 85       	ldd	r27, Z+11	; 0x0b
     f46:	84 85       	ldd	r24, Z+12	; 0x0c
     f48:	95 85       	ldd	r25, Z+13	; 0x0d
     f4a:	a8 17       	cp	r26, r24
     f4c:	b9 07       	cpc	r27, r25
     f4e:	e1 f0       	breq	.+56     	; 0xf88 <iqPutI+0x48>
     f50:	84 81       	ldd	r24, Z+4	; 0x04
     f52:	95 81       	ldd	r25, Z+5	; 0x05
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	95 83       	std	Z+5, r25	; 0x05
     f58:	84 83       	std	Z+4, r24	; 0x04
     f5a:	cd 01       	movw	r24, r26
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	93 87       	std	Z+11, r25	; 0x0b
     f60:	82 87       	std	Z+10, r24	; 0x0a
     f62:	6c 93       	st	X, r22
     f64:	22 85       	ldd	r18, Z+10	; 0x0a
     f66:	33 85       	ldd	r19, Z+11	; 0x0b
     f68:	80 85       	ldd	r24, Z+8	; 0x08
     f6a:	91 85       	ldd	r25, Z+9	; 0x09
     f6c:	28 17       	cp	r18, r24
     f6e:	39 07       	cpc	r19, r25
     f70:	20 f0       	brcs	.+8      	; 0xf7a <iqPutI+0x3a>
     f72:	86 81       	ldd	r24, Z+6	; 0x06
     f74:	97 81       	ldd	r25, Z+7	; 0x07
     f76:	93 87       	std	Z+11, r25	; 0x0b
     f78:	82 87       	std	Z+10, r24	; 0x0a
     f7a:	cf 01       	movw	r24, r30
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	20 de       	rcall	.-960    	; 0xbc2 <chThdDequeueNextI>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	08 95       	ret
     f88:	84 81       	ldd	r24, Z+4	; 0x04
     f8a:	95 81       	ldd	r25, Z+5	; 0x05
     f8c:	89 2b       	or	r24, r25
     f8e:	01 f3       	breq	.-64     	; 0xf50 <iqPutI+0x10>
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	9f ef       	ldi	r25, 0xFF	; 255
     f94:	08 95       	ret

00000f96 <iqGetTimeout>:
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
     fa0:	8b 01       	movw	r16, r22
     fa2:	f8 94       	cli
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <iqGetTimeout+0x1a>
     fa6:	b8 01       	movw	r22, r16
     fa8:	ce 01       	movw	r24, r28
     faa:	ee dd       	rcall	.-1060   	; 0xb88 <chThdEnqueueTimeoutS>
     fac:	97 fd       	sbrc	r25, 7
     fae:	27 c0       	rjmp	.+78     	; 0xffe <iqGetTimeout+0x68>
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	9d 81       	ldd	r25, Y+5	; 0x05
     fb4:	89 2b       	or	r24, r25
     fb6:	b9 f3       	breq	.-18     	; 0xfa6 <iqGetTimeout+0x10>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	9d 83       	std	Y+5, r25	; 0x05
     fc0:	8c 83       	std	Y+4, r24	; 0x04
     fc2:	ec 85       	ldd	r30, Y+12	; 0x0c
     fc4:	fd 85       	ldd	r31, Y+13	; 0x0d
     fc6:	cf 01       	movw	r24, r30
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	9d 87       	std	Y+13, r25	; 0x0d
     fcc:	8c 87       	std	Y+12, r24	; 0x0c
     fce:	10 81       	ld	r17, Z
     fd0:	28 85       	ldd	r18, Y+8	; 0x08
     fd2:	39 85       	ldd	r19, Y+9	; 0x09
     fd4:	82 17       	cp	r24, r18
     fd6:	93 07       	cpc	r25, r19
     fd8:	20 f0       	brcs	.+8      	; 0xfe2 <iqGetTimeout+0x4c>
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	9d 87       	std	Y+13, r25	; 0x0d
     fe0:	8c 87       	std	Y+12, r24	; 0x0c
     fe2:	ee 85       	ldd	r30, Y+14	; 0x0e
     fe4:	ff 85       	ldd	r31, Y+15	; 0x0f
     fe6:	30 97       	sbiw	r30, 0x00	; 0
     fe8:	11 f0       	breq	.+4      	; 0xfee <iqGetTimeout+0x58>
     fea:	ce 01       	movw	r24, r28
     fec:	09 95       	icall
     fee:	78 94       	sei
     ff0:	81 2f       	mov	r24, r17
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret
     ffe:	78 94       	sei
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <iqReadTimeout>:
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	6c 01       	movw	r12, r24
    1028:	7b 01       	movw	r14, r22
    102a:	3a 01       	movw	r6, r20
    102c:	49 01       	movw	r8, r18
    102e:	fc 01       	movw	r30, r24
    1030:	a6 84       	ldd	r10, Z+14	; 0x0e
    1032:	b7 84       	ldd	r11, Z+15	; 0x0f
    1034:	f8 94       	cli
    1036:	41 15       	cp	r20, r1
    1038:	51 05       	cpc	r21, r1
    103a:	b9 f0       	breq	.+46     	; 0x106a <iqReadTimeout+0x60>
    103c:	8a 01       	movw	r16, r20
    103e:	a8 01       	movw	r20, r16
    1040:	b7 01       	movw	r22, r14
    1042:	c6 01       	movw	r24, r12
    1044:	ad de       	rcall	.-678    	; 0xda0 <iq_read>
    1046:	ec 01       	movw	r28, r24
    1048:	89 2b       	or	r24, r25
    104a:	21 f1       	breq	.+72     	; 0x1094 <iqReadTimeout+0x8a>
    104c:	a1 14       	cp	r10, r1
    104e:	b1 04       	cpc	r11, r1
    1050:	19 f0       	breq	.+6      	; 0x1058 <iqReadTimeout+0x4e>
    1052:	c6 01       	movw	r24, r12
    1054:	f5 01       	movw	r30, r10
    1056:	09 95       	icall
    1058:	78 94       	sei
    105a:	0c 1b       	sub	r16, r28
    105c:	1d 0b       	sbc	r17, r29
    105e:	ec 0e       	add	r14, r28
    1060:	fd 1e       	adc	r15, r29
    1062:	f8 94       	cli
    1064:	01 15       	cp	r16, r1
    1066:	11 05       	cpc	r17, r1
    1068:	51 f7       	brne	.-44     	; 0x103e <iqReadTimeout+0x34>
    106a:	00 e0       	ldi	r16, 0x00	; 0
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	78 94       	sei
    1070:	c3 01       	movw	r24, r6
    1072:	80 1b       	sub	r24, r16
    1074:	91 0b       	sbc	r25, r17
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	7f 90       	pop	r7
    1090:	6f 90       	pop	r6
    1092:	08 95       	ret
    1094:	b4 01       	movw	r22, r8
    1096:	c6 01       	movw	r24, r12
    1098:	77 dd       	rcall	.-1298   	; 0xb88 <chThdEnqueueTimeoutS>
    109a:	89 2b       	or	r24, r25
    109c:	81 f2       	breq	.-96     	; 0x103e <iqReadTimeout+0x34>
    109e:	e7 cf       	rjmp	.-50     	; 0x106e <iqReadTimeout+0x64>

000010a0 <oqObjectInit>:
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	fc 01       	movw	r30, r24
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24
    10aa:	93 83       	std	Z+3, r25	; 0x03
    10ac:	82 83       	std	Z+2, r24	; 0x02
    10ae:	55 83       	std	Z+5, r21	; 0x05
    10b0:	44 83       	std	Z+4, r20	; 0x04
    10b2:	77 83       	std	Z+7, r23	; 0x07
    10b4:	66 83       	std	Z+6, r22	; 0x06
    10b6:	75 87       	std	Z+13, r23	; 0x0d
    10b8:	64 87       	std	Z+12, r22	; 0x0c
    10ba:	73 87       	std	Z+11, r23	; 0x0b
    10bc:	62 87       	std	Z+10, r22	; 0x0a
    10be:	46 0f       	add	r20, r22
    10c0:	57 1f       	adc	r21, r23
    10c2:	51 87       	std	Z+9, r21	; 0x09
    10c4:	40 87       	std	Z+8, r20	; 0x08
    10c6:	37 87       	std	Z+15, r19	; 0x0f
    10c8:	26 87       	std	Z+14, r18	; 0x0e
    10ca:	11 8b       	std	Z+17, r17	; 0x11
    10cc:	00 8b       	std	Z+16, r16	; 0x10
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <oqPutTimeout>:
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
    10e0:	f6 2e       	mov	r15, r22
    10e2:	8a 01       	movw	r16, r20
    10e4:	f8 94       	cli
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <oqPutTimeout+0x1e>
    10e8:	b8 01       	movw	r22, r16
    10ea:	ce 01       	movw	r24, r28
    10ec:	4d dd       	rcall	.-1382   	; 0xb88 <chThdEnqueueTimeoutS>
    10ee:	97 fd       	sbrc	r25, 7
    10f0:	2a c0       	rjmp	.+84     	; 0x1146 <oqPutTimeout+0x72>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	89 2b       	or	r24, r25
    10f8:	b9 f3       	breq	.-18     	; 0x10e8 <oqPutTimeout+0x14>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9d 83       	std	Y+5, r25	; 0x05
    1102:	8c 83       	std	Y+4, r24	; 0x04
    1104:	ea 85       	ldd	r30, Y+10	; 0x0a
    1106:	fb 85       	ldd	r31, Y+11	; 0x0b
    1108:	cf 01       	movw	r24, r30
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	9b 87       	std	Y+11, r25	; 0x0b
    110e:	8a 87       	std	Y+10, r24	; 0x0a
    1110:	f0 82       	st	Z, r15
    1112:	2a 85       	ldd	r18, Y+10	; 0x0a
    1114:	3b 85       	ldd	r19, Y+11	; 0x0b
    1116:	88 85       	ldd	r24, Y+8	; 0x08
    1118:	99 85       	ldd	r25, Y+9	; 0x09
    111a:	28 17       	cp	r18, r24
    111c:	39 07       	cpc	r19, r25
    111e:	20 f0       	brcs	.+8      	; 0x1128 <oqPutTimeout+0x54>
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	9b 87       	std	Y+11, r25	; 0x0b
    1126:	8a 87       	std	Y+10, r24	; 0x0a
    1128:	ee 85       	ldd	r30, Y+14	; 0x0e
    112a:	ff 85       	ldd	r31, Y+15	; 0x0f
    112c:	30 97       	sbiw	r30, 0x00	; 0
    112e:	11 f0       	breq	.+4      	; 0x1134 <oqPutTimeout+0x60>
    1130:	ce 01       	movw	r24, r28
    1132:	09 95       	icall
    1134:	78 94       	sei
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	08 95       	ret
    1146:	78 94       	sei
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	08 95       	ret

00001154 <oqGetI>:
    1154:	cf 93       	push	r28
    1156:	fc 01       	movw	r30, r24
    1158:	a4 85       	ldd	r26, Z+12	; 0x0c
    115a:	b5 85       	ldd	r27, Z+13	; 0x0d
    115c:	82 85       	ldd	r24, Z+10	; 0x0a
    115e:	93 85       	ldd	r25, Z+11	; 0x0b
    1160:	8a 17       	cp	r24, r26
    1162:	9b 07       	cpc	r25, r27
    1164:	e1 f0       	breq	.+56     	; 0x119e <oqGetI+0x4a>
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	95 81       	ldd	r25, Z+5	; 0x05
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	95 83       	std	Z+5, r25	; 0x05
    116e:	84 83       	std	Z+4, r24	; 0x04
    1170:	cd 01       	movw	r24, r26
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	95 87       	std	Z+13, r25	; 0x0d
    1176:	84 87       	std	Z+12, r24	; 0x0c
    1178:	cc 91       	ld	r28, X
    117a:	20 85       	ldd	r18, Z+8	; 0x08
    117c:	31 85       	ldd	r19, Z+9	; 0x09
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	40 f4       	brcc	.+16     	; 0x1194 <oqGetI+0x40>
    1184:	cf 01       	movw	r24, r30
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	1b dd       	rcall	.-1482   	; 0xbc2 <chThdDequeueNextI>
    118c:	8c 2f       	mov	r24, r28
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret
    1194:	86 81       	ldd	r24, Z+6	; 0x06
    1196:	97 81       	ldd	r25, Z+7	; 0x07
    1198:	95 87       	std	Z+13, r25	; 0x0d
    119a:	84 87       	std	Z+12, r24	; 0x0c
    119c:	f3 cf       	rjmp	.-26     	; 0x1184 <oqGetI+0x30>
    119e:	84 81       	ldd	r24, Z+4	; 0x04
    11a0:	95 81       	ldd	r25, Z+5	; 0x05
    11a2:	89 2b       	or	r24, r25
    11a4:	01 f3       	breq	.-64     	; 0x1166 <oqGetI+0x12>
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	f2 cf       	rjmp	.-28     	; 0x1190 <oqGetI+0x3c>

000011ac <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
    11ac:	6f 92       	push	r6
    11ae:	7f 92       	push	r7
    11b0:	8f 92       	push	r8
    11b2:	9f 92       	push	r9
    11b4:	af 92       	push	r10
    11b6:	bf 92       	push	r11
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	6c 01       	movw	r12, r24
    11ca:	7b 01       	movw	r14, r22
    11cc:	3a 01       	movw	r6, r20
    11ce:	49 01       	movw	r8, r18
  qnotify_t nfy = oqp->q_notify;
    11d0:	fc 01       	movw	r30, r24
    11d2:	a6 84       	ldd	r10, Z+14	; 0x0e
    11d4:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    11d6:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
    11d8:	41 15       	cp	r20, r1
    11da:	51 05       	cpc	r21, r1
    11dc:	b9 f0       	breq	.+46     	; 0x120c <oqWriteTimeout+0x60>
    11de:	8a 01       	movw	r16, r20
    size_t done;

    done = oq_write(oqp, bp, n);
    11e0:	a8 01       	movw	r20, r16
    11e2:	b7 01       	movw	r22, r14
    11e4:	c6 01       	movw	r24, r12
    11e6:	37 de       	rcall	.-914    	; 0xe56 <oq_write>
    11e8:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
    11ea:	89 2b       	or	r24, r25
    11ec:	21 f1       	breq	.+72     	; 0x1236 <oqWriteTimeout+0x8a>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
    11ee:	a1 14       	cp	r10, r1
    11f0:	b1 04       	cpc	r11, r1
    11f2:	19 f0       	breq	.+6      	; 0x11fa <oqWriteTimeout+0x4e>
        nfy(oqp);
    11f4:	c6 01       	movw	r24, r12
    11f6:	f5 01       	movw	r30, r10
    11f8:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    11fa:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
    11fc:	0c 1b       	sub	r16, r28
    11fe:	1d 0b       	sbc	r17, r29
      bp += done;
    1200:	ec 0e       	add	r14, r28
    1202:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1204:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
    1206:	01 15       	cp	r16, r1
    1208:	11 05       	cpc	r17, r1
    120a:	51 f7       	brne	.-44     	; 0x11e0 <oqWriteTimeout+0x34>
    120c:	00 e0       	ldi	r16, 0x00	; 0
    120e:	10 e0       	ldi	r17, 0x00	; 0
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1210:	78 94       	sei
    }
  }

  osalSysUnlock();
  return max - n;
}
    1212:	c3 01       	movw	r24, r6
    1214:	80 1b       	sub	r24, r16
    1216:	91 0b       	sbc	r25, r17
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	9f 90       	pop	r9
    122e:	8f 90       	pop	r8
    1230:	7f 90       	pop	r7
    1232:	6f 90       	pop	r6
    1234:	08 95       	ret
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
    1236:	b4 01       	movw	r22, r8
    1238:	c6 01       	movw	r24, r12
    123a:	a6 dc       	rcall	.-1716   	; 0xb88 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
    123c:	89 2b       	or	r24, r25
    123e:	81 f2       	breq	.-96     	; 0x11e0 <oqWriteTimeout+0x34>
    1240:	e7 cf       	rjmp	.-50     	; 0x1210 <oqWriteTimeout+0x64>

00001242 <i2cInit>:
    1242:	86 c2       	rjmp	.+1292   	; 0x1750 <i2c_lld_init>

00001244 <i2cObjectInit>:
    1244:	21 e0       	ldi	r18, 0x01	; 1
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
    124a:	12 82       	std	Z+2, r1	; 0x02
    124c:	11 82       	std	Z+1, r1	; 0x01
    124e:	04 96       	adiw	r24, 0x04	; 4
    1250:	d1 cc       	rjmp	.-1630   	; 0xbf4 <chMtxObjectInit>

00001252 <i2cMatchAddress>:
    1252:	f8 94       	cli
    1254:	85 d2       	rcall	.+1290   	; 0x1760 <i2c_lld_matchAddress>
    1256:	78 94       	sei
    1258:	08 95       	ret

0000125a <i2cSlaveReceive>:


msg_t i2cSlaveReceive(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes, sysinterval_t timeout)
{
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	ec 01       	movw	r28, r24
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    126c:	f8 94       	cli
    126e:	f8 94       	cli
               ( (rxbytes == 0U) || ( (rxbytes > 0U) && (rxbuf != NULL) ) ) &&
               (timeout != TIME_IMMEDIATE) );

  chSysLock();
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
    1270:	1b 82       	std	Y+3, r1	; 0x03
  i2cp->state = I2C_ACTIVE_RX;
    1272:	84 e0       	ldi	r24, 0x04	; 4
    1274:	88 83       	st	Y, r24
  rdymsg = i2c_lld_slaveReceive(i2cp, addr, txbuf, txbytes, rxbuf, rxbytes,timeout);
    1276:	ce 01       	movw	r24, r28
    1278:	7f d2       	rcall	.+1278   	; 0x1778 <i2c_lld_slaveReceive>
    if (rdymsg == MSG_TIMEOUT) {
    127a:	8f 3f       	cpi	r24, 0xFF	; 255
    127c:	2f ef       	ldi	r18, 0xFF	; 255
    127e:	92 07       	cpc	r25, r18
    1280:	59 f0       	breq	.+22     	; 0x1298 <i2cSlaveReceive+0x3e>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
    1282:	22 e0       	ldi	r18, 0x02	; 2
    1284:	28 83       	st	Y, r18
  }
  return rdymsg;
  osalSysUnlock();
  chSysUnlock();
  
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	08 95       	ret
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_RX;
  rdymsg = i2c_lld_slaveReceive(i2cp, addr, txbuf, txbytes, rxbuf, rxbytes,timeout);
    if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
    1298:	25 e0       	ldi	r18, 0x05	; 5
    129a:	28 83       	st	Y, r18
    129c:	f4 cf       	rjmp	.-24     	; 0x1286 <i2cSlaveReceive+0x2c>

0000129e <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
    129e:	05 96       	adiw	r24, 0x05	; 5
    12a0:	b4 ce       	rjmp	.-664    	; 0x100a <iqReadTimeout>

000012a2 <_read>:
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	05 96       	adiw	r24, 0x05	; 5
    12a8:	b0 ce       	rjmp	.-672    	; 0x100a <iqReadTimeout>

000012aa <_writet>:
    12aa:	47 96       	adiw	r24, 0x17	; 23
    12ac:	7f cf       	rjmp	.-258    	; 0x11ac <oqWriteTimeout>

000012ae <_write>:
    12ae:	2f ef       	ldi	r18, 0xFF	; 255
    12b0:	3f ef       	ldi	r19, 0xFF	; 255
    12b2:	47 96       	adiw	r24, 0x17	; 23
    12b4:	7b cf       	rjmp	.-266    	; 0x11ac <oqWriteTimeout>

000012b6 <_gett>:
    12b6:	05 96       	adiw	r24, 0x05	; 5
    12b8:	6e ce       	rjmp	.-804    	; 0xf96 <iqGetTimeout>

000012ba <_get>:
    12ba:	6f ef       	ldi	r22, 0xFF	; 255
    12bc:	7f ef       	ldi	r23, 0xFF	; 255
    12be:	05 96       	adiw	r24, 0x05	; 5
    12c0:	6a ce       	rjmp	.-812    	; 0xf96 <iqGetTimeout>

000012c2 <_putt>:
    12c2:	47 96       	adiw	r24, 0x17	; 23
    12c4:	07 cf       	rjmp	.-498    	; 0x10d4 <oqPutTimeout>

000012c6 <_put>:
    12c6:	4f ef       	ldi	r20, 0xFF	; 255
    12c8:	5f ef       	ldi	r21, 0xFF	; 255
    12ca:	47 96       	adiw	r24, 0x17	; 23
    12cc:	03 cf       	rjmp	.-506    	; 0x10d4 <oqPutTimeout>

000012ce <_ctl>:
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	08 95       	ret

000012d4 <sdInit>:
    12d4:	32 c3       	rjmp	.+1636   	; 0x193a <sd_lld_init>

000012d6 <sdObjectInit>:
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
    12e4:	9b 01       	movw	r18, r22
    12e6:	7a 01       	movw	r14, r20
    12e8:	fc 01       	movw	r30, r24
    12ea:	8d e2       	ldi	r24, 0x2D	; 45
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	81 93       	st	Z+, r24
    12f0:	91 93       	st	Z+, r25
    12f2:	fb 83       	std	Y+3, r31	; 0x03
    12f4:	ea 83       	std	Y+2, r30	; 0x02
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	8c 83       	std	Y+4, r24	; 0x04
    12fa:	be 01       	movw	r22, r28
    12fc:	67 5d       	subi	r22, 0xD7	; 215
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	8e 01       	movw	r16, r28
    1302:	40 e1       	ldi	r20, 0x10	; 16
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	ce 01       	movw	r24, r28
    1308:	05 96       	adiw	r24, 0x05	; 5
    130a:	00 de       	rcall	.-1024   	; 0xf0c <iqObjectInit>
    130c:	be 01       	movw	r22, r28
    130e:	67 5c       	subi	r22, 0xC7	; 199
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	97 01       	movw	r18, r14
    1314:	40 e1       	ldi	r20, 0x10	; 16
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	ce 01       	movw	r24, r28
    131a:	47 96       	adiw	r24, 0x17	; 23
    131c:	c1 de       	rcall	.-638    	; 0x10a0 <oqObjectInit>
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	08 95       	ret

0000132c <sdStart>:
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	ec 01       	movw	r28, r24
    1332:	f8 94       	cli
    1334:	09 d3       	rcall	.+1554   	; 0x1948 <sd_lld_start>
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	8c 83       	std	Y+4, r24	; 0x04
    133a:	78 94       	sei
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
    134a:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	89 2b       	or	r24, r25
    1352:	51 f0       	breq	.+20     	; 0x1368 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    1354:	61 2f       	mov	r22, r17
    1356:	ce 01       	movw	r24, r28
    1358:	05 96       	adiw	r24, 0x05	; 5
    135a:	f2 dd       	rcall	.-1052   	; 0xf40 <iqPutI>
    135c:	97 fd       	sbrc	r25, 7
    135e:	0e c0       	rjmp	.+28     	; 0x137c <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    1368:	64 e0       	ldi	r22, 0x04	; 4
    136a:	ce 01       	movw	r24, r28
    136c:	02 96       	adiw	r24, 0x02	; 2
    136e:	60 dc       	rcall	.-1856   	; 0xc30 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    1370:	61 2f       	mov	r22, r17
    1372:	ce 01       	movw	r24, r28
    1374:	05 96       	adiw	r24, 0x05	; 5
    1376:	e4 dd       	rcall	.-1080   	; 0xf40 <iqPutI>
    1378:	97 ff       	sbrs	r25, 7
    137a:	f2 cf       	rjmp	.-28     	; 0x1360 <sdIncomingDataI+0x1e>
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	ce 01       	movw	r24, r28
    1380:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	53 cc       	rjmp	.-1882   	; 0xc30 <chEvtBroadcastFlagsI>

0000138a <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
    1394:	47 96       	adiw	r24, 0x17	; 23
    1396:	de de       	rcall	.-580    	; 0x1154 <oqGetI>
    1398:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
    139a:	97 fd       	sbrc	r25, 7
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
    139e:	ce 01       	movw	r24, r28
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret
    13aa:	68 e0       	ldi	r22, 0x08	; 8
    13ac:	c8 01       	movw	r24, r16
    13ae:	02 96       	adiw	r24, 0x02	; 2
    13b0:	3f dc       	rcall	.-1922   	; 0xc30 <chEvtBroadcastFlagsI>
    13b2:	ce 01       	movw	r24, r28
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
    13be:	08 95       	ret

000013c0 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    13c0:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
    13c2:	80 81       	ld	r24, Z
    13c4:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
    13c6:	81 81       	ldd	r24, Z+1	; 0x01
    13c8:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
    13ce:	83 81       	ldd	r24, Z+3	; 0x03
    13d0:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
    13d2:	84 81       	ldd	r24, Z+4	; 0x04
    13d4:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
    13d6:	85 81       	ldd	r24, Z+5	; 0x05
    13d8:	8a b9       	out	0x0a, r24	; 10
    13da:	08 95       	ret

000013dc <__vector_24>:
  if (i2cp->addr == i2cadr && i2cadr != 0)
  TWAR = 0; //unset previously configured slave addr
}

void i2c_lld_unmatchAll(I2CDriver *i2cp){
  TWAR = 0; //force unset previously configured slave addr
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	4f 93       	push	r20
    13ec:	5f 93       	push	r21
    13ee:	6f 93       	push	r22
    13f0:	7f 93       	push	r23
    13f2:	8f 93       	push	r24
    13f4:	9f 93       	push	r25
    13f6:	af 93       	push	r26
    13f8:	bf 93       	push	r27
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <__avr_in_isr>
    1404:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1408:	e8 2f       	mov	r30, r24
    140a:	e8 7f       	andi	r30, 0xF8	; 248
    140c:	8e 2f       	mov	r24, r30
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	89 3c       	cpi	r24, 0xC9	; 201
    1412:	91 05       	cpc	r25, r1
    1414:	10 f1       	brcs	.+68     	; 0x145a <__vector_24+0x7e>
    1416:	84 e9       	ldi	r24, 0x94	; 148
    1418:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    141c:	6e ef       	ldi	r22, 0xFE	; 254
    141e:	7f ef       	ldi	r23, 0xFF	; 255
    1420:	80 ea       	ldi	r24, 0xA0	; 160
    1422:	93 e0       	ldi	r25, 0x03	; 3
    1424:	a4 db       	rcall	.-2232   	; 0xb6e <chThdResumeI>
    1426:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    142a:	81 11       	cpse	r24, r1
    142c:	51 c0       	rjmp	.+162    	; 0x14d0 <__vector_24+0xf4>
    142e:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__avr_in_isr>
    1432:	30 da       	rcall	.-2976   	; 0x894 <chSchIsPreemptionRequired>
    1434:	81 11       	cpse	r24, r1
    1436:	3e da       	rcall	.-2948   	; 0x8b4 <chSchDoReschedule>
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti
    145a:	fc 01       	movw	r30, r24
    145c:	ec 5c       	subi	r30, 0xCC	; 204
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__tablejump2__>
    1464:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <I2CD1+0xf>
    1468:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <I2CD1+0x10>
    146c:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <I2CD1+0x13>
    1470:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <I2CD1+0x14>
    1474:	e2 0f       	add	r30, r18
    1476:	f3 1f       	adc	r31, r19
    1478:	80 81       	ld	r24, Z
    147a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    147e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <I2CD1+0x11>
    1482:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <I2CD1+0x12>
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	28 17       	cp	r18, r24
    148a:	39 07       	cpc	r19, r25
    148c:	09 f4       	brne	.+2      	; 0x1490 <__vector_24+0xb4>
    148e:	83 c0       	rjmp	.+262    	; 0x1596 <__vector_24+0x1ba>
    1490:	81 ec       	ldi	r24, 0xC1	; 193
    1492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1496:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    149a:	c7 cf       	rjmp	.-114    	; 0x142a <__vector_24+0x4e>
    149c:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    14a0:	e0 91 a9 03 	lds	r30, 0x03A9	; 0x8003a9 <I2CD1+0x15>
    14a4:	f0 91 aa 03 	lds	r31, 0x03AA	; 0x8003aa <I2CD1+0x16>
    14a8:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <I2CD1+0x19>
    14ac:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    14b0:	e8 0f       	add	r30, r24
    14b2:	f9 1f       	adc	r31, r25
    14b4:	20 83       	st	Z, r18
    14b6:	84 e9       	ldi	r24, 0x94	; 148
    14b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 ea       	ldi	r24, 0xA0	; 160
    14c2:	93 e0       	ldi	r25, 0x03	; 3
    14c4:	54 db       	rcall	.-2392   	; 0xb6e <chThdResumeI>
    14c6:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <I2CD1+0x3>
    14d0:	84 e9       	ldi	r24, 0x94	; 148
    14d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14d6:	6e ef       	ldi	r22, 0xFE	; 254
    14d8:	7f ef       	ldi	r23, 0xFF	; 255
    14da:	80 ea       	ldi	r24, 0xA0	; 160
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	47 db       	rcall	.-2418   	; 0xb6e <chThdResumeI>
    14e0:	a6 cf       	rjmp	.-180    	; 0x142e <__vector_24+0x52>
    14e2:	81 ec       	ldi	r24, 0xC1	; 193
    14e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14e8:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <I2CD1+0xf>
    14ec:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <I2CD1+0x10>
    14f0:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <I2CD1+0x13>
    14f4:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <I2CD1+0x14>
    14f8:	e8 0f       	add	r30, r24
    14fa:	f9 1f       	adc	r31, r25
    14fc:	20 81       	ld	r18, Z
    14fe:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1502:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <I2CD1+0x11>
    1506:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <I2CD1+0x12>
    150a:	21 50       	subi	r18, 0x01	; 1
    150c:	31 09       	sbc	r19, r1
    150e:	82 17       	cp	r24, r18
    1510:	93 07       	cpc	r25, r19
    1512:	09 f4       	brne	.+2      	; 0x1516 <__vector_24+0x13a>
    1514:	40 c0       	rjmp	.+128    	; 0x1596 <__vector_24+0x1ba>
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <I2CD1+0x14>
    151c:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <I2CD1+0x13>
    1520:	81 ec       	ldi	r24, 0xC1	; 193
    1522:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1526:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    152a:	7f cf       	rjmp	.-258    	; 0x142a <__vector_24+0x4e>
    152c:	40 91 a9 03 	lds	r20, 0x03A9	; 0x8003a9 <I2CD1+0x15>
    1530:	50 91 aa 03 	lds	r21, 0x03AA	; 0x8003aa <I2CD1+0x16>
    1534:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <I2CD1+0x19>
    1538:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    153c:	9c 01       	movw	r18, r24
    153e:	2f 5f       	subi	r18, 0xFF	; 255
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	30 93 ae 03 	sts	0x03AE, r19	; 0x8003ae <I2CD1+0x1a>
    1546:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <I2CD1+0x19>
    154a:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    154e:	fa 01       	movw	r30, r20
    1550:	e8 0f       	add	r30, r24
    1552:	f9 1f       	adc	r31, r25
    1554:	20 83       	st	Z, r18
    1556:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <I2CD1+0x17>
    155a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <I2CD1+0x18>
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <I2CD1+0x19>
    1564:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    1568:	28 17       	cp	r18, r24
    156a:	39 07       	cpc	r19, r25
    156c:	09 f4       	brne	.+2      	; 0x1570 <__vector_24+0x194>
    156e:	ab c0       	rjmp	.+342    	; 0x16c6 <__vector_24+0x2ea>
    1570:	85 ec       	ldi	r24, 0xC5	; 197
    1572:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1576:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    157a:	57 cf       	rjmp	.-338    	; 0x142a <__vector_24+0x4e>
    157c:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <I2CD1+0x17>
    1580:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <I2CD1+0x18>
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <I2CD1+0x19>
    158a:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    158e:	28 17       	cp	r18, r24
    1590:	39 07       	cpc	r19, r25
    1592:	09 f0       	breq	.+2      	; 0x1596 <__vector_24+0x1ba>
    1594:	7d cf       	rjmp	.-262    	; 0x1490 <__vector_24+0xb4>
    1596:	81 e8       	ldi	r24, 0x81	; 129
    1598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    159c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    15a0:	44 cf       	rjmp	.-376    	; 0x142a <__vector_24+0x4e>
    15a2:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <I2CD1+0x17>
    15a6:	30 91 ac 03 	lds	r19, 0x03AC	; 0x8003ac <I2CD1+0x18>
    15aa:	21 50       	subi	r18, 0x01	; 1
    15ac:	31 09       	sbc	r19, r1
    15ae:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <I2CD1+0x19>
    15b2:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    15b6:	82 17       	cp	r24, r18
    15b8:	93 07       	cpc	r25, r19
    15ba:	09 f4       	brne	.+2      	; 0x15be <__vector_24+0x1e2>
    15bc:	c3 c0       	rjmp	.+390    	; 0x1744 <__vector_24+0x368>
    15be:	21 ec       	ldi	r18, 0xC1	; 193
    15c0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15c4:	40 91 a9 03 	lds	r20, 0x03A9	; 0x8003a9 <I2CD1+0x15>
    15c8:	50 91 aa 03 	lds	r21, 0x03AA	; 0x8003aa <I2CD1+0x16>
    15cc:	9c 01       	movw	r18, r24
    15ce:	2f 5f       	subi	r18, 0xFF	; 255
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	30 93 ae 03 	sts	0x03AE, r19	; 0x8003ae <I2CD1+0x1a>
    15d6:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <I2CD1+0x19>
    15da:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    15de:	fa 01       	movw	r30, r20
    15e0:	e8 0f       	add	r30, r24
    15e2:	f9 1f       	adc	r31, r25
    15e4:	20 83       	st	Z, r18
    15e6:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <I2CD1+0x19>
    15ea:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    15ee:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <I2CD1+0x17>
    15f2:	30 91 ac 03 	lds	r19, 0x03AC	; 0x8003ac <I2CD1+0x18>
    15f6:	21 50       	subi	r18, 0x01	; 1
    15f8:	31 09       	sbc	r19, r1
    15fa:	82 17       	cp	r24, r18
    15fc:	93 07       	cpc	r25, r19
    15fe:	09 f4       	brne	.+2      	; 0x1602 <__vector_24+0x226>
    1600:	62 c0       	rjmp	.+196    	; 0x16c6 <__vector_24+0x2ea>
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <I2CD1+0x1a>
    1608:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <I2CD1+0x19>
    160c:	b1 cf       	rjmp	.-158    	; 0x1570 <__vector_24+0x194>
    160e:	40 91 a9 03 	lds	r20, 0x03A9	; 0x8003a9 <I2CD1+0x15>
    1612:	50 91 aa 03 	lds	r21, 0x03AA	; 0x8003aa <I2CD1+0x16>
    1616:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <I2CD1+0x19>
    161a:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    161e:	9c 01       	movw	r18, r24
    1620:	2f 5f       	subi	r18, 0xFF	; 255
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	30 93 ae 03 	sts	0x03AE, r19	; 0x8003ae <I2CD1+0x1a>
    1628:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <I2CD1+0x19>
    162c:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1630:	fa 01       	movw	r30, r20
    1632:	e8 0f       	add	r30, r24
    1634:	f9 1f       	adc	r31, r25
    1636:	20 83       	st	Z, r18
    1638:	81 ec       	ldi	r24, 0xC1	; 193
    163a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	80 ea       	ldi	r24, 0xA0	; 160
    1644:	93 e0       	ldi	r25, 0x03	; 3
    1646:	93 da       	rcall	.-2778   	; 0xb6e <chThdResumeI>
    1648:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    164c:	ee ce       	rjmp	.-548    	; 0x142a <__vector_24+0x4e>
    164e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <I2CD1+0x3>
    1658:	3b cf       	rjmp	.-394    	; 0x14d0 <__vector_24+0xf4>
    165a:	40 91 a3 03 	lds	r20, 0x03A3	; 0x8003a3 <I2CD1+0xf>
    165e:	50 91 a4 03 	lds	r21, 0x03A4	; 0x8003a4 <I2CD1+0x10>
    1662:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <I2CD1+0x13>
    1666:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <I2CD1+0x14>
    166a:	9c 01       	movw	r18, r24
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	30 93 a8 03 	sts	0x03A8, r19	; 0x8003a8 <I2CD1+0x14>
    1674:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <I2CD1+0x13>
    1678:	fa 01       	movw	r30, r20
    167a:	e8 0f       	add	r30, r24
    167c:	f9 1f       	adc	r31, r25
    167e:	fc ce       	rjmp	.-520    	; 0x1478 <__vector_24+0x9c>
    1680:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <I2CD1+0x3>
    168a:	22 cf       	rjmp	.-444    	; 0x14d0 <__vector_24+0xf4>
    168c:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <I2CD1+0xe>
    1690:	88 0f       	add	r24, r24
    1692:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1696:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <I2CD1+0xf>
    169a:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <I2CD1+0x10>
    169e:	89 2b       	or	r24, r25
    16a0:	69 f0       	breq	.+26     	; 0x16bc <__vector_24+0x2e0>
    16a2:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <I2CD1+0x11>
    16a6:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <I2CD1+0x12>
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	39 f0       	breq	.+14     	; 0x16bc <__vector_24+0x2e0>
    16ae:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <I2CD1+0x13>
    16b2:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <I2CD1+0x14>
    16b6:	82 17       	cp	r24, r18
    16b8:	93 07       	cpc	r25, r19
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <__vector_24+0x2ea>
    16bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16c6:	85 e8       	ldi	r24, 0x85	; 133
    16c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16cc:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    16d0:	ac ce       	rjmp	.-680    	; 0x142a <__vector_24+0x4e>
    16d2:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <I2CD1+0x13>
    16d6:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <I2CD1+0x14>
    16da:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <I2CD1+0x11>
    16de:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <I2CD1+0x12>
    16e2:	82 17       	cp	r24, r18
    16e4:	93 07       	cpc	r25, r19
    16e6:	b8 f0       	brcs	.+46     	; 0x1716 <__vector_24+0x33a>
    16e8:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <I2CD1+0x15>
    16ec:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <I2CD1+0x16>
    16f0:	89 2b       	or	r24, r25
    16f2:	61 f1       	breq	.+88     	; 0x174c <__vector_24+0x370>
    16f4:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <I2CD1+0x17>
    16f8:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <I2CD1+0x18>
    16fc:	89 2b       	or	r24, r25
    16fe:	31 f1       	breq	.+76     	; 0x174c <__vector_24+0x370>
    1700:	85 ea       	ldi	r24, 0xA5	; 165
    1702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1706:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    170a:	8f ce       	rjmp	.-738    	; 0x142a <__vector_24+0x4e>
    170c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <I2CD1+0x19>
    1710:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <I2CD1+0x1a>
    1714:	57 cf       	rjmp	.-338    	; 0x15c4 <__vector_24+0x1e8>
    1716:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <I2CD1+0xf>
    171a:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <I2CD1+0x10>
    171e:	ac 01       	movw	r20, r24
    1720:	4f 5f       	subi	r20, 0xFF	; 255
    1722:	5f 4f       	sbci	r21, 0xFF	; 255
    1724:	50 93 a8 03 	sts	0x03A8, r21	; 0x8003a8 <I2CD1+0x14>
    1728:	40 93 a7 03 	sts	0x03A7, r20	; 0x8003a7 <I2CD1+0x13>
    172c:	f9 01       	movw	r30, r18
    172e:	e8 0f       	add	r30, r24
    1730:	f9 1f       	adc	r31, r25
    1732:	80 81       	ld	r24, Z
    1734:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1738:	85 e8       	ldi	r24, 0x85	; 133
    173a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    173e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <I2CD1+0x3>
    1742:	73 ce       	rjmp	.-794    	; 0x142a <__vector_24+0x4e>
    1744:	21 e8       	ldi	r18, 0x81	; 129
    1746:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    174a:	3c cf       	rjmp	.-392    	; 0x15c4 <__vector_24+0x1e8>
    174c:	84 e9       	ldi	r24, 0x94	; 148
    174e:	75 cf       	rjmp	.-278    	; 0x163a <__vector_24+0x25e>

00001750 <i2c_lld_init>:
    1750:	84 e9       	ldi	r24, 0x94	; 148
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	77 dd       	rcall	.-1298   	; 0x1244 <i2cObjectInit>
    1756:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <I2CD1+0xd>
    175a:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <I2CD1+0xc>
    175e:	08 95       	ret

00001760 <i2c_lld_matchAddress>:
    1760:	61 11       	cpse	r22, r1
    1762:	04 c0       	rjmp	.+8      	; 0x176c <i2c_lld_matchAddress+0xc>
    1764:	fc 01       	movw	r30, r24
    1766:	84 8d       	ldd	r24, Z+28	; 0x1c
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	08 95       	ret
    176c:	66 0f       	add	r22, r22
    176e:	fc 01       	movw	r30, r24
    1770:	66 87       	std	Z+14, r22	; 0x0e
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	08 95       	ret

00001778 <i2c_lld_slaveReceive>:

/*Usar as funcoes do mestre como referência e ver diferenças*/
msg_t  i2c_lld_slaveReceive(I2CDriver *i2cp,  i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout){
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	fc 01       	movw	r30, r24
  
  
  i2cp->errors = I2C_NO_ERROR;
    1782:	13 82       	std	Z+3, r1	; 0x03
    i2cp->txbuf = NULL;
    1784:	10 8a       	std	Z+16, r1	; 0x10
    1786:	17 86       	std	Z+15, r1	; 0x0f
  i2cp->txbytes = 0;
    1788:	12 8a       	std	Z+18, r1	; 0x12
    178a:	11 8a       	std	Z+17, r1	; 0x11
  i2cp->txidx = 0;
    178c:	14 8a       	std	Z+20, r1	; 0x14
    178e:	13 8a       	std	Z+19, r1	; 0x13
  i2cp->rxbuf = rxbuf;
    1790:	16 8b       	std	Z+22, r17	; 0x16
    1792:	05 8b       	std	Z+21, r16	; 0x15
  i2cp->rxbytes = rxbytes;
    1794:	f0 8e       	std	Z+24, r15	; 0x18
    1796:	e7 8a       	std	Z+23, r14	; 0x17
  i2cp->rxidx = 0;
    1798:	12 8e       	std	Z+26, r1	; 0x1a
    179a:	11 8e       	std	Z+25, r1	; 0x19

  TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1<< TWEA)); 
    179c:	85 ec       	ldi	r24, 0xC5	; 197
    179e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 * @sclass
 */
static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
                                              sysinterval_t timeout) {

  return chThdSuspendTimeoutS(trp, timeout);
    17a2:	6f ef       	ldi	r22, 0xFF	; 255
    17a4:	7f ef       	ldi	r23, 0xFF	; 255
    17a6:	cf 01       	movw	r24, r30
    17a8:	0c 96       	adiw	r24, 0x0c	; 12
  //osal thread  suspend
 return osalThreadSuspendTimeoutS(&i2cp->thread, TIME_INFINITE);
  //acordar thread no final da maquina de estados (osal recapthread)
  }
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	cc c9       	rjmp	.-3176   	; 0xb4c <chThdSuspendTimeoutS>

000017b4 <__vector_11>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    17dc:	0e 94 ae 01 	call	0x35c	; 0x35c <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    17e0:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__avr_in_isr>
    17e4:	57 d8       	rcall	.-3922   	; 0x894 <chSchIsPreemptionRequired>
    17e6:	81 11       	cpse	r24, r1
    17e8:	65 d8       	rcall	.-3894   	; 0x8b4 <chSchDoReschedule>
    17ea:	ff 91       	pop	r31
}
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <st_lld_init>:
    180c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source. */
  TCCR1A     = 0;
  TCCR1B     = _BV(WGM12);
    1810:	e1 e8       	ldi	r30, 0x81	; 129
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	88 e0       	ldi	r24, 0x08	; 8
    1816:	80 83       	st	Z, r24

  /* start disabled. */
  TCCR1C     = 0;
    1818:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  OCR1A      = 0;
    181c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1820:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  TCNT1      = 0;
    1824:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1828:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */    
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
    1830:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  TCCR1B     = PRESCALER;
    1834:	85 e0       	ldi	r24, 0x05	; 5
    1836:	80 83       	st	Z, r24
    1838:	08 95       	ret

0000183a <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    183a:	e1 ec       	ldi	r30, 0xC1	; 193
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	80 62       	ori	r24, 0x20	; 32
    1842:	80 83       	st	Z, r24
    1844:	08 95       	ret

00001846 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    1846:	1f 92       	push	r1
    1848:	0f 92       	push	r0
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	0f 92       	push	r0
    184e:	11 24       	eor	r1, r1
    1850:	2f 93       	push	r18
    1852:	3f 93       	push	r19
    1854:	4f 93       	push	r20
    1856:	5f 93       	push	r21
    1858:	6f 93       	push	r22
    185a:	7f 93       	push	r23
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <__avr_in_isr>

  sra = UCSR0A;
    186e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    1872:	98 2f       	mov	r25, r24
    1874:	9c 71       	andi	r25, 0x1C	; 28
    1876:	d9 f4       	brne	.+54     	; 0x18ae <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    1878:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    187c:	81 ec       	ldi	r24, 0xC1	; 193
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	60 dd       	rcall	.-1344   	; 0x1342 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1882:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__avr_in_isr>
    1886:	06 d8       	rcall	.-4084   	; 0x894 <chSchIsPreemptionRequired>
    1888:	81 11       	cpse	r24, r1
    188a:	14 d8       	rcall	.-4056   	; 0x8b4 <chSchDoReschedule>
}
    188c:	ff 91       	pop	r31
    188e:	ef 91       	pop	r30
    1890:	bf 91       	pop	r27
    1892:	af 91       	pop	r26
    1894:	9f 91       	pop	r25
    1896:	8f 91       	pop	r24
    1898:	7f 91       	pop	r23
    189a:	6f 91       	pop	r22
    189c:	5f 91       	pop	r21
    189e:	4f 91       	pop	r20
    18a0:	3f 91       	pop	r19
    18a2:	2f 91       	pop	r18
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    18ae:	83 fd       	sbrc	r24, 3
    18b0:	09 c0       	rjmp	.+18     	; 0x18c4 <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    18b2:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    18b4:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    18b6:	60 62       	ori	r22, 0x20	; 32
  if (sra & fe)
    18b8:	84 fd       	sbrc	r24, 4
    sts |= SD_FRAMING_ERROR;
    18ba:	60 64       	ori	r22, 0x40	; 64
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    18bc:	83 ec       	ldi	r24, 0xC3	; 195
    18be:	93 e0       	ldi	r25, 0x03	; 3
    18c0:	b7 d9       	rcall	.-3218   	; 0xc30 <chEvtBroadcastFlagsI>
    18c2:	da cf       	rjmp	.-76     	; 0x1878 <__vector_18+0x32>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    18c4:	60 e8       	ldi	r22, 0x80	; 128
    18c6:	f6 cf       	rjmp	.-20     	; 0x18b4 <__vector_18+0x6e>

000018c8 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    18c8:	1f 92       	push	r1
    18ca:	0f 92       	push	r0
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	0f 92       	push	r0
    18d0:	11 24       	eor	r1, r1
    18d2:	2f 93       	push	r18
    18d4:	3f 93       	push	r19
    18d6:	4f 93       	push	r20
    18d8:	5f 93       	push	r21
    18da:	6f 93       	push	r22
    18dc:	7f 93       	push	r23
    18de:	8f 93       	push	r24
    18e0:	9f 93       	push	r25
    18e2:	af 93       	push	r26
    18e4:	bf 93       	push	r27
    18e6:	ef 93       	push	r30
    18e8:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    18f0:	81 ec       	ldi	r24, 0xC1	; 193
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	4a dd       	rcall	.-1388   	; 0x138a <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    18f6:	97 fd       	sbrc	r25, 7
    18f8:	1a c0       	rjmp	.+52     	; 0x192e <__vector_19+0x66>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    18fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  OSAL_IRQ_EPILOGUE();
    18fe:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__avr_in_isr>
    1902:	0e 94 4a 04 	call	0x894	; 0x894 <chSchIsPreemptionRequired>
    1906:	81 11       	cpse	r24, r1
    1908:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <chSchDoReschedule>
}
    190c:	ff 91       	pop	r31
    190e:	ef 91       	pop	r30
    1910:	bf 91       	pop	r27
    1912:	af 91       	pop	r26
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	7f 91       	pop	r23
    191a:	6f 91       	pop	r22
    191c:	5f 91       	pop	r21
    191e:	4f 91       	pop	r20
    1920:	3f 91       	pop	r19
    1922:	2f 91       	pop	r18
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    192e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1932:	8f 7d       	andi	r24, 0xDF	; 223
    1934:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1938:	e2 cf       	rjmp	.-60     	; 0x18fe <__vector_19+0x36>

0000193a <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    193a:	4d e1       	ldi	r20, 0x1D	; 29
    193c:	5c e0       	ldi	r21, 0x0C	; 12
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	81 ec       	ldi	r24, 0xC1	; 193
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	c7 cc       	rjmp	.-1650   	; 0x12d6 <sdObjectInit>

00001948 <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    1948:	61 15       	cp	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	19 f1       	breq	.+70     	; 0x1994 <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    194e:	81 5c       	subi	r24, 0xC1	; 193
    1950:	93 40       	sbci	r25, 0x03	; 3
    1952:	09 f0       	breq	.+2      	; 0x1956 <sd_lld_start+0xe>
    1954:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    1956:	fb 01       	movw	r30, r22
    1958:	80 81       	ld	r24, Z
    195a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    195e:	81 81       	ldd	r24, Z+1	; 0x01
    1960:	8f 70       	andi	r24, 0x0F	; 15
    1962:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UCSR0A = (1 << U2X0);
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    196c:	88 e9       	ldi	r24, 0x98	; 152
    196e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  switch (config->sc_bits_per_char) {
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	b9 f0       	breq	.+46     	; 0x19a6 <sd_lld_start+0x5e>
    1978:	a0 f0       	brcs	.+40     	; 0x19a2 <sd_lld_start+0x5a>
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	71 f0       	breq	.+28     	; 0x199a <sd_lld_start+0x52>
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	71 f4       	brne	.+28     	; 0x199e <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    1982:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1986:	84 60       	ori	r24, 0x04	; 4
    1988:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    198c:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    198e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1992:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    1994:	61 e4       	ldi	r22, 0x41	; 65
    1996:	71 e0       	ldi	r23, 0x01	; 1
    1998:	da cf       	rjmp	.-76     	; 0x194e <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    199a:	84 e0       	ldi	r24, 0x04	; 4
    199c:	f8 cf       	rjmp	.-16     	; 0x198e <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    199e:	86 e0       	ldi	r24, 0x06	; 6
    19a0:	f6 cf       	rjmp	.-20     	; 0x198e <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	f4 cf       	rjmp	.-24     	; 0x198e <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	f2 cf       	rjmp	.-28     	; 0x198e <sd_lld_start+0x46>

000019aa <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    19aa:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  EIMSK  = 0x00;
    19ae:	1d ba       	out	0x1d, r1	; 29
    19b0:	08 95       	ret

000019b2 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    19b2:	2f 92       	push	r2
    19b4:	3f 92       	push	r3
    19b6:	4f 92       	push	r4
    19b8:	5f 92       	push	r5
    19ba:	6f 92       	push	r6
    19bc:	7f 92       	push	r7
    19be:	8f 92       	push	r8
    19c0:	9f 92       	push	r9
    19c2:	af 92       	push	r10
    19c4:	bf 92       	push	r11
    19c6:	cf 92       	push	r12
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	a2 97       	sbiw	r28, 0x22	; 34
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	1c 01       	movw	r2, r24
    19e8:	6b 01       	movw	r12, r22
    19ea:	58 8f       	std	Y+24, r21	; 0x18
    19ec:	4f 8b       	std	Y+23, r20	; 0x17
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    19ee:	1e 8a       	std	Y+22, r1	; 0x16
    19f0:	1d 8a       	std	Y+21, r1	; 0x15
    19f2:	9e 01       	movw	r18, r28
    19f4:	2e 5f       	subi	r18, 0xFE	; 254
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	3e 87       	std	Y+14, r19	; 0x0e
    19fa:	2d 87       	std	Y+13, r18	; 0x0d
    19fc:	ae 01       	movw	r20, r28
    19fe:	4f 5f       	subi	r20, 0xFF	; 255
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	58 8b       	std	Y+16, r21	; 0x10
    1a04:	4f 87       	std	Y+15, r20	; 0x0f
    1a06:	24 1b       	sub	r18, r20
    1a08:	35 0b       	sbc	r19, r21
    1a0a:	38 a3       	std	Y+32, r19	; 0x20
    1a0c:	2f 8f       	std	Y+31, r18	; 0x1f
    1a0e:	21 50       	subi	r18, 0x01	; 1
    1a10:	31 09       	sbc	r19, r1
    1a12:	3a a3       	std	Y+34, r19	; 0x22
    1a14:	29 a3       	std	Y+33, r18	; 0x21
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1a16:	ce 01       	movw	r24, r28
    1a18:	0c 96       	adiw	r24, 0x0c	; 12
    1a1a:	9a 8b       	std	Y+18, r25	; 0x12
    1a1c:	89 8b       	std	Y+17, r24	; 0x11
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1a1e:	86 01       	movw	r16, r12
    1a20:	0f 5f       	subi	r16, 0xFF	; 255
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	d6 01       	movw	r26, r12
    1a26:	6c 91       	ld	r22, X
    if (c == 0)
    1a28:	66 23       	and	r22, r22
    1a2a:	b9 f0       	breq	.+46     	; 0x1a5a <chvprintf+0xa8>
      return n;
    if (c != '%') {
    1a2c:	65 32       	cpi	r22, 0x25	; 37
    1a2e:	81 f1       	breq	.+96     	; 0x1a90 <chvprintf+0xde>
      streamPut(chp, (uint8_t)c);
    1a30:	d1 01       	movw	r26, r2
    1a32:	ed 91       	ld	r30, X+
    1a34:	fc 91       	ld	r31, X
    1a36:	06 80       	ldd	r0, Z+6	; 0x06
    1a38:	f7 81       	ldd	r31, Z+7	; 0x07
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	c1 01       	movw	r24, r2
    1a3e:	09 95       	icall
      n++;
    1a40:	ed 89       	ldd	r30, Y+21	; 0x15
    1a42:	fe 89       	ldd	r31, Y+22	; 0x16
    1a44:	31 96       	adiw	r30, 0x01	; 1
    1a46:	fe 8b       	std	Y+22, r31	; 0x16
    1a48:	ed 8b       	std	Y+21, r30	; 0x15
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1a4a:	68 01       	movw	r12, r16
    1a4c:	86 01       	movw	r16, r12
    1a4e:	0f 5f       	subi	r16, 0xFF	; 255
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	d6 01       	movw	r26, r12
    1a54:	6c 91       	ld	r22, X
    if (c == 0)
    1a56:	61 11       	cpse	r22, r1
    1a58:	e9 cf       	rjmp	.-46     	; 0x1a2c <chvprintf+0x7a>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    1a5a:	8d 89       	ldd	r24, Y+21	; 0x15
    1a5c:	9e 89       	ldd	r25, Y+22	; 0x16
    1a5e:	a2 96       	adiw	r28, 0x22	; 34
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	bf 90       	pop	r11
    1a7c:	af 90       	pop	r10
    1a7e:	9f 90       	pop	r9
    1a80:	8f 90       	pop	r8
    1a82:	7f 90       	pop	r7
    1a84:	6f 90       	pop	r6
    1a86:	5f 90       	pop	r5
    1a88:	4f 90       	pop	r4
    1a8a:	3f 90       	pop	r3
    1a8c:	2f 90       	pop	r2
    1a8e:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    1a90:	d6 01       	movw	r26, r12
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	8c 91       	ld	r24, X
    1a96:	11 97       	sbiw	r26, 0x01	; 1
    1a98:	8d 32       	cpi	r24, 0x2D	; 45
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <chvprintf+0xec>
    1a9c:	ec c0       	rjmp	.+472    	; 0x1c76 <chvprintf+0x2c4>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    1a9e:	1a 8e       	std	Y+26, r1	; 0x1a
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    1aa0:	80 33       	cpi	r24, 0x30	; 48
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <chvprintf+0xf4>
    1aa4:	e1 c0       	rjmp	.+450    	; 0x1c68 <chvprintf+0x2b6>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    1aa6:	20 e2       	ldi	r18, 0x20	; 32
    1aa8:	29 8f       	std	Y+25, r18	; 0x19
    1aaa:	a8 01       	movw	r20, r16
    1aac:	4f 5f       	subi	r20, 0xFF	; 255
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	ef 89       	ldd	r30, Y+23	; 0x17
    1ab6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ab8:	13 c0       	rjmp	.+38     	; 0x1ae0 <chvprintf+0x12e>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    1aba:	90 81       	ld	r25, Z
    1abc:	32 96       	adiw	r30, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    1abe:	98 01       	movw	r18, r16
    1ac0:	22 0f       	add	r18, r18
    1ac2:	33 1f       	adc	r19, r19
    1ac4:	00 0f       	add	r16, r16
    1ac6:	11 1f       	adc	r17, r17
    1ac8:	00 0f       	add	r16, r16
    1aca:	11 1f       	adc	r17, r17
    1acc:	00 0f       	add	r16, r16
    1ace:	11 1f       	adc	r17, r17
    1ad0:	02 0f       	add	r16, r18
    1ad2:	13 1f       	adc	r17, r19
    1ad4:	09 0f       	add	r16, r25
    1ad6:	11 1d       	adc	r17, r1
    1ad8:	4f 5f       	subi	r20, 0xFF	; 255
    1ada:	5f 4f       	sbci	r21, 0xFF	; 255
    1adc:	d6 01       	movw	r26, r12
    1ade:	8c 91       	ld	r24, X
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    1ae0:	6a 01       	movw	r12, r20
      if (c >= '0' && c <= '9')
    1ae2:	90 ed       	ldi	r25, 0xD0	; 208
    1ae4:	98 0f       	add	r25, r24
    1ae6:	9a 30       	cpi	r25, 0x0A	; 10
    1ae8:	50 f3       	brcs	.-44     	; 0x1abe <chvprintf+0x10c>
        c -= '0';
      else if (c == '*')
    1aea:	8a 32       	cpi	r24, 0x2A	; 42
    1aec:	31 f3       	breq	.-52     	; 0x1aba <chvprintf+0x108>
    1aee:	f8 8f       	std	Y+24, r31	; 0x18
    1af0:	ef 8b       	std	Y+23, r30	; 0x17
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    1af6:	8e 32       	cpi	r24, 0x2E	; 46
    1af8:	09 f4       	brne	.+2      	; 0x1afc <chvprintf+0x14a>
    1afa:	96 c0       	rjmp	.+300    	; 0x1c28 <chvprintf+0x276>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    1afc:	98 2f       	mov	r25, r24
    1afe:	9f 7d       	andi	r25, 0xDF	; 223
    1b00:	9c 34       	cpi	r25, 0x4C	; 76
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <chvprintf+0x154>
    1b04:	7e c0       	rjmp	.+252    	; 0x1c02 <chvprintf+0x250>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    1b06:	af eb       	ldi	r26, 0xBF	; 191
    1b08:	a8 0f       	add	r26, r24
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	aa 31       	cpi	r26, 0x1A	; 26
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <chvprintf+0x160>
    1b10:	90 e0       	ldi	r25, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    1b12:	48 2f       	mov	r20, r24
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	fa 01       	movw	r30, r20
    1b18:	e4 54       	subi	r30, 0x44	; 68
    1b1a:	f1 09       	sbc	r31, r1
    1b1c:	e5 33       	cpi	r30, 0x35	; 53
    1b1e:	f1 05       	cpc	r31, r1
    1b20:	08 f4       	brcc	.+2      	; 0x1b24 <chvprintf+0x172>
    1b22:	b1 c0       	rjmp	.+354    	; 0x1c86 <chvprintf+0x2d4>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b28:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    1b2a:	89 a0       	ldd	r8, Y+33	; 0x21
    1b2c:	9a a0       	ldd	r9, Y+34	; 0x22
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1b2e:	ae 01       	movw	r20, r28
    1b30:	4f 5f       	subi	r20, 0xFF	; 255
    1b32:	5f 4f       	sbci	r21, 0xFF	; 255
    1b34:	7a 01       	movw	r14, r20
    1b36:	58 01       	movw	r10, r16
    1b38:	ae 1a       	sub	r10, r30
    1b3a:	bf 0a       	sbc	r11, r31
    1b3c:	b7 fc       	sbrc	r11, 7
    1b3e:	d9 c0       	rjmp	.+434    	; 0x1cf2 <chvprintf+0x340>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1b40:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b42:	51 11       	cpse	r21, r1
    1b44:	5b c0       	rjmp	.+182    	; 0x1bfc <chvprintf+0x24a>
      width = -width;
    1b46:	00 27       	eor	r16, r16
    1b48:	11 27       	eor	r17, r17
    1b4a:	0a 19       	sub	r16, r10
    1b4c:	1b 09       	sbc	r17, r11
    if (width < 0) {
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <chvprintf+0x1a0>
    1b50:	5b c1       	rjmp	.+694    	; 0x1e08 <chvprintf+0x456>
      if (*s == '-' && filler == '0') {
    1b52:	d7 01       	movw	r26, r14
    1b54:	8c 91       	ld	r24, X
    1b56:	8d 32       	cpi	r24, 0x2D	; 45
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <chvprintf+0x1aa>
    1b5a:	5f c1       	rjmp	.+702    	; 0x1e1a <chvprintf+0x468>
    1b5c:	79 8c       	ldd	r7, Y+25	; 0x19
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    1b5e:	d1 01       	movw	r26, r2
    1b60:	ed 91       	ld	r30, X+
    1b62:	fc 91       	ld	r31, X
    1b64:	06 80       	ldd	r0, Z+6	; 0x06
    1b66:	f7 81       	ldd	r31, Z+7	; 0x07
    1b68:	e0 2d       	mov	r30, r0
    1b6a:	67 2d       	mov	r22, r7
    1b6c:	c1 01       	movw	r24, r2
    1b6e:	09 95       	icall
        n++;
      } while (++width != 0);
    1b70:	0f 5f       	subi	r16, 0xFF	; 255
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	a1 f7       	brne	.-24     	; 0x1b5e <chvprintf+0x1ac>
    1b76:	2d 89       	ldd	r18, Y+21	; 0x15
    1b78:	3e 89       	ldd	r19, Y+22	; 0x16
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	8a 19       	sub	r24, r10
    1b84:	9b 09       	sbc	r25, r11
    1b86:	a9 01       	movw	r20, r18
    1b88:	48 1b       	sub	r20, r24
    1b8a:	59 0b       	sbc	r21, r25
    1b8c:	5e 8b       	std	Y+22, r21	; 0x16
    1b8e:	4d 8b       	std	Y+21, r20	; 0x15
    }
    while (--i >= 0) {
    1b90:	97 fc       	sbrc	r9, 7
    1b92:	45 cf       	rjmp	.-374    	; 0x1a1e <chvprintf+0x6c>
    1b94:	a1 2c       	mov	r10, r1
    1b96:	b1 2c       	mov	r11, r1
    1b98:	84 01       	movw	r16, r8
      streamPut(chp, (uint8_t)*s++);
    1b9a:	f7 01       	movw	r30, r14
    1b9c:	61 91       	ld	r22, Z+
    1b9e:	7f 01       	movw	r14, r30
    1ba0:	d1 01       	movw	r26, r2
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	06 80       	ldd	r0, Z+6	; 0x06
    1ba8:	f7 81       	ldd	r31, Z+7	; 0x07
    1baa:	e0 2d       	mov	r30, r0
    1bac:	c1 01       	movw	r24, r2
    1bae:	09 95       	icall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1bb0:	01 50       	subi	r16, 0x01	; 1
    1bb2:	11 09       	sbc	r17, r1
    1bb4:	90 f7       	brcc	.-28     	; 0x1b9a <chvprintf+0x1e8>
    1bb6:	8d 89       	ldd	r24, Y+21	; 0x15
    1bb8:	9e 89       	ldd	r25, Y+22	; 0x16
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	97 fc       	sbrc	r9, 7
    1bbe:	2a c1       	rjmp	.+596    	; 0x1e14 <chvprintf+0x462>
    1bc0:	f4 01       	movw	r30, r8
    1bc2:	e8 0f       	add	r30, r24
    1bc4:	f9 1f       	adc	r31, r25
    1bc6:	fe 8b       	std	Y+22, r31	; 0x16
    1bc8:	ed 8b       	std	Y+21, r30	; 0x15
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1bca:	a1 14       	cp	r10, r1
    1bcc:	b1 04       	cpc	r11, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <chvprintf+0x220>
    1bd0:	26 cf       	rjmp	.-436    	; 0x1a1e <chvprintf+0x6c>
    1bd2:	85 01       	movw	r16, r10
    1bd4:	f9 8c       	ldd	r15, Y+25	; 0x19
      streamPut(chp, (uint8_t)filler);
    1bd6:	d1 01       	movw	r26, r2
    1bd8:	ed 91       	ld	r30, X+
    1bda:	fc 91       	ld	r31, X
    1bdc:	06 80       	ldd	r0, Z+6	; 0x06
    1bde:	f7 81       	ldd	r31, Z+7	; 0x07
    1be0:	e0 2d       	mov	r30, r0
    1be2:	6f 2d       	mov	r22, r15
    1be4:	c1 01       	movw	r24, r2
    1be6:	09 95       	icall
      n++;
      width--;
    1be8:	01 50       	subi	r16, 0x01	; 1
    1bea:	11 09       	sbc	r17, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1bec:	a1 f7       	brne	.-24     	; 0x1bd6 <chvprintf+0x224>
    1bee:	ed 89       	ldd	r30, Y+21	; 0x15
    1bf0:	fe 89       	ldd	r31, Y+22	; 0x16
    1bf2:	ea 0d       	add	r30, r10
    1bf4:	fb 1d       	adc	r31, r11
    1bf6:	fe 8b       	std	Y+22, r31	; 0x16
    1bf8:	ed 8b       	std	Y+21, r30	; 0x15
    1bfa:	11 cf       	rjmp	.-478    	; 0x1a1e <chvprintf+0x6c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1bfc:	97 fe       	sbrs	r9, 7
    1bfe:	cc cf       	rjmp	.-104    	; 0x1b98 <chvprintf+0x1e6>
    1c00:	e4 cf       	rjmp	.-56     	; 0x1bca <chvprintf+0x218>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
    1c02:	d6 01       	movw	r26, r12
    1c04:	4c 91       	ld	r20, X
    1c06:	44 23       	and	r20, r20
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <chvprintf+0x25a>
    1c0a:	8c cf       	rjmp	.-232    	; 0x1b24 <chvprintf+0x172>
        c = *fmt++;
    1c0c:	ff ef       	ldi	r31, 0xFF	; 255
    1c0e:	cf 1a       	sub	r12, r31
    1c10:	df 0a       	sbc	r13, r31
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1c12:	84 2f       	mov	r24, r20
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	fc 01       	movw	r30, r24
    1c18:	e4 54       	subi	r30, 0x44	; 68
    1c1a:	f1 09       	sbc	r31, r1
    1c1c:	e5 33       	cpi	r30, 0x35	; 53
    1c1e:	f1 05       	cpc	r31, r1
    1c20:	08 f4       	brcc	.+2      	; 0x1c24 <chvprintf+0x272>
    1c22:	f5 c0       	rjmp	.+490    	; 0x1e0e <chvprintf+0x45c>
    1c24:	84 2f       	mov	r24, r20
    1c26:	7e cf       	rjmp	.-260    	; 0x1b24 <chvprintf+0x172>
    1c28:	df 01       	movw	r26, r30
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <chvprintf+0x298>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    1c2c:	9c 91       	ld	r25, X
    1c2e:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    1c30:	a9 01       	movw	r20, r18
    1c32:	44 0f       	add	r20, r20
    1c34:	55 1f       	adc	r21, r21
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	24 0f       	add	r18, r20
    1c44:	35 1f       	adc	r19, r21
        precision += c;
    1c46:	29 0f       	add	r18, r25
    1c48:	31 1d       	adc	r19, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    1c4a:	ef ef       	ldi	r30, 0xFF	; 255
    1c4c:	ce 1a       	sub	r12, r30
    1c4e:	de 0a       	sbc	r13, r30
    1c50:	f6 01       	movw	r30, r12
    1c52:	31 97       	sbiw	r30, 0x01	; 1
    1c54:	80 81       	ld	r24, Z
        if (c >= '0' && c <= '9')
    1c56:	90 ed       	ldi	r25, 0xD0	; 208
    1c58:	98 0f       	add	r25, r24
    1c5a:	9a 30       	cpi	r25, 0x0A	; 10
    1c5c:	48 f3       	brcs	.-46     	; 0x1c30 <chvprintf+0x27e>
          c -= '0';
        else if (c == '*')
    1c5e:	8a 32       	cpi	r24, 0x2A	; 42
    1c60:	29 f3       	breq	.-54     	; 0x1c2c <chvprintf+0x27a>
    1c62:	b8 8f       	std	Y+24, r27	; 0x18
    1c64:	af 8b       	std	Y+23, r26	; 0x17
    1c66:	4a cf       	rjmp	.-364    	; 0x1afc <chvprintf+0x14a>
    1c68:	f8 01       	movw	r30, r16
    1c6a:	81 81       	ldd	r24, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    1c6c:	0f 5f       	subi	r16, 0xFF	; 255
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    1c70:	f0 e3       	ldi	r31, 0x30	; 48
    1c72:	f9 8f       	std	Y+25, r31	; 0x19
    1c74:	1a cf       	rjmp	.-460    	; 0x1aaa <chvprintf+0xf8>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    1c76:	86 01       	movw	r16, r12
    1c78:	0e 5f       	subi	r16, 0xFE	; 254
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	12 96       	adiw	r26, 0x02	; 2
    1c7e:	8c 91       	ld	r24, X
      left_align = TRUE;
    1c80:	b1 e0       	ldi	r27, 0x01	; 1
    1c82:	ba 8f       	std	Y+26, r27	; 0x1a
    1c84:	0d cf       	rjmp	.-486    	; 0x1aa0 <chvprintf+0xee>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1c86:	e3 50       	subi	r30, 0x03	; 3
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	4c c5       	rjmp	.+2712   	; 0x2724 <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c90:	02 96       	adiw	r24, 0x02	; 2
    1c92:	af 89       	ldd	r26, Y+23	; 0x17
    1c94:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c96:	ed 90       	ld	r14, X+
    1c98:	fc 90       	ld	r15, X
    1c9a:	e1 14       	cp	r14, r1
    1c9c:	f1 04       	cpc	r15, r1
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <chvprintf+0x2f0>
    1ca0:	6a c1       	rjmp	.+724    	; 0x1f76 <chvprintf+0x5c4>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1ca2:	f7 01       	movw	r30, r14
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    1ca4:	21 15       	cp	r18, r1
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <chvprintf+0x2fa>
    1caa:	d1 c0       	rjmp	.+418    	; 0x1e4e <chvprintf+0x49c>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1cac:	40 81       	ld	r20, Z
    1cae:	44 23       	and	r20, r20
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <chvprintf+0x302>
    1cb2:	66 c1       	rjmp	.+716    	; 0x1f80 <chvprintf+0x5ce>
    1cb4:	21 50       	subi	r18, 0x01	; 1
    1cb6:	31 09       	sbc	r19, r1
    1cb8:	f7 01       	movw	r30, r14
    1cba:	31 96       	adiw	r30, 0x01	; 1
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <chvprintf+0x316>
    1cbe:	21 50       	subi	r18, 0x01	; 1
    1cc0:	31 09       	sbc	r19, r1
    1cc2:	08 f4       	brcc	.+2      	; 0x1cc6 <chvprintf+0x314>
    1cc4:	4d c1       	rjmp	.+666    	; 0x1f60 <chvprintf+0x5ae>
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	bf 01       	movw	r22, r30
    1cca:	6f 5f       	subi	r22, 0xFF	; 255
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	40 81       	ld	r20, Z
    1cd0:	41 11       	cpse	r20, r1
    1cd2:	f5 cf       	rjmp	.-22     	; 0x1cbe <chvprintf+0x30c>
    1cd4:	ee 19       	sub	r30, r14
    1cd6:	ff 09       	sbc	r31, r15
    1cd8:	4f 01       	movw	r8, r30
    1cda:	21 e0       	ldi	r18, 0x01	; 1
    1cdc:	82 1a       	sub	r8, r18
    1cde:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1ce0:	98 8f       	std	Y+24, r25	; 0x18
    1ce2:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1ce4:	30 e2       	ldi	r19, 0x20	; 32
    1ce6:	39 8f       	std	Y+25, r19	; 0x19
    1ce8:	58 01       	movw	r10, r16
    1cea:	ae 1a       	sub	r10, r30
    1cec:	bf 0a       	sbc	r11, r31
    1cee:	b7 fe       	sbrs	r11, 7
    1cf0:	27 cf       	rjmp	.-434    	; 0x1b40 <chvprintf+0x18e>
    1cf2:	a1 2c       	mov	r10, r1
    1cf4:	b1 2c       	mov	r11, r1
    1cf6:	24 cf       	rjmp	.-440    	; 0x1b40 <chvprintf+0x18e>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1cf8:	af 89       	ldd	r26, Y+23	; 0x17
    1cfa:	b8 8d       	ldd	r27, Y+24	; 0x18
    1cfc:	8c 91       	ld	r24, X
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1d02:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    1d04:	89 a0       	ldd	r8, Y+33	; 0x21
    1d06:	9a a0       	ldd	r9, Y+34	; 0x22

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1d08:	12 96       	adiw	r26, 0x02	; 2
    1d0a:	b8 8f       	std	Y+24, r27	; 0x18
    1d0c:	af 8b       	std	Y+23, r26	; 0x17
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    1d0e:	b0 e2       	ldi	r27, 0x20	; 32
    1d10:	b9 8f       	std	Y+25, r27	; 0x19
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1d12:	9e 01       	movw	r18, r28
    1d14:	2f 5f       	subi	r18, 0xFF	; 255
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	79 01       	movw	r14, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    1d1a:	0d cf       	rjmp	.-486    	; 0x1b36 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    1d1e:	4a e0       	ldi	r20, 0x0A	; 10
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1d26:	91 11       	cpse	r25, r1
    1d28:	64 c0       	rjmp	.+200    	; 0x1df2 <chvprintf+0x440>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    1d2a:	ef 89       	ldd	r30, Y+23	; 0x17
    1d2c:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d2e:	80 80       	ld	r8, Z
    1d30:	91 80       	ldd	r9, Z+1	; 0x01
    1d32:	a1 2c       	mov	r10, r1
    1d34:	b1 2c       	mov	r11, r1
    1d36:	32 96       	adiw	r30, 0x02	; 2
    1d38:	f8 8f       	std	Y+24, r31	; 0x18
    1d3a:	ef 8b       	std	Y+23, r30	; 0x17
    1d3c:	24 01       	movw	r4, r8
    1d3e:	35 01       	movw	r6, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1d40:	9e 01       	movw	r18, r28
    1d42:	24 5f       	subi	r18, 0xF4	; 244
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	3c 8b       	std	Y+20, r19	; 0x14
    1d48:	2b 8b       	std	Y+19, r18	; 0x13
    1d4a:	1c 8f       	std	Y+28, r17	; 0x1c
    1d4c:	0b 8f       	std	Y+27, r16	; 0x1b
    1d4e:	7a 01       	movw	r14, r20
    1d50:	8b 01       	movw	r16, r22
    1d52:	de 8e       	std	Y+30, r13	; 0x1e
    1d54:	cd 8e       	std	Y+29, r12	; 0x1d
  do {
    i = (int)(l % radix);
    1d56:	c5 01       	movw	r24, r10
    1d58:	b4 01       	movw	r22, r8
    1d5a:	a8 01       	movw	r20, r16
    1d5c:	97 01       	movw	r18, r14
    1d5e:	c6 d4       	rcall	.+2444   	; 0x26ec <__divmodsi4>
    i += '0';
    1d60:	9b 01       	movw	r18, r22
    1d62:	20 5d       	subi	r18, 0xD0	; 208
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i > '9')
    1d66:	2a 33       	cpi	r18, 0x3A	; 58
    1d68:	31 05       	cpc	r19, r1
    1d6a:	14 f0       	brlt	.+4      	; 0x1d70 <chvprintf+0x3be>
      i += 'A' - '0' - 10;
    1d6c:	29 5f       	subi	r18, 0xF9	; 249
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    *--q = i;
    1d70:	d2 2e       	mov	r13, r18
    1d72:	ab 89       	ldd	r26, Y+19	; 0x13
    1d74:	bc 89       	ldd	r27, Y+20	; 0x14
    1d76:	2e 93       	st	-X, r18
    1d78:	bc 8b       	std	Y+20, r27	; 0x14
    1d7a:	ab 8b       	std	Y+19, r26	; 0x13
    l /= radix;
    1d7c:	c5 01       	movw	r24, r10
    1d7e:	b4 01       	movw	r22, r8
    1d80:	a8 01       	movw	r20, r16
    1d82:	97 01       	movw	r18, r14
    1d84:	b3 d4       	rcall	.+2406   	; 0x26ec <__divmodsi4>
    1d86:	49 01       	movw	r8, r18
    1d88:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    1d8a:	c3 01       	movw	r24, r6
    1d8c:	b2 01       	movw	r22, r4
    1d8e:	a8 01       	movw	r20, r16
    1d90:	97 01       	movw	r18, r14
    1d92:	ac d4       	rcall	.+2392   	; 0x26ec <__divmodsi4>
    1d94:	29 01       	movw	r4, r18
    1d96:	3a 01       	movw	r6, r20
    1d98:	23 2b       	or	r18, r19
    1d9a:	24 2b       	or	r18, r20
    1d9c:	25 2b       	or	r18, r21
    1d9e:	d9 f6       	brne	.-74     	; 0x1d56 <chvprintf+0x3a4>
    1da0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1da2:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1da4:	fd 2c       	mov	r15, r13
    1da6:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1da8:	de 8c       	ldd	r13, Y+30	; 0x1e

  i = (int)(p + MAX_FILLER - q);
    1daa:	89 89       	ldd	r24, Y+17	; 0x11
    1dac:	9a 89       	ldd	r25, Y+18	; 0x12
    1dae:	eb 89       	ldd	r30, Y+19	; 0x13
    1db0:	fc 89       	ldd	r31, Y+20	; 0x14
    1db2:	8e 1b       	sub	r24, r30
    1db4:	9f 0b       	sbc	r25, r31
    1db6:	de 01       	movw	r26, r28
    1db8:	11 96       	adiw	r26, 0x01	; 1
    1dba:	31 96       	adiw	r30, 0x01	; 1
    1dbc:	9d 01       	movw	r18, r26
    1dbe:	28 0f       	add	r18, r24
    1dc0:	39 1f       	adc	r19, r25
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <chvprintf+0x414>
    1dc4:	f1 90       	ld	r15, Z+
  do
    *p++ = *q++;
    1dc6:	fd 92       	st	X+, r15
  while (--i);
    1dc8:	a2 17       	cp	r26, r18
    1dca:	b3 07       	cpc	r27, r19
    1dcc:	d9 f7       	brne	.-10     	; 0x1dc4 <chvprintf+0x412>
    1dce:	4c 01       	movw	r8, r24
    1dd0:	f1 e0       	ldi	r31, 0x01	; 1
    1dd2:	8f 1a       	sub	r8, r31
    1dd4:	91 08       	sbc	r9, r1
    1dd6:	fc 01       	movw	r30, r24
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1dd8:	9e 01       	movw	r18, r28
    1dda:	2f 5f       	subi	r18, 0xFF	; 255
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	79 01       	movw	r14, r18
    1de0:	aa ce       	rjmp	.-684    	; 0x1b36 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	48 e0       	ldi	r20, 0x08	; 8
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1dec:	99 23       	and	r25, r25
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <chvprintf+0x440>
    1df0:	9c cf       	rjmp	.-200    	; 0x1d2a <chvprintf+0x378>
        l = va_arg(ap, unsigned long);
    1df2:	af 89       	ldd	r26, Y+23	; 0x17
    1df4:	b8 8d       	ldd	r27, Y+24	; 0x18
    1df6:	8d 90       	ld	r8, X+
    1df8:	9d 90       	ld	r9, X+
    1dfa:	ad 90       	ld	r10, X+
    1dfc:	bc 90       	ld	r11, X
    1dfe:	13 97       	sbiw	r26, 0x03	; 3
    1e00:	14 96       	adiw	r26, 0x04	; 4
    1e02:	b8 8f       	std	Y+24, r27	; 0x18
    1e04:	af 8b       	std	Y+23, r26	; 0x17
    1e06:	9a cf       	rjmp	.-204    	; 0x1d3c <chvprintf+0x38a>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1e08:	97 fe       	sbrs	r9, 7
    1e0a:	c4 ce       	rjmp	.-632    	; 0x1b94 <chvprintf+0x1e2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1e0c:	08 ce       	rjmp	.-1008   	; 0x1a1e <chvprintf+0x6c>
    1e0e:	ee 5c       	subi	r30, 0xCE	; 206
    1e10:	fe 4f       	sbci	r31, 0xFE	; 254
    1e12:	88 c4       	rjmp	.+2320   	; 0x2724 <__tablejump2__>
    1e14:	81 2c       	mov	r8, r1
    1e16:	91 2c       	mov	r9, r1
    1e18:	d3 ce       	rjmp	.-602    	; 0x1bc0 <chvprintf+0x20e>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    1e1a:	b9 8d       	ldd	r27, Y+25	; 0x19
    1e1c:	b0 33       	cpi	r27, 0x30	; 48
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <chvprintf+0x470>
    1e20:	9d ce       	rjmp	.-710    	; 0x1b5c <chvprintf+0x1aa>
        streamPut(chp, (uint8_t)*s++);
    1e22:	ef ef       	ldi	r30, 0xFF	; 255
    1e24:	ee 1a       	sub	r14, r30
    1e26:	fe 0a       	sbc	r15, r30
    1e28:	d1 01       	movw	r26, r2
    1e2a:	ed 91       	ld	r30, X+
    1e2c:	fc 91       	ld	r31, X
    1e2e:	06 80       	ldd	r0, Z+6	; 0x06
    1e30:	f7 81       	ldd	r31, Z+7	; 0x07
    1e32:	e0 2d       	mov	r30, r0
    1e34:	6d e2       	ldi	r22, 0x2D	; 45
    1e36:	c1 01       	movw	r24, r2
    1e38:	09 95       	icall
        n++;
    1e3a:	ed 89       	ldd	r30, Y+21	; 0x15
    1e3c:	fe 89       	ldd	r31, Y+22	; 0x16
    1e3e:	31 96       	adiw	r30, 0x01	; 1
    1e40:	fe 8b       	std	Y+22, r31	; 0x16
    1e42:	ed 8b       	std	Y+21, r30	; 0x15
    1e44:	f1 e0       	ldi	r31, 0x01	; 1
    1e46:	8f 1a       	sub	r8, r31
    1e48:	91 08       	sbc	r9, r1
    1e4a:	79 8c       	ldd	r7, Y+25	; 0x19
    1e4c:	88 ce       	rjmp	.-752    	; 0x1b5e <chvprintf+0x1ac>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1e4e:	20 81       	ld	r18, Z
    1e50:	22 23       	and	r18, r18
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <chvprintf+0x4a4>
    1e54:	95 c0       	rjmp	.+298    	; 0x1f80 <chvprintf+0x5ce>
    1e56:	2e ef       	ldi	r18, 0xFE	; 254
    1e58:	3f e7       	ldi	r19, 0x7F	; 127
    1e5a:	2e cf       	rjmp	.-420    	; 0x1cb8 <chvprintf+0x306>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1e5c:	40 e1       	ldi	r20, 0x10	; 16
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	60 cf       	rjmp	.-320    	; 0x1d26 <chvprintf+0x374>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    1e66:	aa 31       	cpi	r26, 0x1A	; 26
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <chvprintf+0x4ba>
    1e6a:	59 c0       	rjmp	.+178    	; 0x1f1e <chvprintf+0x56c>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    1e6c:	ef 89       	ldd	r30, Y+23	; 0x17
    1e6e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e70:	80 80       	ld	r8, Z
    1e72:	91 80       	ldd	r9, Z+1	; 0x01
    1e74:	09 2c       	mov	r0, r9
    1e76:	00 0c       	add	r0, r0
    1e78:	aa 08       	sbc	r10, r10
    1e7a:	bb 08       	sbc	r11, r11
    1e7c:	32 96       	adiw	r30, 0x02	; 2
    1e7e:	f8 8f       	std	Y+24, r31	; 0x18
    1e80:	ef 8b       	std	Y+23, r30	; 0x17
      if (l < 0) {
    1e82:	b7 fc       	sbrc	r11, 7
    1e84:	58 c0       	rjmp	.+176    	; 0x1f36 <chvprintf+0x584>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1e86:	ae 01       	movw	r20, r28
    1e88:	4f 5f       	subi	r20, 0xFF	; 255
    1e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8c:	5c 8f       	std	Y+28, r21	; 0x1c
    1e8e:	4b 8f       	std	Y+27, r20	; 0x1b
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e94:	0b 96       	adiw	r24, 0x0b	; 11
    1e96:	9c 8b       	std	Y+20, r25	; 0x14
    1e98:	8b 8b       	std	Y+19, r24	; 0x13
    1e9a:	24 01       	movw	r4, r8
    1e9c:	35 01       	movw	r6, r10
    1e9e:	1e 8f       	std	Y+30, r17	; 0x1e
    1ea0:	0d 8f       	std	Y+29, r16	; 0x1d
    1ea2:	7c 01       	movw	r14, r24
  do {
    i = (int)(l % radix);
    1ea4:	c5 01       	movw	r24, r10
    1ea6:	b4 01       	movw	r22, r8
    1ea8:	2a e0       	ldi	r18, 0x0A	; 10
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	1d d4       	rcall	.+2106   	; 0x26ec <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1eb2:	60 5d       	subi	r22, 0xD0	; 208
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb6:	16 2f       	mov	r17, r22
    1eb8:	d7 01       	movw	r26, r14
    1eba:	6e 93       	st	-X, r22
    1ebc:	7d 01       	movw	r14, r26
    l /= radix;
    1ebe:	49 01       	movw	r8, r18
    1ec0:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    1ec2:	c3 01       	movw	r24, r6
    1ec4:	b2 01       	movw	r22, r4
    1ec6:	2a e0       	ldi	r18, 0x0A	; 10
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	0e d4       	rcall	.+2076   	; 0x26ec <__divmodsi4>
    1ed0:	29 01       	movw	r4, r18
    1ed2:	3a 01       	movw	r6, r20
    1ed4:	23 2b       	or	r18, r19
    1ed6:	24 2b       	or	r18, r20
    1ed8:	25 2b       	or	r18, r21
    1eda:	21 f7       	brne	.-56     	; 0x1ea4 <chvprintf+0x4f2>
    1edc:	c7 01       	movw	r24, r14
    1ede:	f1 2e       	mov	r15, r17
    1ee0:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1ee2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1ee4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ee6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ee8:	dc 01       	movw	r26, r24
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	2b 89       	ldd	r18, Y+19	; 0x13
    1eee:	3c 89       	ldd	r19, Y+20	; 0x14
    1ef0:	28 1b       	sub	r18, r24
    1ef2:	39 0b       	sbc	r19, r25
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	8e 0f       	add	r24, r30
    1ef8:	9f 1f       	adc	r25, r31
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <chvprintf+0x54c>
    1efc:	fd 90       	ld	r15, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1efe:	f1 92       	st	Z+, r15
  while (--i);
    1f00:	e8 17       	cp	r30, r24
    1f02:	f9 07       	cpc	r31, r25
    1f04:	d9 f7       	brne	.-10     	; 0x1efc <chvprintf+0x54a>
    1f06:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f08:	58 89       	ldd	r21, Y+16	; 0x10
    1f0a:	e4 1b       	sub	r30, r20
    1f0c:	f5 0b       	sbc	r31, r21
    1f0e:	4f 01       	movw	r8, r30
    1f10:	51 e0       	ldi	r21, 0x01	; 1
    1f12:	85 1a       	sub	r8, r21
    1f14:	91 08       	sbc	r9, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1f16:	ce 01       	movw	r24, r28
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	7c 01       	movw	r14, r24
    1f1c:	0c ce       	rjmp	.-1000   	; 0x1b36 <chvprintf+0x184>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    1f1e:	af 89       	ldd	r26, Y+23	; 0x17
    1f20:	b8 8d       	ldd	r27, Y+24	; 0x18
    1f22:	8d 90       	ld	r8, X+
    1f24:	9d 90       	ld	r9, X+
    1f26:	ad 90       	ld	r10, X+
    1f28:	bc 90       	ld	r11, X
    1f2a:	13 97       	sbiw	r26, 0x03	; 3
    1f2c:	14 96       	adiw	r26, 0x04	; 4
    1f2e:	b8 8f       	std	Y+24, r27	; 0x18
    1f30:	af 8b       	std	Y+23, r26	; 0x17
      else
        l = va_arg(ap, int);
      if (l < 0) {
    1f32:	b7 fe       	sbrs	r11, 7
    1f34:	a8 cf       	rjmp	.-176    	; 0x1e86 <chvprintf+0x4d4>
        *p++ = '-';
    1f36:	8d e2       	ldi	r24, 0x2D	; 45
    1f38:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    1f3a:	b0 94       	com	r11
    1f3c:	a0 94       	com	r10
    1f3e:	90 94       	com	r9
    1f40:	80 94       	com	r8
    1f42:	81 1c       	adc	r8, r1
    1f44:	91 1c       	adc	r9, r1
    1f46:	a1 1c       	adc	r10, r1
    1f48:	b1 1c       	adc	r11, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    1f4a:	9e 01       	movw	r18, r28
    1f4c:	2e 5f       	subi	r18, 0xFE	; 254
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	3c 8f       	std	Y+28, r19	; 0x1c
    1f52:	2b 8f       	std	Y+27, r18	; 0x1b
    1f54:	9d cf       	rjmp	.-198    	; 0x1e90 <chvprintf+0x4de>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1f56:	40 e1       	ldi	r20, 0x10	; 16
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	49 cf       	rjmp	.-366    	; 0x1df2 <chvprintf+0x440>
    1f60:	ee 19       	sub	r30, r14
    1f62:	ff 09       	sbc	r31, r15
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1f64:	4f 01       	movw	r8, r30
    1f66:	51 e0       	ldi	r21, 0x01	; 1
    1f68:	85 1a       	sub	r8, r21
    1f6a:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1f6c:	98 8f       	std	Y+24, r25	; 0x18
    1f6e:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1f70:	80 e2       	ldi	r24, 0x20	; 32
    1f72:	89 8f       	std	Y+25, r24	; 0x19
    1f74:	e0 cd       	rjmp	.-1088   	; 0x1b36 <chvprintf+0x184>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    1f76:	4a e4       	ldi	r20, 0x4A	; 74
    1f78:	e4 2e       	mov	r14, r20
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	f4 2e       	mov	r15, r20
    1f7e:	91 ce       	rjmp	.-734    	; 0x1ca2 <chvprintf+0x2f0>
    1f80:	58 01       	movw	r10, r16
    1f82:	17 fd       	sbrc	r17, 7
    1f84:	0e c0       	rjmp	.+28     	; 0x1fa2 <chvprintf+0x5f0>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1f86:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1f88:	98 8f       	std	Y+24, r25	; 0x18
    1f8a:	8f 8b       	std	Y+23, r24	; 0x17
    1f8c:	51 11       	cpse	r21, r1
    1f8e:	06 c0       	rjmp	.+12     	; 0x1f9c <chvprintf+0x5ea>
    1f90:	88 24       	eor	r8, r8
    1f92:	8a 94       	dec	r8
    1f94:	98 2c       	mov	r9, r8
    1f96:	80 e2       	ldi	r24, 0x20	; 32
    1f98:	89 8f       	std	Y+25, r24	; 0x19
    1f9a:	d5 cd       	rjmp	.-1110   	; 0x1b46 <chvprintf+0x194>
    1f9c:	f0 e2       	ldi	r31, 0x20	; 32
    1f9e:	f9 8f       	std	Y+25, r31	; 0x19
    1fa0:	14 ce       	rjmp	.-984    	; 0x1bca <chvprintf+0x218>
    1fa2:	a1 2c       	mov	r10, r1
    1fa4:	b1 2c       	mov	r11, r1
    1fa6:	ef cf       	rjmp	.-34     	; 0x1f86 <chvprintf+0x5d4>

00001fa8 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1fb0:	ae 01       	movw	r20, r28
    1fb2:	47 5f       	subi	r20, 0xF7	; 247
    1fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb8:	78 85       	ldd	r23, Y+8	; 0x08
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	f9 dc       	rcall	.-1550   	; 0x19b2 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <Thread1>:
 * Ithread, times are in milliseconds.
 */


static THD_WORKING_AREA(waThread1, 32);
static THD_FUNCTION(Thread1, arg) {
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	2a 97       	sbiw	r28, 0x0a	; 10
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
    1fda:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <ch+0xb>
    1fde:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <ch+0xc>
    1fe2:	81 e5       	ldi	r24, 0x51	; 81
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	94 87       	std	Z+12, r25	; 0x0c
    1fe8:	83 87       	std	Z+11, r24	; 0x0b

  (void)arg;
  chRegSetThreadName("SlaveRecieveI2C");
  while (true) {
    palTogglePad(IOPORT2, PORTB_LED1);
    chprintf((BaseSequentialStream *) &SD1, "iniciando processo de recebimento do slave\r\n");  
    1fea:	21 e6       	ldi	r18, 0x61	; 97
    1fec:	62 2e       	mov	r6, r18
    1fee:	21 e0       	ldi	r18, 0x01	; 1
    1ff0:	72 2e       	mov	r7, r18
    1ff2:	31 ec       	ldi	r19, 0xC1	; 193
    1ff4:	a3 2e       	mov	r10, r19
    1ff6:	33 e0       	ldi	r19, 0x03	; 3
    1ff8:	b3 2e       	mov	r11, r19
    chThdSleepMilliseconds(500);
    /*configurar endereço do slave e "encaixar" o matchaddress*/
    debug=i2cMatchAddress(&I2CD1, slaveaddr);    
    chprintf((BaseSequentialStream *) &SD1, "debug = %d\r\n",debug);
    1ffa:	4e e8       	ldi	r20, 0x8E	; 142
    1ffc:	44 2e       	mov	r4, r20
    1ffe:	41 e0       	ldi	r20, 0x01	; 1
    2000:	54 2e       	mov	r5, r20
    i2cSlaveReceive(&I2CD1, slaveaddr, txbuffer, txbytes, rxbuf, rxbytes, TIMEOUT); 
    //i2cSlaveReply(&I2CD1, slaveaddr, txbuffer, txbytes, rxbuf, rxbytes, TIMEOUT); 
    //chThdSleepMilliseconds(2000); //estudar valor real e ver se deve ser empirico esse resultado
    // chprintf((BaseSequentialStream *) &SD1, "debug = %d\r\n",debug);
    //conversão do valor de debug‘i2cSlaveReceive’
      chprintf((BaseSequentialStream *) &SD1, "final da execucao da thread\r\n");
    2002:	5b e9       	ldi	r21, 0x9B	; 155
    2004:	25 2e       	mov	r2, r21
    2006:	51 e0       	ldi	r21, 0x01	; 1
    2008:	35 2e       	mov	r3, r21
      for (int n = 0; n < txbytes ;n++){
        chprintf( (BaseSequentialStream *) &SD1, "buffer[%n]=%d ",n,rxbuf[n]);
    200a:	69 eb       	ldi	r22, 0xB9	; 185
    200c:	86 2e       	mov	r8, r22
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	96 2e       	mov	r9, r22
  msg_t debug;

  (void)arg;
  chRegSetThreadName("SlaveRecieveI2C");
  while (true) {
    palTogglePad(IOPORT2, PORTB_LED1);
    2012:	85 b1       	in	r24, 0x05	; 5
    2014:	90 e2       	ldi	r25, 0x20	; 32
    2016:	89 27       	eor	r24, r25
    2018:	85 b9       	out	0x05, r24	; 5
    chprintf((BaseSequentialStream *) &SD1, "iniciando processo de recebimento do slave\r\n");  
    201a:	7f 92       	push	r7
    201c:	6f 92       	push	r6
    201e:	bf 92       	push	r11
    2020:	af 92       	push	r10
    2022:	c2 df       	rcall	.-124    	; 0x1fa8 <chprintf>
    chThdSleepMilliseconds(500);
    2024:	84 e8       	ldi	r24, 0x84	; 132
    2026:	9e e1       	ldi	r25, 0x1E	; 30
    2028:	0e 94 a0 05 	call	0xb40	; 0xb40 <chThdSleep>
    /*configurar endereço do slave e "encaixar" o matchaddress*/
    debug=i2cMatchAddress(&I2CD1, slaveaddr);    
    202c:	65 e0       	ldi	r22, 0x05	; 5
    202e:	84 e9       	ldi	r24, 0x94	; 148
    2030:	93 e0       	ldi	r25, 0x03	; 3
    2032:	0f d9       	rcall	.-3554   	; 0x1252 <i2cMatchAddress>
    chprintf((BaseSequentialStream *) &SD1, "debug = %d\r\n",debug);
    2034:	9f 93       	push	r25
    2036:	8f 93       	push	r24
    2038:	5f 92       	push	r5
    203a:	4f 92       	push	r4
    203c:	bf 92       	push	r11
    203e:	af 92       	push	r10
    2040:	b3 df       	rcall	.-154    	; 0x1fa8 <chprintf>
    i2cSlaveReceive(&I2CD1, slaveaddr, txbuffer, txbytes, rxbuf, rxbytes, TIMEOUT); 
    2042:	84 ef       	ldi	r24, 0xF4	; 244
    2044:	c8 2e       	mov	r12, r24
    2046:	dd 24       	eor	r13, r13
    2048:	d3 94       	inc	r13
    204a:	95 e0       	ldi	r25, 0x05	; 5
    204c:	e9 2e       	mov	r14, r25
    204e:	f1 2c       	mov	r15, r1
    2050:	8e 01       	movw	r16, r28
    2052:	0a 5f       	subi	r16, 0xFA	; 250
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	25 e0       	ldi	r18, 0x05	; 5
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	ae 01       	movw	r20, r28
    205c:	4f 5f       	subi	r20, 0xFF	; 255
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    2060:	65 e0       	ldi	r22, 0x05	; 5
    2062:	84 e9       	ldi	r24, 0x94	; 148
    2064:	93 e0       	ldi	r25, 0x03	; 3
    2066:	f9 d8       	rcall	.-3598   	; 0x125a <i2cSlaveReceive>
    //i2cSlaveReply(&I2CD1, slaveaddr, txbuffer, txbytes, rxbuf, rxbytes, TIMEOUT); 
    //chThdSleepMilliseconds(2000); //estudar valor real e ver se deve ser empirico esse resultado
    // chprintf((BaseSequentialStream *) &SD1, "debug = %d\r\n",debug);
    //conversão do valor de debug‘i2cSlaveReceive’
      chprintf((BaseSequentialStream *) &SD1, "final da execucao da thread\r\n");
    2068:	3f 92       	push	r3
    206a:	2f 92       	push	r2
    206c:	bf 92       	push	r11
    206e:	af 92       	push	r10
    2070:	9b df       	rcall	.-202    	; 0x1fa8 <chprintf>
    2072:	78 01       	movw	r14, r16
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	00 e0       	ldi	r16, 0x00	; 0
    2080:	10 e0       	ldi	r17, 0x00	; 0
      for (int n = 0; n < txbytes ;n++){
        chprintf( (BaseSequentialStream *) &SD1, "buffer[%n]=%d ",n,rxbuf[n]);
    2082:	f7 01       	movw	r30, r14
    2084:	81 91       	ld	r24, Z+
    2086:	7f 01       	movw	r14, r30
    2088:	1f 92       	push	r1
    208a:	8f 93       	push	r24
    208c:	1f 93       	push	r17
    208e:	0f 93       	push	r16
    2090:	9f 92       	push	r9
    2092:	8f 92       	push	r8
    2094:	bf 92       	push	r11
    2096:	af 92       	push	r10
    2098:	87 df       	rcall	.-242    	; 0x1fa8 <chprintf>
    //i2cSlaveReply(&I2CD1, slaveaddr, txbuffer, txbytes, rxbuf, rxbytes, TIMEOUT); 
    //chThdSleepMilliseconds(2000); //estudar valor real e ver se deve ser empirico esse resultado
    // chprintf((BaseSequentialStream *) &SD1, "debug = %d\r\n",debug);
    //conversão do valor de debug‘i2cSlaveReceive’
      chprintf((BaseSequentialStream *) &SD1, "final da execucao da thread\r\n");
      for (int n = 0; n < txbytes ;n++){
    209a:	0f 5f       	subi	r16, 0xFF	; 255
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	05 30       	cpi	r16, 0x05	; 5
    20aa:	11 05       	cpc	r17, r1
    20ac:	51 f7       	brne	.-44     	; 0x2082 <Thread1+0xbc>
    20ae:	b1 cf       	rjmp	.-158    	; 0x2012 <Thread1+0x4c>

000020b0 <main>:
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    20b0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <halInit>
  chSysInit();
    20b4:	0e 94 97 01 	call	0x32e	; 0x32e <chSysInit>
  i2cInit();  
    20b8:	c4 d8       	rcall	.-3704   	; 0x1242 <i2cInit>
  /*
   * Activates the serial driv/os/hal/lib/streams/chprintf.er 1 using the driver default configuration.
   */
  sdStart(&SD1, NULL);
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	81 ec       	ldi	r24, 0xC1	; 193
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	34 d9       	rcall	.-3480   	; 0x132c <sdStart>


  /*chnWrite
   * Starts the MasterSendI2C thread
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
    20c4:	00 e0       	ldi	r16, 0x00	; 0
    20c6:	10 e0       	ldi	r17, 0x00	; 0
    20c8:	23 ee       	ldi	r18, 0xE3	; 227
    20ca:	3f e0       	ldi	r19, 0x0F	; 15
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	61 e8       	ldi	r22, 0x81	; 129
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	82 e7       	ldi	r24, 0x72	; 114
    20d4:	92 e0       	ldi	r25, 0x02	; 2
    20d6:	0e 94 26 05 	call	0xa4c	; 0xa4c <chThdCreateStatic>
  
  


  chnWrite(&SD1, (const uint8_t *)"Debug program I2Cv2 slave\r\n", 14);
    20da:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <SD1>
    20de:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <SD1+0x1>
    20e2:	02 80       	ldd	r0, Z+2	; 0x02
    20e4:	f3 81       	ldd	r31, Z+3	; 0x03
    20e6:	e0 2d       	mov	r30, r0
    20e8:	4e e0       	ldi	r20, 0x0E	; 14
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	68 ec       	ldi	r22, 0xC8	; 200
    20ee:	71 e0       	ldi	r23, 0x01	; 1
    20f0:	81 ec       	ldi	r24, 0xC1	; 193
    20f2:	93 e0       	ldi	r25, 0x03	; 3
    20f4:	09 95       	icall

  while (TRUE) {
    chThdSleepMilliseconds(1000);  
    20f6:	88 e0       	ldi	r24, 0x08	; 8
    20f8:	9d e3       	ldi	r25, 0x3D	; 61
    20fa:	0e 94 a0 05 	call	0xb40	; 0xb40 <chThdSleep>
    20fe:	fb cf       	rjmp	.-10     	; 0x20f6 <main+0x46>

00002100 <vfprintf>:
    2100:	ab e0       	ldi	r26, 0x0B	; 11
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e5 e8       	ldi	r30, 0x85	; 133
    2106:	f0 e1       	ldi	r31, 0x10	; 16
    2108:	17 c3       	rjmp	.+1582   	; 0x2738 <__prologue_saves__+0x8>
    210a:	6c 01       	movw	r12, r24
    210c:	7b 01       	movw	r14, r22
    210e:	3a 01       	movw	r6, r20
    2110:	fc 01       	movw	r30, r24
    2112:	17 82       	std	Z+7, r1	; 0x07
    2114:	16 82       	std	Z+6, r1	; 0x06
    2116:	83 81       	ldd	r24, Z+3	; 0x03
    2118:	81 ff       	sbrs	r24, 1
    211a:	f9 c0       	rjmp	.+498    	; 0x230e <vfprintf+0x20e>
    211c:	ce 01       	movw	r24, r28
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	4c 01       	movw	r8, r24
    2122:	f6 01       	movw	r30, r12
    2124:	b3 80       	ldd	r11, Z+3	; 0x03
    2126:	f7 01       	movw	r30, r14
    2128:	b3 fc       	sbrc	r11, 3
    212a:	05 91       	lpm	r16, Z+
    212c:	b3 fe       	sbrs	r11, 3
    212e:	01 91       	ld	r16, Z+
    2130:	7f 01       	movw	r14, r30
    2132:	00 23       	and	r16, r16
    2134:	09 f4       	brne	.+2      	; 0x2138 <vfprintf+0x38>
    2136:	e7 c0       	rjmp	.+462    	; 0x2306 <vfprintf+0x206>
    2138:	05 32       	cpi	r16, 0x25	; 37
    213a:	49 f4       	brne	.+18     	; 0x214e <vfprintf+0x4e>
    213c:	b3 fc       	sbrc	r11, 3
    213e:	05 91       	lpm	r16, Z+
    2140:	b3 fe       	sbrs	r11, 3
    2142:	01 91       	ld	r16, Z+
    2144:	7f 01       	movw	r14, r30
    2146:	05 32       	cpi	r16, 0x25	; 37
    2148:	11 f0       	breq	.+4      	; 0x214e <vfprintf+0x4e>
    214a:	10 e0       	ldi	r17, 0x00	; 0
    214c:	17 c0       	rjmp	.+46     	; 0x217c <vfprintf+0x7c>
    214e:	b6 01       	movw	r22, r12
    2150:	80 2f       	mov	r24, r16
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	7e d3       	rcall	.+1788   	; 0x2852 <fputc>
    2156:	53 01       	movw	r10, r6
    2158:	35 01       	movw	r6, r10
    215a:	e3 cf       	rjmp	.-58     	; 0x2122 <vfprintf+0x22>
    215c:	00 23       	and	r16, r16
    215e:	09 f4       	brne	.+2      	; 0x2162 <vfprintf+0x62>
    2160:	d2 c0       	rjmp	.+420    	; 0x2306 <vfprintf+0x206>
    2162:	60 2f       	mov	r22, r16
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	85 ed       	ldi	r24, 0xD5	; 213
    2168:	92 e0       	ldi	r25, 0x02	; 2
    216a:	21 d3       	rcall	.+1602   	; 0x27ae <strchr_P>
    216c:	89 2b       	or	r24, r25
    216e:	49 f0       	breq	.+18     	; 0x2182 <vfprintf+0x82>
    2170:	f7 01       	movw	r30, r14
    2172:	b3 fc       	sbrc	r11, 3
    2174:	05 91       	lpm	r16, Z+
    2176:	b3 fe       	sbrs	r11, 3
    2178:	01 91       	ld	r16, Z+
    217a:	7f 01       	movw	r14, r30
    217c:	17 ff       	sbrs	r17, 7
    217e:	ee cf       	rjmp	.-36     	; 0x215c <vfprintf+0x5c>
    2180:	04 c0       	rjmp	.+8      	; 0x218a <vfprintf+0x8a>
    2182:	03 32       	cpi	r16, 0x23	; 35
    2184:	39 f0       	breq	.+14     	; 0x2194 <vfprintf+0x94>
    2186:	0c 36       	cpi	r16, 0x6C	; 108
    2188:	19 f0       	breq	.+6      	; 0x2190 <vfprintf+0x90>
    218a:	01 11       	cpse	r16, r1
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <vfprintf+0x98>
    218e:	bb c0       	rjmp	.+374    	; 0x2306 <vfprintf+0x206>
    2190:	10 68       	ori	r17, 0x80	; 128
    2192:	ee cf       	rjmp	.-36     	; 0x2170 <vfprintf+0x70>
    2194:	10 e1       	ldi	r17, 0x10	; 16
    2196:	ec cf       	rjmp	.-40     	; 0x2170 <vfprintf+0x70>
    2198:	60 2f       	mov	r22, r16
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	8e ec       	ldi	r24, 0xCE	; 206
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	06 d3       	rcall	.+1548   	; 0x27ae <strchr_P>
    21a2:	89 2b       	or	r24, r25
    21a4:	41 f0       	breq	.+16     	; 0x21b6 <vfprintf+0xb6>
    21a6:	53 01       	movw	r10, r6
    21a8:	f4 e0       	ldi	r31, 0x04	; 4
    21aa:	af 0e       	add	r10, r31
    21ac:	b1 1c       	adc	r11, r1
    21ae:	b6 01       	movw	r22, r12
    21b0:	8f e3       	ldi	r24, 0x3F	; 63
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	10 c0       	rjmp	.+32     	; 0x21d6 <vfprintf+0xd6>
    21b6:	03 36       	cpi	r16, 0x63	; 99
    21b8:	31 f0       	breq	.+12     	; 0x21c6 <vfprintf+0xc6>
    21ba:	03 37       	cpi	r16, 0x73	; 115
    21bc:	71 f0       	breq	.+28     	; 0x21da <vfprintf+0xda>
    21be:	03 35       	cpi	r16, 0x53	; 83
    21c0:	01 f5       	brne	.+64     	; 0x2202 <vfprintf+0x102>
    21c2:	11 60       	ori	r17, 0x01	; 1
    21c4:	0a c0       	rjmp	.+20     	; 0x21da <vfprintf+0xda>
    21c6:	53 01       	movw	r10, r6
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	a8 0e       	add	r10, r24
    21cc:	b1 1c       	adc	r11, r1
    21ce:	b6 01       	movw	r22, r12
    21d0:	f3 01       	movw	r30, r6
    21d2:	80 81       	ld	r24, Z
    21d4:	91 81       	ldd	r25, Z+1	; 0x01
    21d6:	3d d3       	rcall	.+1658   	; 0x2852 <fputc>
    21d8:	bf cf       	rjmp	.-130    	; 0x2158 <vfprintf+0x58>
    21da:	53 01       	movw	r10, r6
    21dc:	f2 e0       	ldi	r31, 0x02	; 2
    21de:	af 0e       	add	r10, r31
    21e0:	b1 1c       	adc	r11, r1
    21e2:	f3 01       	movw	r30, r6
    21e4:	60 80       	ld	r6, Z
    21e6:	71 80       	ldd	r7, Z+1	; 0x01
    21e8:	f3 01       	movw	r30, r6
    21ea:	10 fd       	sbrc	r17, 0
    21ec:	85 91       	lpm	r24, Z+
    21ee:	10 ff       	sbrs	r17, 0
    21f0:	81 91       	ld	r24, Z+
    21f2:	3f 01       	movw	r6, r30
    21f4:	88 23       	and	r24, r24
    21f6:	09 f4       	brne	.+2      	; 0x21fa <vfprintf+0xfa>
    21f8:	af cf       	rjmp	.-162    	; 0x2158 <vfprintf+0x58>
    21fa:	b6 01       	movw	r22, r12
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	29 d3       	rcall	.+1618   	; 0x2852 <fputc>
    2200:	f3 cf       	rjmp	.-26     	; 0x21e8 <vfprintf+0xe8>
    2202:	04 36       	cpi	r16, 0x64	; 100
    2204:	11 f0       	breq	.+4      	; 0x220a <vfprintf+0x10a>
    2206:	09 36       	cpi	r16, 0x69	; 105
    2208:	21 f5       	brne	.+72     	; 0x2252 <vfprintf+0x152>
    220a:	53 01       	movw	r10, r6
    220c:	17 ff       	sbrs	r17, 7
    220e:	09 c0       	rjmp	.+18     	; 0x2222 <vfprintf+0x122>
    2210:	f4 e0       	ldi	r31, 0x04	; 4
    2212:	af 0e       	add	r10, r31
    2214:	b1 1c       	adc	r11, r1
    2216:	f3 01       	movw	r30, r6
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	0a c0       	rjmp	.+20     	; 0x2236 <vfprintf+0x136>
    2222:	f2 e0       	ldi	r31, 0x02	; 2
    2224:	af 0e       	add	r10, r31
    2226:	b1 1c       	adc	r11, r1
    2228:	f3 01       	movw	r30, r6
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	07 2e       	mov	r0, r23
    2230:	00 0c       	add	r0, r0
    2232:	88 0b       	sbc	r24, r24
    2234:	99 0b       	sbc	r25, r25
    2236:	1f 7e       	andi	r17, 0xEF	; 239
    2238:	97 ff       	sbrs	r25, 7
    223a:	08 c0       	rjmp	.+16     	; 0x224c <vfprintf+0x14c>
    223c:	90 95       	com	r25
    223e:	80 95       	com	r24
    2240:	70 95       	com	r23
    2242:	61 95       	neg	r22
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	8f 4f       	sbci	r24, 0xFF	; 255
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	10 64       	ori	r17, 0x40	; 64
    224c:	2a e0       	ldi	r18, 0x0A	; 10
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	30 c0       	rjmp	.+96     	; 0x22b2 <vfprintf+0x1b2>
    2252:	00 37       	cpi	r16, 0x70	; 112
    2254:	91 f0       	breq	.+36     	; 0x227a <vfprintf+0x17a>
    2256:	40 f4       	brcc	.+16     	; 0x2268 <vfprintf+0x168>
    2258:	08 35       	cpi	r16, 0x58	; 88
    225a:	a1 f0       	breq	.+40     	; 0x2284 <vfprintf+0x184>
    225c:	0f 36       	cpi	r16, 0x6F	; 111
    225e:	09 f0       	breq	.+2      	; 0x2262 <vfprintf+0x162>
    2260:	52 c0       	rjmp	.+164    	; 0x2306 <vfprintf+0x206>
    2262:	28 e0       	ldi	r18, 0x08	; 8
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	11 c0       	rjmp	.+34     	; 0x228a <vfprintf+0x18a>
    2268:	05 37       	cpi	r16, 0x75	; 117
    226a:	19 f0       	breq	.+6      	; 0x2272 <vfprintf+0x172>
    226c:	08 37       	cpi	r16, 0x78	; 120
    226e:	31 f0       	breq	.+12     	; 0x227c <vfprintf+0x17c>
    2270:	4a c0       	rjmp	.+148    	; 0x2306 <vfprintf+0x206>
    2272:	1f 7e       	andi	r17, 0xEF	; 239
    2274:	2a e0       	ldi	r18, 0x0A	; 10
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	08 c0       	rjmp	.+16     	; 0x228a <vfprintf+0x18a>
    227a:	10 61       	ori	r17, 0x10	; 16
    227c:	14 62       	ori	r17, 0x24	; 36
    227e:	20 e1       	ldi	r18, 0x10	; 16
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	03 c0       	rjmp	.+6      	; 0x228a <vfprintf+0x18a>
    2284:	14 60       	ori	r17, 0x04	; 4
    2286:	20 e1       	ldi	r18, 0x10	; 16
    2288:	32 e0       	ldi	r19, 0x02	; 2
    228a:	53 01       	movw	r10, r6
    228c:	17 ff       	sbrs	r17, 7
    228e:	09 c0       	rjmp	.+18     	; 0x22a2 <vfprintf+0x1a2>
    2290:	f4 e0       	ldi	r31, 0x04	; 4
    2292:	af 0e       	add	r10, r31
    2294:	b1 1c       	adc	r11, r1
    2296:	f3 01       	movw	r30, r6
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <vfprintf+0x1b2>
    22a2:	f2 e0       	ldi	r31, 0x02	; 2
    22a4:	af 0e       	add	r10, r31
    22a6:	b1 1c       	adc	r11, r1
    22a8:	f3 01       	movw	r30, r6
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a4 01       	movw	r20, r8
    22b4:	23 d3       	rcall	.+1606   	; 0x28fc <__ultoa_invert>
    22b6:	08 2f       	mov	r16, r24
    22b8:	08 19       	sub	r16, r8
    22ba:	16 ff       	sbrs	r17, 6
    22bc:	04 c0       	rjmp	.+8      	; 0x22c6 <vfprintf+0x1c6>
    22be:	b6 01       	movw	r22, r12
    22c0:	8d e2       	ldi	r24, 0x2D	; 45
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	c6 d2       	rcall	.+1420   	; 0x2852 <fputc>
    22c6:	14 ff       	sbrs	r17, 4
    22c8:	13 c0       	rjmp	.+38     	; 0x22f0 <vfprintf+0x1f0>
    22ca:	fe 01       	movw	r30, r28
    22cc:	e0 0f       	add	r30, r16
    22ce:	f1 1d       	adc	r31, r1
    22d0:	80 81       	ld	r24, Z
    22d2:	80 33       	cpi	r24, 0x30	; 48
    22d4:	69 f0       	breq	.+26     	; 0x22f0 <vfprintf+0x1f0>
    22d6:	b6 01       	movw	r22, r12
    22d8:	80 e3       	ldi	r24, 0x30	; 48
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	ba d2       	rcall	.+1396   	; 0x2852 <fputc>
    22de:	12 ff       	sbrs	r17, 2
    22e0:	07 c0       	rjmp	.+14     	; 0x22f0 <vfprintf+0x1f0>
    22e2:	10 72       	andi	r17, 0x20	; 32
    22e4:	81 2f       	mov	r24, r17
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	b6 01       	movw	r22, r12
    22ea:	88 5a       	subi	r24, 0xA8	; 168
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	b1 d2       	rcall	.+1378   	; 0x2852 <fputc>
    22f0:	01 50       	subi	r16, 0x01	; 1
    22f2:	f4 01       	movw	r30, r8
    22f4:	e0 0f       	add	r30, r16
    22f6:	f1 1d       	adc	r31, r1
    22f8:	80 81       	ld	r24, Z
    22fa:	b6 01       	movw	r22, r12
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a9 d2       	rcall	.+1362   	; 0x2852 <fputc>
    2300:	01 11       	cpse	r16, r1
    2302:	f6 cf       	rjmp	.-20     	; 0x22f0 <vfprintf+0x1f0>
    2304:	29 cf       	rjmp	.-430    	; 0x2158 <vfprintf+0x58>
    2306:	f6 01       	movw	r30, r12
    2308:	86 81       	ldd	r24, Z+6	; 0x06
    230a:	97 81       	ldd	r25, Z+7	; 0x07
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <vfprintf+0x212>
    230e:	8f ef       	ldi	r24, 0xFF	; 255
    2310:	9f ef       	ldi	r25, 0xFF	; 255
    2312:	2b 96       	adiw	r28, 0x0b	; 11
    2314:	ee e0       	ldi	r30, 0x0E	; 14
    2316:	2c c2       	rjmp	.+1112   	; 0x2770 <__epilogue_restores__+0x8>

00002318 <putval>:
    2318:	20 fd       	sbrc	r18, 0
    231a:	09 c0       	rjmp	.+18     	; 0x232e <putval+0x16>
    231c:	fc 01       	movw	r30, r24
    231e:	23 fd       	sbrc	r18, 3
    2320:	05 c0       	rjmp	.+10     	; 0x232c <putval+0x14>
    2322:	22 ff       	sbrs	r18, 2
    2324:	02 c0       	rjmp	.+4      	; 0x232a <putval+0x12>
    2326:	73 83       	std	Z+3, r23	; 0x03
    2328:	62 83       	std	Z+2, r22	; 0x02
    232a:	51 83       	std	Z+1, r21	; 0x01
    232c:	40 83       	st	Z, r20
    232e:	08 95       	ret

00002330 <mulacc>:
    2330:	44 fd       	sbrc	r20, 4
    2332:	17 c0       	rjmp	.+46     	; 0x2362 <mulacc+0x32>
    2334:	46 fd       	sbrc	r20, 6
    2336:	17 c0       	rjmp	.+46     	; 0x2366 <mulacc+0x36>
    2338:	ab 01       	movw	r20, r22
    233a:	bc 01       	movw	r22, r24
    233c:	da 01       	movw	r26, r20
    233e:	fb 01       	movw	r30, r22
    2340:	aa 0f       	add	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	ee 1f       	adc	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	10 94       	com	r1
    234a:	d1 f7       	brne	.-12     	; 0x2340 <mulacc+0x10>
    234c:	4a 0f       	add	r20, r26
    234e:	5b 1f       	adc	r21, r27
    2350:	6e 1f       	adc	r22, r30
    2352:	7f 1f       	adc	r23, r31
    2354:	cb 01       	movw	r24, r22
    2356:	ba 01       	movw	r22, r20
    2358:	66 0f       	add	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	09 c0       	rjmp	.+18     	; 0x2374 <mulacc+0x44>
    2362:	33 e0       	ldi	r19, 0x03	; 3
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <mulacc+0x38>
    2366:	34 e0       	ldi	r19, 0x04	; 4
    2368:	66 0f       	add	r22, r22
    236a:	77 1f       	adc	r23, r23
    236c:	88 1f       	adc	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	31 50       	subi	r19, 0x01	; 1
    2372:	d1 f7       	brne	.-12     	; 0x2368 <mulacc+0x38>
    2374:	62 0f       	add	r22, r18
    2376:	71 1d       	adc	r23, r1
    2378:	81 1d       	adc	r24, r1
    237a:	91 1d       	adc	r25, r1
    237c:	08 95       	ret

0000237e <skip_spaces>:
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	8c 01       	movw	r16, r24
    2388:	c8 01       	movw	r24, r16
    238a:	25 d2       	rcall	.+1098   	; 0x27d6 <fgetc>
    238c:	ec 01       	movw	r28, r24
    238e:	97 fd       	sbrc	r25, 7
    2390:	06 c0       	rjmp	.+12     	; 0x239e <skip_spaces+0x20>
    2392:	05 d2       	rcall	.+1034   	; 0x279e <isspace>
    2394:	89 2b       	or	r24, r25
    2396:	c1 f7       	brne	.-16     	; 0x2388 <skip_spaces+0xa>
    2398:	b8 01       	movw	r22, r16
    239a:	ce 01       	movw	r24, r28
    239c:	96 d2       	rcall	.+1324   	; 0x28ca <ungetc>
    239e:	ce 01       	movw	r24, r28
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	08 95       	ret

000023aa <conv_int>:
    23aa:	8f 92       	push	r8
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	8c 01       	movw	r16, r24
    23c0:	d6 2f       	mov	r29, r22
    23c2:	7a 01       	movw	r14, r20
    23c4:	b2 2e       	mov	r11, r18
    23c6:	07 d2       	rcall	.+1038   	; 0x27d6 <fgetc>
    23c8:	9c 01       	movw	r18, r24
    23ca:	33 27       	eor	r19, r19
    23cc:	2b 32       	cpi	r18, 0x2B	; 43
    23ce:	31 05       	cpc	r19, r1
    23d0:	31 f0       	breq	.+12     	; 0x23de <conv_int+0x34>
    23d2:	2d 32       	cpi	r18, 0x2D	; 45
    23d4:	31 05       	cpc	r19, r1
    23d6:	59 f4       	brne	.+22     	; 0x23ee <conv_int+0x44>
    23d8:	8b 2d       	mov	r24, r11
    23da:	80 68       	ori	r24, 0x80	; 128
    23dc:	b8 2e       	mov	r11, r24
    23de:	d1 50       	subi	r29, 0x01	; 1
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <conv_int+0x3c>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	61 c0       	rjmp	.+194    	; 0x24a8 <conv_int+0xfe>
    23e6:	c8 01       	movw	r24, r16
    23e8:	f6 d1       	rcall	.+1004   	; 0x27d6 <fgetc>
    23ea:	97 fd       	sbrc	r25, 7
    23ec:	fa cf       	rjmp	.-12     	; 0x23e2 <conv_int+0x38>
    23ee:	cb 2d       	mov	r28, r11
    23f0:	cd 7f       	andi	r28, 0xFD	; 253
    23f2:	2b 2d       	mov	r18, r11
    23f4:	20 73       	andi	r18, 0x30	; 48
    23f6:	f9 f4       	brne	.+62     	; 0x2436 <conv_int+0x8c>
    23f8:	80 33       	cpi	r24, 0x30	; 48
    23fa:	e9 f4       	brne	.+58     	; 0x2436 <conv_int+0x8c>
    23fc:	aa 24       	eor	r10, r10
    23fe:	aa 94       	dec	r10
    2400:	ad 0e       	add	r10, r29
    2402:	09 f4       	brne	.+2      	; 0x2406 <conv_int+0x5c>
    2404:	3e c0       	rjmp	.+124    	; 0x2482 <conv_int+0xd8>
    2406:	c8 01       	movw	r24, r16
    2408:	e6 d1       	rcall	.+972    	; 0x27d6 <fgetc>
    240a:	97 fd       	sbrc	r25, 7
    240c:	3a c0       	rjmp	.+116    	; 0x2482 <conv_int+0xd8>
    240e:	9c 01       	movw	r18, r24
    2410:	2f 7d       	andi	r18, 0xDF	; 223
    2412:	33 27       	eor	r19, r19
    2414:	28 35       	cpi	r18, 0x58	; 88
    2416:	31 05       	cpc	r19, r1
    2418:	41 f4       	brne	.+16     	; 0x242a <conv_int+0x80>
    241a:	c2 64       	ori	r28, 0x42	; 66
    241c:	d2 50       	subi	r29, 0x02	; 2
    241e:	89 f1       	breq	.+98     	; 0x2482 <conv_int+0xd8>
    2420:	c8 01       	movw	r24, r16
    2422:	d9 d1       	rcall	.+946    	; 0x27d6 <fgetc>
    2424:	97 ff       	sbrs	r25, 7
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <conv_int+0x8c>
    2428:	2c c0       	rjmp	.+88     	; 0x2482 <conv_int+0xd8>
    242a:	b6 fe       	sbrs	r11, 6
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <conv_int+0x88>
    242e:	c2 60       	ori	r28, 0x02	; 2
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <conv_int+0x8a>
    2432:	c2 61       	ori	r28, 0x12	; 18
    2434:	da 2d       	mov	r29, r10
    2436:	81 2c       	mov	r8, r1
    2438:	91 2c       	mov	r9, r1
    243a:	54 01       	movw	r10, r8
    243c:	20 ed       	ldi	r18, 0xD0	; 208
    243e:	28 0f       	add	r18, r24
    2440:	28 30       	cpi	r18, 0x08	; 8
    2442:	78 f0       	brcs	.+30     	; 0x2462 <conv_int+0xb8>
    2444:	c4 ff       	sbrs	r28, 4
    2446:	03 c0       	rjmp	.+6      	; 0x244e <conv_int+0xa4>
    2448:	b8 01       	movw	r22, r16
    244a:	3f d2       	rcall	.+1150   	; 0x28ca <ungetc>
    244c:	17 c0       	rjmp	.+46     	; 0x247c <conv_int+0xd2>
    244e:	2a 30       	cpi	r18, 0x0A	; 10
    2450:	40 f0       	brcs	.+16     	; 0x2462 <conv_int+0xb8>
    2452:	c6 ff       	sbrs	r28, 6
    2454:	f9 cf       	rjmp	.-14     	; 0x2448 <conv_int+0x9e>
    2456:	2f 7d       	andi	r18, 0xDF	; 223
    2458:	3f ee       	ldi	r19, 0xEF	; 239
    245a:	32 0f       	add	r19, r18
    245c:	36 30       	cpi	r19, 0x06	; 6
    245e:	a0 f7       	brcc	.-24     	; 0x2448 <conv_int+0x9e>
    2460:	27 50       	subi	r18, 0x07	; 7
    2462:	4c 2f       	mov	r20, r28
    2464:	c5 01       	movw	r24, r10
    2466:	b4 01       	movw	r22, r8
    2468:	63 df       	rcall	.-314    	; 0x2330 <mulacc>
    246a:	4b 01       	movw	r8, r22
    246c:	5c 01       	movw	r10, r24
    246e:	c2 60       	ori	r28, 0x02	; 2
    2470:	d1 50       	subi	r29, 0x01	; 1
    2472:	51 f0       	breq	.+20     	; 0x2488 <conv_int+0xde>
    2474:	c8 01       	movw	r24, r16
    2476:	af d1       	rcall	.+862    	; 0x27d6 <fgetc>
    2478:	97 ff       	sbrs	r25, 7
    247a:	e0 cf       	rjmp	.-64     	; 0x243c <conv_int+0x92>
    247c:	c1 fd       	sbrc	r28, 1
    247e:	04 c0       	rjmp	.+8      	; 0x2488 <conv_int+0xde>
    2480:	b0 cf       	rjmp	.-160    	; 0x23e2 <conv_int+0x38>
    2482:	81 2c       	mov	r8, r1
    2484:	91 2c       	mov	r9, r1
    2486:	54 01       	movw	r10, r8
    2488:	c7 ff       	sbrs	r28, 7
    248a:	08 c0       	rjmp	.+16     	; 0x249c <conv_int+0xf2>
    248c:	b0 94       	com	r11
    248e:	a0 94       	com	r10
    2490:	90 94       	com	r9
    2492:	80 94       	com	r8
    2494:	81 1c       	adc	r8, r1
    2496:	91 1c       	adc	r9, r1
    2498:	a1 1c       	adc	r10, r1
    249a:	b1 1c       	adc	r11, r1
    249c:	2c 2f       	mov	r18, r28
    249e:	b5 01       	movw	r22, r10
    24a0:	a4 01       	movw	r20, r8
    24a2:	c7 01       	movw	r24, r14
    24a4:	39 df       	rcall	.-398    	; 0x2318 <putval>
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	1f 91       	pop	r17
    24ae:	0f 91       	pop	r16
    24b0:	ff 90       	pop	r15
    24b2:	ef 90       	pop	r14
    24b4:	bf 90       	pop	r11
    24b6:	af 90       	pop	r10
    24b8:	9f 90       	pop	r9
    24ba:	8f 90       	pop	r8
    24bc:	08 95       	ret

000024be <vfscanf>:
    24be:	a0 e0       	ldi	r26, 0x00	; 0
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e4 e6       	ldi	r30, 0x64	; 100
    24c4:	f2 e1       	ldi	r31, 0x12	; 18
    24c6:	37 c1       	rjmp	.+622    	; 0x2736 <__prologue_saves__+0x6>
    24c8:	6c 01       	movw	r12, r24
    24ca:	eb 01       	movw	r28, r22
    24cc:	5a 01       	movw	r10, r20
    24ce:	fc 01       	movw	r30, r24
    24d0:	17 82       	std	Z+7, r1	; 0x07
    24d2:	16 82       	std	Z+6, r1	; 0x06
    24d4:	51 2c       	mov	r5, r1
    24d6:	f6 01       	movw	r30, r12
    24d8:	f3 80       	ldd	r15, Z+3	; 0x03
    24da:	fe 01       	movw	r30, r28
    24dc:	f3 fc       	sbrc	r15, 3
    24de:	85 91       	lpm	r24, Z+
    24e0:	f3 fe       	sbrs	r15, 3
    24e2:	81 91       	ld	r24, Z+
    24e4:	18 2f       	mov	r17, r24
    24e6:	ef 01       	movw	r28, r30
    24e8:	88 23       	and	r24, r24
    24ea:	09 f4       	brne	.+2      	; 0x24ee <vfscanf+0x30>
    24ec:	d4 c0       	rjmp	.+424    	; 0x2696 <vfscanf+0x1d8>
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	56 d1       	rcall	.+684    	; 0x279e <isspace>
    24f2:	89 2b       	or	r24, r25
    24f4:	19 f0       	breq	.+6      	; 0x24fc <vfscanf+0x3e>
    24f6:	c6 01       	movw	r24, r12
    24f8:	42 df       	rcall	.-380    	; 0x237e <skip_spaces>
    24fa:	ed cf       	rjmp	.-38     	; 0x24d6 <vfscanf+0x18>
    24fc:	15 32       	cpi	r17, 0x25	; 37
    24fe:	41 f4       	brne	.+16     	; 0x2510 <vfscanf+0x52>
    2500:	fe 01       	movw	r30, r28
    2502:	f3 fc       	sbrc	r15, 3
    2504:	15 91       	lpm	r17, Z+
    2506:	f3 fe       	sbrs	r15, 3
    2508:	11 91       	ld	r17, Z+
    250a:	ef 01       	movw	r28, r30
    250c:	15 32       	cpi	r17, 0x25	; 37
    250e:	71 f4       	brne	.+28     	; 0x252c <vfscanf+0x6e>
    2510:	c6 01       	movw	r24, r12
    2512:	61 d1       	rcall	.+706    	; 0x27d6 <fgetc>
    2514:	97 fd       	sbrc	r25, 7
    2516:	bd c0       	rjmp	.+378    	; 0x2692 <vfscanf+0x1d4>
    2518:	41 2f       	mov	r20, r17
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	9c 01       	movw	r18, r24
    251e:	33 27       	eor	r19, r19
    2520:	24 17       	cp	r18, r20
    2522:	35 07       	cpc	r19, r21
    2524:	c1 f2       	breq	.-80     	; 0x24d6 <vfscanf+0x18>
    2526:	b6 01       	movw	r22, r12
    2528:	d0 d1       	rcall	.+928    	; 0x28ca <ungetc>
    252a:	b5 c0       	rjmp	.+362    	; 0x2696 <vfscanf+0x1d8>
    252c:	1a 32       	cpi	r17, 0x2A	; 42
    252e:	39 f4       	brne	.+14     	; 0x253e <vfscanf+0x80>
    2530:	f3 fc       	sbrc	r15, 3
    2532:	15 91       	lpm	r17, Z+
    2534:	f3 fe       	sbrs	r15, 3
    2536:	11 91       	ld	r17, Z+
    2538:	ef 01       	movw	r28, r30
    253a:	01 e0       	ldi	r16, 0x01	; 1
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <vfscanf+0x82>
    253e:	00 e0       	ldi	r16, 0x00	; 0
    2540:	e1 2c       	mov	r14, r1
    2542:	20 ed       	ldi	r18, 0xD0	; 208
    2544:	21 0f       	add	r18, r17
    2546:	2a 30       	cpi	r18, 0x0A	; 10
    2548:	78 f4       	brcc	.+30     	; 0x2568 <vfscanf+0xaa>
    254a:	02 60       	ori	r16, 0x02	; 2
    254c:	6e 2d       	mov	r22, r14
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	ec de       	rcall	.-552    	; 0x2330 <mulacc>
    2558:	e6 2e       	mov	r14, r22
    255a:	fe 01       	movw	r30, r28
    255c:	f3 fc       	sbrc	r15, 3
    255e:	15 91       	lpm	r17, Z+
    2560:	f3 fe       	sbrs	r15, 3
    2562:	11 91       	ld	r17, Z+
    2564:	ef 01       	movw	r28, r30
    2566:	ed cf       	rjmp	.-38     	; 0x2542 <vfscanf+0x84>
    2568:	01 ff       	sbrs	r16, 1
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <vfscanf+0xb4>
    256c:	e1 10       	cpse	r14, r1
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <vfscanf+0xb8>
    2570:	92 c0       	rjmp	.+292    	; 0x2696 <vfscanf+0x1d8>
    2572:	ee 24       	eor	r14, r14
    2574:	ea 94       	dec	r14
    2576:	18 36       	cpi	r17, 0x68	; 104
    2578:	19 f0       	breq	.+6      	; 0x2580 <vfscanf+0xc2>
    257a:	1c 36       	cpi	r17, 0x6C	; 108
    257c:	51 f0       	breq	.+20     	; 0x2592 <vfscanf+0xd4>
    257e:	10 c0       	rjmp	.+32     	; 0x25a0 <vfscanf+0xe2>
    2580:	fe 01       	movw	r30, r28
    2582:	f3 fc       	sbrc	r15, 3
    2584:	15 91       	lpm	r17, Z+
    2586:	f3 fe       	sbrs	r15, 3
    2588:	11 91       	ld	r17, Z+
    258a:	ef 01       	movw	r28, r30
    258c:	18 36       	cpi	r17, 0x68	; 104
    258e:	41 f4       	brne	.+16     	; 0x25a0 <vfscanf+0xe2>
    2590:	08 60       	ori	r16, 0x08	; 8
    2592:	04 60       	ori	r16, 0x04	; 4
    2594:	fe 01       	movw	r30, r28
    2596:	f3 fc       	sbrc	r15, 3
    2598:	15 91       	lpm	r17, Z+
    259a:	f3 fe       	sbrs	r15, 3
    259c:	11 91       	ld	r17, Z+
    259e:	ef 01       	movw	r28, r30
    25a0:	11 23       	and	r17, r17
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <vfscanf+0xe8>
    25a4:	78 c0       	rjmp	.+240    	; 0x2696 <vfscanf+0x1d8>
    25a6:	61 2f       	mov	r22, r17
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	85 ee       	ldi	r24, 0xE5	; 229
    25ac:	92 e0       	ldi	r25, 0x02	; 2
    25ae:	ff d0       	rcall	.+510    	; 0x27ae <strchr_P>
    25b0:	89 2b       	or	r24, r25
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <vfscanf+0xf8>
    25b4:	70 c0       	rjmp	.+224    	; 0x2696 <vfscanf+0x1d8>
    25b6:	00 fd       	sbrc	r16, 0
    25b8:	07 c0       	rjmp	.+14     	; 0x25c8 <vfscanf+0x10a>
    25ba:	f5 01       	movw	r30, r10
    25bc:	80 80       	ld	r8, Z
    25be:	91 80       	ldd	r9, Z+1	; 0x01
    25c0:	c5 01       	movw	r24, r10
    25c2:	02 96       	adiw	r24, 0x02	; 2
    25c4:	5c 01       	movw	r10, r24
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfscanf+0x10e>
    25c8:	81 2c       	mov	r8, r1
    25ca:	91 2c       	mov	r9, r1
    25cc:	1e 36       	cpi	r17, 0x6E	; 110
    25ce:	49 f4       	brne	.+18     	; 0x25e2 <vfscanf+0x124>
    25d0:	f6 01       	movw	r30, r12
    25d2:	46 81       	ldd	r20, Z+6	; 0x06
    25d4:	57 81       	ldd	r21, Z+7	; 0x07
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	20 2f       	mov	r18, r16
    25dc:	c4 01       	movw	r24, r8
    25de:	9c de       	rcall	.-712    	; 0x2318 <putval>
    25e0:	7a cf       	rjmp	.-268    	; 0x24d6 <vfscanf+0x18>
    25e2:	13 36       	cpi	r17, 0x63	; 99
    25e4:	a1 f4       	brne	.+40     	; 0x260e <vfscanf+0x150>
    25e6:	01 fd       	sbrc	r16, 1
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <vfscanf+0x130>
    25ea:	ee 24       	eor	r14, r14
    25ec:	e3 94       	inc	r14
    25ee:	c6 01       	movw	r24, r12
    25f0:	f2 d0       	rcall	.+484    	; 0x27d6 <fgetc>
    25f2:	97 fd       	sbrc	r25, 7
    25f4:	4e c0       	rjmp	.+156    	; 0x2692 <vfscanf+0x1d4>
    25f6:	81 14       	cp	r8, r1
    25f8:	91 04       	cpc	r9, r1
    25fa:	29 f0       	breq	.+10     	; 0x2606 <vfscanf+0x148>
    25fc:	f4 01       	movw	r30, r8
    25fe:	80 83       	st	Z, r24
    2600:	c4 01       	movw	r24, r8
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	4c 01       	movw	r8, r24
    2606:	ea 94       	dec	r14
    2608:	e1 10       	cpse	r14, r1
    260a:	f1 cf       	rjmp	.-30     	; 0x25ee <vfscanf+0x130>
    260c:	3e c0       	rjmp	.+124    	; 0x268a <vfscanf+0x1cc>
    260e:	c6 01       	movw	r24, r12
    2610:	b6 de       	rcall	.-660    	; 0x237e <skip_spaces>
    2612:	97 fd       	sbrc	r25, 7
    2614:	3e c0       	rjmp	.+124    	; 0x2692 <vfscanf+0x1d4>
    2616:	1f 36       	cpi	r17, 0x6F	; 111
    2618:	49 f1       	breq	.+82     	; 0x266c <vfscanf+0x1ae>
    261a:	28 f4       	brcc	.+10     	; 0x2626 <vfscanf+0x168>
    261c:	14 36       	cpi	r17, 0x64	; 100
    261e:	21 f1       	breq	.+72     	; 0x2668 <vfscanf+0x1aa>
    2620:	19 36       	cpi	r17, 0x69	; 105
    2622:	39 f1       	breq	.+78     	; 0x2672 <vfscanf+0x1b4>
    2624:	25 c0       	rjmp	.+74     	; 0x2670 <vfscanf+0x1b2>
    2626:	13 37       	cpi	r17, 0x73	; 115
    2628:	71 f0       	breq	.+28     	; 0x2646 <vfscanf+0x188>
    262a:	15 37       	cpi	r17, 0x75	; 117
    262c:	e9 f0       	breq	.+58     	; 0x2668 <vfscanf+0x1aa>
    262e:	20 c0       	rjmp	.+64     	; 0x2670 <vfscanf+0x1b2>
    2630:	81 14       	cp	r8, r1
    2632:	91 04       	cpc	r9, r1
    2634:	29 f0       	breq	.+10     	; 0x2640 <vfscanf+0x182>
    2636:	f4 01       	movw	r30, r8
    2638:	60 82       	st	Z, r6
    263a:	c4 01       	movw	r24, r8
    263c:	01 96       	adiw	r24, 0x01	; 1
    263e:	4c 01       	movw	r8, r24
    2640:	ea 94       	dec	r14
    2642:	ee 20       	and	r14, r14
    2644:	59 f0       	breq	.+22     	; 0x265c <vfscanf+0x19e>
    2646:	c6 01       	movw	r24, r12
    2648:	c6 d0       	rcall	.+396    	; 0x27d6 <fgetc>
    264a:	3c 01       	movw	r6, r24
    264c:	97 fd       	sbrc	r25, 7
    264e:	06 c0       	rjmp	.+12     	; 0x265c <vfscanf+0x19e>
    2650:	a6 d0       	rcall	.+332    	; 0x279e <isspace>
    2652:	89 2b       	or	r24, r25
    2654:	69 f3       	breq	.-38     	; 0x2630 <vfscanf+0x172>
    2656:	b6 01       	movw	r22, r12
    2658:	c3 01       	movw	r24, r6
    265a:	37 d1       	rcall	.+622    	; 0x28ca <ungetc>
    265c:	81 14       	cp	r8, r1
    265e:	91 04       	cpc	r9, r1
    2660:	a1 f0       	breq	.+40     	; 0x268a <vfscanf+0x1cc>
    2662:	f4 01       	movw	r30, r8
    2664:	10 82       	st	Z, r1
    2666:	11 c0       	rjmp	.+34     	; 0x268a <vfscanf+0x1cc>
    2668:	00 62       	ori	r16, 0x20	; 32
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <vfscanf+0x1b4>
    266c:	00 61       	ori	r16, 0x10	; 16
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <vfscanf+0x1b4>
    2670:	00 64       	ori	r16, 0x40	; 64
    2672:	20 2f       	mov	r18, r16
    2674:	a4 01       	movw	r20, r8
    2676:	6e 2d       	mov	r22, r14
    2678:	c6 01       	movw	r24, r12
    267a:	97 de       	rcall	.-722    	; 0x23aa <conv_int>
    267c:	81 11       	cpse	r24, r1
    267e:	05 c0       	rjmp	.+10     	; 0x268a <vfscanf+0x1cc>
    2680:	f6 01       	movw	r30, r12
    2682:	83 81       	ldd	r24, Z+3	; 0x03
    2684:	80 73       	andi	r24, 0x30	; 48
    2686:	29 f4       	brne	.+10     	; 0x2692 <vfscanf+0x1d4>
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <vfscanf+0x1d8>
    268a:	00 fd       	sbrc	r16, 0
    268c:	24 cf       	rjmp	.-440    	; 0x24d6 <vfscanf+0x18>
    268e:	53 94       	inc	r5
    2690:	22 cf       	rjmp	.-444    	; 0x24d6 <vfscanf+0x18>
    2692:	55 20       	and	r5, r5
    2694:	19 f0       	breq	.+6      	; 0x269c <vfscanf+0x1de>
    2696:	85 2d       	mov	r24, r5
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <vfscanf+0x1e2>
    269c:	8f ef       	ldi	r24, 0xFF	; 255
    269e:	9f ef       	ldi	r25, 0xFF	; 255
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	ef e0       	ldi	r30, 0x0F	; 15
    26a6:	63 c0       	rjmp	.+198    	; 0x276e <__epilogue_restores__+0x6>

000026a8 <__udivmodsi4>:
    26a8:	a1 e2       	ldi	r26, 0x21	; 33
    26aa:	1a 2e       	mov	r1, r26
    26ac:	aa 1b       	sub	r26, r26
    26ae:	bb 1b       	sub	r27, r27
    26b0:	fd 01       	movw	r30, r26
    26b2:	0d c0       	rjmp	.+26     	; 0x26ce <__udivmodsi4_ep>

000026b4 <__udivmodsi4_loop>:
    26b4:	aa 1f       	adc	r26, r26
    26b6:	bb 1f       	adc	r27, r27
    26b8:	ee 1f       	adc	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	a2 17       	cp	r26, r18
    26be:	b3 07       	cpc	r27, r19
    26c0:	e4 07       	cpc	r30, r20
    26c2:	f5 07       	cpc	r31, r21
    26c4:	20 f0       	brcs	.+8      	; 0x26ce <__udivmodsi4_ep>
    26c6:	a2 1b       	sub	r26, r18
    26c8:	b3 0b       	sbc	r27, r19
    26ca:	e4 0b       	sbc	r30, r20
    26cc:	f5 0b       	sbc	r31, r21

000026ce <__udivmodsi4_ep>:
    26ce:	66 1f       	adc	r22, r22
    26d0:	77 1f       	adc	r23, r23
    26d2:	88 1f       	adc	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	1a 94       	dec	r1
    26d8:	69 f7       	brne	.-38     	; 0x26b4 <__udivmodsi4_loop>
    26da:	60 95       	com	r22
    26dc:	70 95       	com	r23
    26de:	80 95       	com	r24
    26e0:	90 95       	com	r25
    26e2:	9b 01       	movw	r18, r22
    26e4:	ac 01       	movw	r20, r24
    26e6:	bd 01       	movw	r22, r26
    26e8:	cf 01       	movw	r24, r30
    26ea:	08 95       	ret

000026ec <__divmodsi4>:
    26ec:	05 2e       	mov	r0, r21
    26ee:	97 fb       	bst	r25, 7
    26f0:	16 f4       	brtc	.+4      	; 0x26f6 <__divmodsi4+0xa>
    26f2:	00 94       	com	r0
    26f4:	0f d0       	rcall	.+30     	; 0x2714 <__negsi2>
    26f6:	57 fd       	sbrc	r21, 7
    26f8:	05 d0       	rcall	.+10     	; 0x2704 <__divmodsi4_neg2>
    26fa:	d6 df       	rcall	.-84     	; 0x26a8 <__udivmodsi4>
    26fc:	07 fc       	sbrc	r0, 7
    26fe:	02 d0       	rcall	.+4      	; 0x2704 <__divmodsi4_neg2>
    2700:	46 f4       	brtc	.+16     	; 0x2712 <__divmodsi4_exit>
    2702:	08 c0       	rjmp	.+16     	; 0x2714 <__negsi2>

00002704 <__divmodsi4_neg2>:
    2704:	50 95       	com	r21
    2706:	40 95       	com	r20
    2708:	30 95       	com	r19
    270a:	21 95       	neg	r18
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	4f 4f       	sbci	r20, 0xFF	; 255
    2710:	5f 4f       	sbci	r21, 0xFF	; 255

00002712 <__divmodsi4_exit>:
    2712:	08 95       	ret

00002714 <__negsi2>:
    2714:	90 95       	com	r25
    2716:	80 95       	com	r24
    2718:	70 95       	com	r23
    271a:	61 95       	neg	r22
    271c:	7f 4f       	sbci	r23, 0xFF	; 255
    271e:	8f 4f       	sbci	r24, 0xFF	; 255
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	08 95       	ret

00002724 <__tablejump2__>:
    2724:	ee 0f       	add	r30, r30
    2726:	ff 1f       	adc	r31, r31
    2728:	05 90       	lpm	r0, Z+
    272a:	f4 91       	lpm	r31, Z
    272c:	e0 2d       	mov	r30, r0
    272e:	09 94       	ijmp

00002730 <__prologue_saves__>:
    2730:	2f 92       	push	r2
    2732:	3f 92       	push	r3
    2734:	4f 92       	push	r4
    2736:	5f 92       	push	r5
    2738:	6f 92       	push	r6
    273a:	7f 92       	push	r7
    273c:	8f 92       	push	r8
    273e:	9f 92       	push	r9
    2740:	af 92       	push	r10
    2742:	bf 92       	push	r11
    2744:	cf 92       	push	r12
    2746:	df 92       	push	r13
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	ca 1b       	sub	r28, r26
    275a:	db 0b       	sbc	r29, r27
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	09 94       	ijmp

00002768 <__epilogue_restores__>:
    2768:	2a 88       	ldd	r2, Y+18	; 0x12
    276a:	39 88       	ldd	r3, Y+17	; 0x11
    276c:	48 88       	ldd	r4, Y+16	; 0x10
    276e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2770:	6e 84       	ldd	r6, Y+14	; 0x0e
    2772:	7d 84       	ldd	r7, Y+13	; 0x0d
    2774:	8c 84       	ldd	r8, Y+12	; 0x0c
    2776:	9b 84       	ldd	r9, Y+11	; 0x0b
    2778:	aa 84       	ldd	r10, Y+10	; 0x0a
    277a:	b9 84       	ldd	r11, Y+9	; 0x09
    277c:	c8 84       	ldd	r12, Y+8	; 0x08
    277e:	df 80       	ldd	r13, Y+7	; 0x07
    2780:	ee 80       	ldd	r14, Y+6	; 0x06
    2782:	fd 80       	ldd	r15, Y+5	; 0x05
    2784:	0c 81       	ldd	r16, Y+4	; 0x04
    2786:	1b 81       	ldd	r17, Y+3	; 0x03
    2788:	aa 81       	ldd	r26, Y+2	; 0x02
    278a:	b9 81       	ldd	r27, Y+1	; 0x01
    278c:	ce 0f       	add	r28, r30
    278e:	d1 1d       	adc	r29, r1
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	ed 01       	movw	r28, r26
    279c:	08 95       	ret

0000279e <isspace>:
    279e:	91 11       	cpse	r25, r1
    27a0:	0b c1       	rjmp	.+534    	; 0x29b8 <__ctype_isfalse>
    27a2:	80 32       	cpi	r24, 0x20	; 32
    27a4:	19 f0       	breq	.+6      	; 0x27ac <isspace+0xe>
    27a6:	89 50       	subi	r24, 0x09	; 9
    27a8:	85 50       	subi	r24, 0x05	; 5
    27aa:	d0 f7       	brcc	.-12     	; 0x27a0 <isspace+0x2>
    27ac:	08 95       	ret

000027ae <strchr_P>:
    27ae:	fc 01       	movw	r30, r24
    27b0:	05 90       	lpm	r0, Z+
    27b2:	06 16       	cp	r0, r22
    27b4:	21 f0       	breq	.+8      	; 0x27be <strchr_P+0x10>
    27b6:	00 20       	and	r0, r0
    27b8:	d9 f7       	brne	.-10     	; 0x27b0 <strchr_P+0x2>
    27ba:	c0 01       	movw	r24, r0
    27bc:	08 95       	ret
    27be:	31 97       	sbiw	r30, 0x01	; 1
    27c0:	cf 01       	movw	r24, r30
    27c2:	08 95       	ret

000027c4 <memcpy>:
    27c4:	fb 01       	movw	r30, r22
    27c6:	dc 01       	movw	r26, r24
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <memcpy+0xa>
    27ca:	01 90       	ld	r0, Z+
    27cc:	0d 92       	st	X+, r0
    27ce:	41 50       	subi	r20, 0x01	; 1
    27d0:	50 40       	sbci	r21, 0x00	; 0
    27d2:	d8 f7       	brcc	.-10     	; 0x27ca <memcpy+0x6>
    27d4:	08 95       	ret

000027d6 <fgetc>:
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	ec 01       	movw	r28, r24
    27dc:	2b 81       	ldd	r18, Y+3	; 0x03
    27de:	20 ff       	sbrs	r18, 0
    27e0:	33 c0       	rjmp	.+102    	; 0x2848 <fgetc+0x72>
    27e2:	26 ff       	sbrs	r18, 6
    27e4:	0a c0       	rjmp	.+20     	; 0x27fa <fgetc+0x24>
    27e6:	2f 7b       	andi	r18, 0xBF	; 191
    27e8:	2b 83       	std	Y+3, r18	; 0x03
    27ea:	8e 81       	ldd	r24, Y+6	; 0x06
    27ec:	9f 81       	ldd	r25, Y+7	; 0x07
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	9f 83       	std	Y+7, r25	; 0x07
    27f2:	8e 83       	std	Y+6, r24	; 0x06
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	29 c0       	rjmp	.+82     	; 0x284c <fgetc+0x76>
    27fa:	22 ff       	sbrs	r18, 2
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <fgetc+0x46>
    27fe:	e8 81       	ld	r30, Y
    2800:	f9 81       	ldd	r31, Y+1	; 0x01
    2802:	80 81       	ld	r24, Z
    2804:	08 2e       	mov	r0, r24
    2806:	00 0c       	add	r0, r0
    2808:	99 0b       	sbc	r25, r25
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	19 f4       	brne	.+6      	; 0x2814 <fgetc+0x3e>
    280e:	20 62       	ori	r18, 0x20	; 32
    2810:	2b 83       	std	Y+3, r18	; 0x03
    2812:	1a c0       	rjmp	.+52     	; 0x2848 <fgetc+0x72>
    2814:	31 96       	adiw	r30, 0x01	; 1
    2816:	f9 83       	std	Y+1, r31	; 0x01
    2818:	e8 83       	st	Y, r30
    281a:	0e c0       	rjmp	.+28     	; 0x2838 <fgetc+0x62>
    281c:	ea 85       	ldd	r30, Y+10	; 0x0a
    281e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2820:	09 95       	icall
    2822:	97 ff       	sbrs	r25, 7
    2824:	09 c0       	rjmp	.+18     	; 0x2838 <fgetc+0x62>
    2826:	2b 81       	ldd	r18, Y+3	; 0x03
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	11 f0       	breq	.+4      	; 0x2830 <fgetc+0x5a>
    282c:	80 e2       	ldi	r24, 0x20	; 32
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <fgetc+0x5c>
    2830:	80 e1       	ldi	r24, 0x10	; 16
    2832:	82 2b       	or	r24, r18
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	08 c0       	rjmp	.+16     	; 0x2848 <fgetc+0x72>
    2838:	2e 81       	ldd	r18, Y+6	; 0x06
    283a:	3f 81       	ldd	r19, Y+7	; 0x07
    283c:	2f 5f       	subi	r18, 0xFF	; 255
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
    2840:	3f 83       	std	Y+7, r19	; 0x07
    2842:	2e 83       	std	Y+6, r18	; 0x06
    2844:	99 27       	eor	r25, r25
    2846:	02 c0       	rjmp	.+4      	; 0x284c <fgetc+0x76>
    2848:	8f ef       	ldi	r24, 0xFF	; 255
    284a:	9f ef       	ldi	r25, 0xFF	; 255
    284c:	df 91       	pop	r29
    284e:	cf 91       	pop	r28
    2850:	08 95       	ret

00002852 <fputc>:
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	fb 01       	movw	r30, r22
    285c:	23 81       	ldd	r18, Z+3	; 0x03
    285e:	21 fd       	sbrc	r18, 1
    2860:	03 c0       	rjmp	.+6      	; 0x2868 <fputc+0x16>
    2862:	8f ef       	ldi	r24, 0xFF	; 255
    2864:	9f ef       	ldi	r25, 0xFF	; 255
    2866:	2c c0       	rjmp	.+88     	; 0x28c0 <fputc+0x6e>
    2868:	22 ff       	sbrs	r18, 2
    286a:	16 c0       	rjmp	.+44     	; 0x2898 <fputc+0x46>
    286c:	46 81       	ldd	r20, Z+6	; 0x06
    286e:	57 81       	ldd	r21, Z+7	; 0x07
    2870:	24 81       	ldd	r18, Z+4	; 0x04
    2872:	35 81       	ldd	r19, Z+5	; 0x05
    2874:	42 17       	cp	r20, r18
    2876:	53 07       	cpc	r21, r19
    2878:	44 f4       	brge	.+16     	; 0x288a <fputc+0x38>
    287a:	a0 81       	ld	r26, Z
    287c:	b1 81       	ldd	r27, Z+1	; 0x01
    287e:	9d 01       	movw	r18, r26
    2880:	2f 5f       	subi	r18, 0xFF	; 255
    2882:	3f 4f       	sbci	r19, 0xFF	; 255
    2884:	31 83       	std	Z+1, r19	; 0x01
    2886:	20 83       	st	Z, r18
    2888:	8c 93       	st	X, r24
    288a:	26 81       	ldd	r18, Z+6	; 0x06
    288c:	37 81       	ldd	r19, Z+7	; 0x07
    288e:	2f 5f       	subi	r18, 0xFF	; 255
    2890:	3f 4f       	sbci	r19, 0xFF	; 255
    2892:	37 83       	std	Z+7, r19	; 0x07
    2894:	26 83       	std	Z+6, r18	; 0x06
    2896:	14 c0       	rjmp	.+40     	; 0x28c0 <fputc+0x6e>
    2898:	8b 01       	movw	r16, r22
    289a:	ec 01       	movw	r28, r24
    289c:	fb 01       	movw	r30, r22
    289e:	00 84       	ldd	r0, Z+8	; 0x08
    28a0:	f1 85       	ldd	r31, Z+9	; 0x09
    28a2:	e0 2d       	mov	r30, r0
    28a4:	09 95       	icall
    28a6:	89 2b       	or	r24, r25
    28a8:	e1 f6       	brne	.-72     	; 0x2862 <fputc+0x10>
    28aa:	d8 01       	movw	r26, r16
    28ac:	16 96       	adiw	r26, 0x06	; 6
    28ae:	8d 91       	ld	r24, X+
    28b0:	9c 91       	ld	r25, X
    28b2:	17 97       	sbiw	r26, 0x07	; 7
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	17 96       	adiw	r26, 0x07	; 7
    28b8:	9c 93       	st	X, r25
    28ba:	8e 93       	st	-X, r24
    28bc:	16 97       	sbiw	r26, 0x06	; 6
    28be:	ce 01       	movw	r24, r28
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	08 95       	ret

000028ca <ungetc>:
    28ca:	fb 01       	movw	r30, r22
    28cc:	23 81       	ldd	r18, Z+3	; 0x03
    28ce:	20 ff       	sbrs	r18, 0
    28d0:	12 c0       	rjmp	.+36     	; 0x28f6 <ungetc+0x2c>
    28d2:	26 fd       	sbrc	r18, 6
    28d4:	10 c0       	rjmp	.+32     	; 0x28f6 <ungetc+0x2c>
    28d6:	8f 3f       	cpi	r24, 0xFF	; 255
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	93 07       	cpc	r25, r19
    28dc:	61 f0       	breq	.+24     	; 0x28f6 <ungetc+0x2c>
    28de:	82 83       	std	Z+2, r24	; 0x02
    28e0:	2f 7d       	andi	r18, 0xDF	; 223
    28e2:	20 64       	ori	r18, 0x40	; 64
    28e4:	23 83       	std	Z+3, r18	; 0x03
    28e6:	26 81       	ldd	r18, Z+6	; 0x06
    28e8:	37 81       	ldd	r19, Z+7	; 0x07
    28ea:	21 50       	subi	r18, 0x01	; 1
    28ec:	31 09       	sbc	r19, r1
    28ee:	37 83       	std	Z+7, r19	; 0x07
    28f0:	26 83       	std	Z+6, r18	; 0x06
    28f2:	99 27       	eor	r25, r25
    28f4:	08 95       	ret
    28f6:	8f ef       	ldi	r24, 0xFF	; 255
    28f8:	9f ef       	ldi	r25, 0xFF	; 255
    28fa:	08 95       	ret

000028fc <__ultoa_invert>:
    28fc:	fa 01       	movw	r30, r20
    28fe:	aa 27       	eor	r26, r26
    2900:	28 30       	cpi	r18, 0x08	; 8
    2902:	51 f1       	breq	.+84     	; 0x2958 <__ultoa_invert+0x5c>
    2904:	20 31       	cpi	r18, 0x10	; 16
    2906:	81 f1       	breq	.+96     	; 0x2968 <__ultoa_invert+0x6c>
    2908:	e8 94       	clt
    290a:	6f 93       	push	r22
    290c:	6e 7f       	andi	r22, 0xFE	; 254
    290e:	6e 5f       	subi	r22, 0xFE	; 254
    2910:	7f 4f       	sbci	r23, 0xFF	; 255
    2912:	8f 4f       	sbci	r24, 0xFF	; 255
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	af 4f       	sbci	r26, 0xFF	; 255
    2918:	b1 e0       	ldi	r27, 0x01	; 1
    291a:	3e d0       	rcall	.+124    	; 0x2998 <__ultoa_invert+0x9c>
    291c:	b4 e0       	ldi	r27, 0x04	; 4
    291e:	3c d0       	rcall	.+120    	; 0x2998 <__ultoa_invert+0x9c>
    2920:	67 0f       	add	r22, r23
    2922:	78 1f       	adc	r23, r24
    2924:	89 1f       	adc	r24, r25
    2926:	9a 1f       	adc	r25, r26
    2928:	a1 1d       	adc	r26, r1
    292a:	68 0f       	add	r22, r24
    292c:	79 1f       	adc	r23, r25
    292e:	8a 1f       	adc	r24, r26
    2930:	91 1d       	adc	r25, r1
    2932:	a1 1d       	adc	r26, r1
    2934:	6a 0f       	add	r22, r26
    2936:	71 1d       	adc	r23, r1
    2938:	81 1d       	adc	r24, r1
    293a:	91 1d       	adc	r25, r1
    293c:	a1 1d       	adc	r26, r1
    293e:	20 d0       	rcall	.+64     	; 0x2980 <__ultoa_invert+0x84>
    2940:	09 f4       	brne	.+2      	; 0x2944 <__ultoa_invert+0x48>
    2942:	68 94       	set
    2944:	3f 91       	pop	r19
    2946:	2a e0       	ldi	r18, 0x0A	; 10
    2948:	26 9f       	mul	r18, r22
    294a:	11 24       	eor	r1, r1
    294c:	30 19       	sub	r19, r0
    294e:	30 5d       	subi	r19, 0xD0	; 208
    2950:	31 93       	st	Z+, r19
    2952:	de f6       	brtc	.-74     	; 0x290a <__ultoa_invert+0xe>
    2954:	cf 01       	movw	r24, r30
    2956:	08 95       	ret
    2958:	46 2f       	mov	r20, r22
    295a:	47 70       	andi	r20, 0x07	; 7
    295c:	40 5d       	subi	r20, 0xD0	; 208
    295e:	41 93       	st	Z+, r20
    2960:	b3 e0       	ldi	r27, 0x03	; 3
    2962:	0f d0       	rcall	.+30     	; 0x2982 <__ultoa_invert+0x86>
    2964:	c9 f7       	brne	.-14     	; 0x2958 <__ultoa_invert+0x5c>
    2966:	f6 cf       	rjmp	.-20     	; 0x2954 <__ultoa_invert+0x58>
    2968:	46 2f       	mov	r20, r22
    296a:	4f 70       	andi	r20, 0x0F	; 15
    296c:	40 5d       	subi	r20, 0xD0	; 208
    296e:	4a 33       	cpi	r20, 0x3A	; 58
    2970:	18 f0       	brcs	.+6      	; 0x2978 <__ultoa_invert+0x7c>
    2972:	49 5d       	subi	r20, 0xD9	; 217
    2974:	31 fd       	sbrc	r19, 1
    2976:	40 52       	subi	r20, 0x20	; 32
    2978:	41 93       	st	Z+, r20
    297a:	02 d0       	rcall	.+4      	; 0x2980 <__ultoa_invert+0x84>
    297c:	a9 f7       	brne	.-22     	; 0x2968 <__ultoa_invert+0x6c>
    297e:	ea cf       	rjmp	.-44     	; 0x2954 <__ultoa_invert+0x58>
    2980:	b4 e0       	ldi	r27, 0x04	; 4
    2982:	a6 95       	lsr	r26
    2984:	97 95       	ror	r25
    2986:	87 95       	ror	r24
    2988:	77 95       	ror	r23
    298a:	67 95       	ror	r22
    298c:	ba 95       	dec	r27
    298e:	c9 f7       	brne	.-14     	; 0x2982 <__ultoa_invert+0x86>
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	61 05       	cpc	r22, r1
    2994:	71 05       	cpc	r23, r1
    2996:	08 95       	ret
    2998:	9b 01       	movw	r18, r22
    299a:	ac 01       	movw	r20, r24
    299c:	0a 2e       	mov	r0, r26
    299e:	06 94       	lsr	r0
    29a0:	57 95       	ror	r21
    29a2:	47 95       	ror	r20
    29a4:	37 95       	ror	r19
    29a6:	27 95       	ror	r18
    29a8:	ba 95       	dec	r27
    29aa:	c9 f7       	brne	.-14     	; 0x299e <__ultoa_invert+0xa2>
    29ac:	62 0f       	add	r22, r18
    29ae:	73 1f       	adc	r23, r19
    29b0:	84 1f       	adc	r24, r20
    29b2:	95 1f       	adc	r25, r21
    29b4:	a0 1d       	adc	r26, r0
    29b6:	08 95       	ret

000029b8 <__ctype_isfalse>:
    29b8:	99 27       	eor	r25, r25
    29ba:	88 27       	eor	r24, r24

000029bc <__ctype_istrue>:
    29bc:	08 95       	ret

000029be <_exit>:
    29be:	f8 94       	cli

000029c0 <__stop_program>:
    29c0:	ff cf       	rjmp	.-2      	; 0x29c0 <__stop_program>
