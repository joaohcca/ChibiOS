
build/ch.elf:     formato de ficheiro elf32-avr

Secções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000020c4  00002158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  00800162  00800162  000021ba  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000770  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001338c  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043b3  00000000  00000000  00015d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000549d  00000000  00000000  0001a0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001438  00000000  00000000  0001f558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e17  00000000  00000000  00020990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006799  00000000  00000000  000227a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  00028f40  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da secção .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	28 c1       	rjmp	.+592    	; 0x256 <__bad_interrupt>
       6:	00 00       	nop
       8:	26 c1       	rjmp	.+588    	; 0x256 <__bad_interrupt>
       a:	00 00       	nop
       c:	24 c1       	rjmp	.+584    	; 0x256 <__bad_interrupt>
       e:	00 00       	nop
      10:	22 c1       	rjmp	.+580    	; 0x256 <__bad_interrupt>
      12:	00 00       	nop
      14:	20 c1       	rjmp	.+576    	; 0x256 <__bad_interrupt>
      16:	00 00       	nop
      18:	1e c1       	rjmp	.+572    	; 0x256 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1c c1       	rjmp	.+568    	; 0x256 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1a c1       	rjmp	.+564    	; 0x256 <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c1       	rjmp	.+560    	; 0x256 <__bad_interrupt>
      26:	00 00       	nop
      28:	16 c1       	rjmp	.+556    	; 0x256 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_11>
      30:	12 c1       	rjmp	.+548    	; 0x256 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c1       	rjmp	.+544    	; 0x256 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c1       	rjmp	.+540    	; 0x256 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c c1       	rjmp	.+536    	; 0x256 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0a c1       	rjmp	.+532    	; 0x256 <__bad_interrupt>
      42:	00 00       	nop
      44:	08 c1       	rjmp	.+528    	; 0x256 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__vector_18>
      4c:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_19>
      50:	02 c1       	rjmp	.+516    	; 0x256 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c1       	rjmp	.+512    	; 0x256 <__bad_interrupt>
      56:	00 00       	nop
      58:	fe c0       	rjmp	.+508    	; 0x256 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fc c0       	rjmp	.+504    	; 0x256 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__vector_24>
      64:	f8 c0       	rjmp	.+496    	; 0x256 <__bad_interrupt>
      66:	00 00       	nop
      68:	94 0a       	sbc	r9, r20
      6a:	6a 09       	sbc	r22, r10
      6c:	6a 09       	sbc	r22, r10
      6e:	6a 09       	sbc	r22, r10
      70:	6a 09       	sbc	r22, r10
      72:	6a 09       	sbc	r22, r10
      74:	6a 09       	sbc	r22, r10
      76:	6a 09       	sbc	r22, r10
      78:	9a 0a       	sbc	r9, r26
      7a:	6a 09       	sbc	r22, r10
      7c:	6a 09       	sbc	r22, r10
      7e:	6a 09       	sbc	r22, r10
      80:	6a 09       	sbc	r22, r10
      82:	6a 09       	sbc	r22, r10
      84:	6a 09       	sbc	r22, r10
      86:	6a 09       	sbc	r22, r10
      88:	9a 0a       	sbc	r9, r26
      8a:	6a 09       	sbc	r22, r10
      8c:	6a 09       	sbc	r22, r10
      8e:	6a 09       	sbc	r22, r10
      90:	6a 09       	sbc	r22, r10
      92:	6a 09       	sbc	r22, r10
      94:	6a 09       	sbc	r22, r10
      96:	6a 09       	sbc	r22, r10
      98:	bd 0a       	sbc	r11, r29
      9a:	6a 09       	sbc	r22, r10
      9c:	6a 09       	sbc	r22, r10
      9e:	6a 09       	sbc	r22, r10
      a0:	6a 09       	sbc	r22, r10
      a2:	6a 09       	sbc	r22, r10
      a4:	6a 09       	sbc	r22, r10
      a6:	6a 09       	sbc	r22, r10
      a8:	c0 09       	sbc	r28, r0
      aa:	6a 09       	sbc	r22, r10
      ac:	6a 09       	sbc	r22, r10
      ae:	6a 09       	sbc	r22, r10
      b0:	6a 09       	sbc	r22, r10
      b2:	6a 09       	sbc	r22, r10
      b4:	6a 09       	sbc	r22, r10
      b6:	6a 09       	sbc	r22, r10
      b8:	bd 0a       	sbc	r11, r29
      ba:	6a 09       	sbc	r22, r10
      bc:	6a 09       	sbc	r22, r10
      be:	6a 09       	sbc	r22, r10
      c0:	6a 09       	sbc	r22, r10
      c2:	6a 09       	sbc	r22, r10
      c4:	6a 09       	sbc	r22, r10
      c6:	6a 09       	sbc	r22, r10
      c8:	c0 09       	sbc	r28, r0
      ca:	6a 09       	sbc	r22, r10
      cc:	6a 09       	sbc	r22, r10
      ce:	6a 09       	sbc	r22, r10
      d0:	6a 09       	sbc	r22, r10
      d2:	6a 09       	sbc	r22, r10
      d4:	6a 09       	sbc	r22, r10
      d6:	6a 09       	sbc	r22, r10
      d8:	7b 0a       	sbc	r7, r27
      da:	6a 09       	sbc	r22, r10
      dc:	6a 09       	sbc	r22, r10
      de:	6a 09       	sbc	r22, r10
      e0:	6a 09       	sbc	r22, r10
      e2:	6a 09       	sbc	r22, r10
      e4:	6a 09       	sbc	r22, r10
      e6:	6a 09       	sbc	r22, r10
      e8:	08 0a       	sbc	r0, r24
      ea:	6a 09       	sbc	r22, r10
      ec:	6a 09       	sbc	r22, r10
      ee:	6a 09       	sbc	r22, r10
      f0:	6a 09       	sbc	r22, r10
      f2:	6a 09       	sbc	r22, r10
      f4:	6a 09       	sbc	r22, r10
      f6:	6a 09       	sbc	r22, r10
      f8:	c0 09       	sbc	r28, r0
      fa:	6a 09       	sbc	r22, r10
      fc:	6a 09       	sbc	r22, r10
      fe:	6a 09       	sbc	r22, r10
     100:	6a 09       	sbc	r22, r10
     102:	6a 09       	sbc	r22, r10
     104:	6a 09       	sbc	r22, r10
     106:	6a 09       	sbc	r22, r10
     108:	f3 09       	sbc	r31, r3
     10a:	6a 09       	sbc	r22, r10
     10c:	6a 09       	sbc	r22, r10
     10e:	6a 09       	sbc	r22, r10
     110:	6a 09       	sbc	r22, r10
     112:	6a 09       	sbc	r22, r10
     114:	6a 09       	sbc	r22, r10
     116:	6a 09       	sbc	r22, r10
     118:	ab 09       	sbc	r26, r11
     11a:	6a 09       	sbc	r22, r10
     11c:	6a 09       	sbc	r22, r10
     11e:	6a 09       	sbc	r22, r10
     120:	6a 09       	sbc	r22, r10
     122:	6a 09       	sbc	r22, r10
     124:	6a 09       	sbc	r22, r10
     126:	6a 09       	sbc	r22, r10
     128:	1b 0a       	sbc	r1, r27
     12a:	6a 09       	sbc	r22, r10
     12c:	6a 09       	sbc	r22, r10
     12e:	6a 09       	sbc	r22, r10
     130:	6a 09       	sbc	r22, r10
     132:	6a 09       	sbc	r22, r10
     134:	6a 09       	sbc	r22, r10
     136:	6a 09       	sbc	r22, r10
     138:	2e 0a       	sbc	r2, r30
     13a:	6a 09       	sbc	r22, r10
     13c:	6a 09       	sbc	r22, r10
     13e:	6a 09       	sbc	r22, r10
     140:	6a 09       	sbc	r22, r10
     142:	6a 09       	sbc	r22, r10
     144:	6a 09       	sbc	r22, r10
     146:	6a 09       	sbc	r22, r10
     148:	6a 09       	sbc	r22, r10
     14a:	6a 09       	sbc	r22, r10
     14c:	6a 09       	sbc	r22, r10
     14e:	6a 09       	sbc	r22, r10
     150:	6a 09       	sbc	r22, r10
     152:	6a 09       	sbc	r22, r10
     154:	6a 09       	sbc	r22, r10
     156:	6a 09       	sbc	r22, r10
     158:	6a 09       	sbc	r22, r10
     15a:	6a 09       	sbc	r22, r10
     15c:	6a 09       	sbc	r22, r10
     15e:	6a 09       	sbc	r22, r10
     160:	6a 09       	sbc	r22, r10
     162:	6a 09       	sbc	r22, r10
     164:	6a 09       	sbc	r22, r10
     166:	6a 09       	sbc	r22, r10
     168:	da 0a       	sbc	r13, r26
     16a:	6a 09       	sbc	r22, r10
     16c:	6a 09       	sbc	r22, r10
     16e:	6a 09       	sbc	r22, r10
     170:	6a 09       	sbc	r22, r10
     172:	6a 09       	sbc	r22, r10
     174:	6a 09       	sbc	r22, r10
     176:	6a 09       	sbc	r22, r10
     178:	90 09       	sbc	r25, r0
     17a:	6a 09       	sbc	r22, r10
     17c:	6a 09       	sbc	r22, r10
     17e:	6a 09       	sbc	r22, r10
     180:	6a 09       	sbc	r22, r10
     182:	6a 09       	sbc	r22, r10
     184:	6a 09       	sbc	r22, r10
     186:	6a 09       	sbc	r22, r10
     188:	6a 09       	sbc	r22, r10
     18a:	6a 09       	sbc	r22, r10
     18c:	6a 09       	sbc	r22, r10
     18e:	6a 09       	sbc	r22, r10
     190:	6a 09       	sbc	r22, r10
     192:	6a 09       	sbc	r22, r10
     194:	6a 09       	sbc	r22, r10
     196:	6a 09       	sbc	r22, r10
     198:	6a 09       	sbc	r22, r10
     19a:	6a 09       	sbc	r22, r10
     19c:	6a 09       	sbc	r22, r10
     19e:	6a 09       	sbc	r22, r10
     1a0:	6a 09       	sbc	r22, r10
     1a2:	6a 09       	sbc	r22, r10
     1a4:	6a 09       	sbc	r22, r10
     1a6:	6a 09       	sbc	r22, r10
     1a8:	ce 09       	sbc	r28, r14
     1aa:	6a 09       	sbc	r22, r10
     1ac:	6a 09       	sbc	r22, r10
     1ae:	6a 09       	sbc	r22, r10
     1b0:	6a 09       	sbc	r22, r10
     1b2:	6a 09       	sbc	r22, r10
     1b4:	6a 09       	sbc	r22, r10
     1b6:	6a 09       	sbc	r22, r10
     1b8:	d1 09       	sbc	r29, r1
     1ba:	6a 09       	sbc	r22, r10
     1bc:	6a 09       	sbc	r22, r10
     1be:	6a 09       	sbc	r22, r10
     1c0:	6a 09       	sbc	r22, r10
     1c2:	6a 09       	sbc	r22, r10
     1c4:	6a 09       	sbc	r22, r10
     1c6:	6a 09       	sbc	r22, r10
     1c8:	64 0a       	sbc	r6, r20
     1ca:	6a 09       	sbc	r22, r10
     1cc:	6a 09       	sbc	r22, r10
     1ce:	6a 09       	sbc	r22, r10
     1d0:	6a 09       	sbc	r22, r10
     1d2:	6a 09       	sbc	r22, r10
     1d4:	6a 09       	sbc	r22, r10
     1d6:	6a 09       	sbc	r22, r10
     1d8:	81 0a       	sbc	r8, r17
     1da:	6a 09       	sbc	r22, r10
     1dc:	6a 09       	sbc	r22, r10
     1de:	6a 09       	sbc	r22, r10
     1e0:	6a 09       	sbc	r22, r10
     1e2:	6a 09       	sbc	r22, r10
     1e4:	6a 09       	sbc	r22, r10
     1e6:	6a 09       	sbc	r22, r10
     1e8:	a5 09       	sbc	r26, r5
     1ea:	6a 09       	sbc	r22, r10
     1ec:	6a 09       	sbc	r22, r10
     1ee:	6a 09       	sbc	r22, r10
     1f0:	6a 09       	sbc	r22, r10
     1f2:	6a 09       	sbc	r22, r10
     1f4:	6a 09       	sbc	r22, r10
     1f6:	6a 09       	sbc	r22, r10
     1f8:	a5 09       	sbc	r26, r5

000001fa <__trampolines_end>:
     1fa:	45 46       	sbci	r20, 0x65	; 101
     1fc:	47 65       	ori	r20, 0x57	; 87
     1fe:	66 67       	ori	r22, 0x76	; 118
	...

00000201 <__c.2314>:
     201:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000211 <__c.2449>:
     211:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	d8 e0       	ldi	r29, 0x08	; 8
     224:	de bf       	out	0x3e, r29	; 62
     226:	cd bf       	out	0x3d, r28	; 61

00000228 <__do_copy_data>:
     228:	11 e0       	ldi	r17, 0x01	; 1
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b1 e0       	ldi	r27, 0x01	; 1
     22e:	e4 ec       	ldi	r30, 0xC4	; 196
     230:	f0 e2       	ldi	r31, 0x20	; 32
     232:	02 c0       	rjmp	.+4      	; 0x238 <__do_copy_data+0x10>
     234:	05 90       	lpm	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	a2 36       	cpi	r26, 0x62	; 98
     23a:	b1 07       	cpc	r27, r17
     23c:	d9 f7       	brne	.-10     	; 0x234 <__do_copy_data+0xc>

0000023e <__do_clear_bss>:
     23e:	23 e0       	ldi	r18, 0x03	; 3
     240:	a2 e6       	ldi	r26, 0x62	; 98
     242:	b1 e0       	ldi	r27, 0x01	; 1
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a8 38       	cpi	r26, 0x88	; 136
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <main>
     252:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <_exit>

00000256 <__bad_interrupt>:
     256:	d4 ce       	rjmp	.-600    	; 0x0 <__vectors>

00000258 <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     258:	ff cf       	rjmp	.-2      	; 0x258 <_idle_thread>

0000025a <chSysInit>:
     25a:	e7 d1       	rcall	.+974    	; 0x62a <_scheduler_init>
     25c:	88 d0       	rcall	.+272    	; 0x36e <_vt_init>
     25e:	92 d4       	rcall	.+2340   	; 0xb84 <_core_init>
     260:	c9 d4       	rcall	.+2450   	; 0xbf4 <_heap_init>
     262:	40 e8       	ldi	r20, 0x80	; 128
     264:	67 e1       	ldi	r22, 0x17	; 23
     266:	71 e0       	ldi	r23, 0x01	; 1
     268:	81 ef       	ldi	r24, 0xF1	; 241
     26a:	92 e0       	ldi	r25, 0x02	; 2
     26c:	f5 d2       	rcall	.+1514   	; 0x858 <_thread_init>
     26e:	fc 01       	movw	r30, r24
     270:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <ch+0xc>
     274:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <ch+0xb>
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	95 87       	std	Z+13, r25	; 0x0d
     27c:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <__avr_in_isr>
     280:	78 94       	sei
     282:	85 e0       	ldi	r24, 0x05	; 5
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	6b c3       	rjmp	.+1750   	; 0x95e <chThdCreate>

00000288 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     288:	cf 92       	push	r12
     28a:	df 92       	push	r13
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
     298:	c0 91 e7 02 	lds	r28, 0x02E7	; 0x8002e7 <ch+0xd>
     29c:	d0 91 e8 02 	lds	r29, 0x02E8	; 0x8002e8 <ch+0xe>
     2a0:	2c 81       	ldd	r18, Y+4	; 0x04
     2a2:	3d 81       	ldd	r19, Y+5	; 0x05
     2a4:	87 ee       	ldi	r24, 0xE7	; 231
     2a6:	e8 2e       	mov	r14, r24
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	f8 2e       	mov	r15, r24
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     2ac:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     2b0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
     2b4:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <ch+0x13>
     2b8:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <ch+0x14>
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
     2bc:	8b 01       	movw	r16, r22
     2be:	04 1b       	sub	r16, r20
     2c0:	15 0b       	sbc	r17, r21

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
     2c2:	02 17       	cp	r16, r18
     2c4:	13 07       	cpc	r17, r19
     2c6:	90 f4       	brcc	.+36     	; 0x2ec <chSysTimerHandlerI+0x64>
     2c8:	2a c0       	rjmp	.+84     	; 0x31e <chSysTimerHandlerI+0x96>
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
     2ca:	88 85       	ldd	r24, Y+8	; 0x08
     2cc:	99 85       	ldd	r25, Y+9	; 0x09
     2ce:	f6 01       	movw	r30, r12
     2d0:	09 95       	icall
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
     2d2:	c0 91 e7 02 	lds	r28, 0x02E7	; 0x8002e7 <ch+0xd>
     2d6:	d0 91 e8 02 	lds	r29, 0x02E8	; 0x8002e8 <ch+0xe>
    }
    while (vtp->delta <= nowdelta);
     2da:	2c 81       	ldd	r18, Y+4	; 0x04
     2dc:	3d 81       	ldd	r19, Y+5	; 0x05
     2de:	02 17       	cp	r16, r18
     2e0:	13 07       	cpc	r17, r19
     2e2:	20 f3       	brcs	.-56     	; 0x2ac <chSysTimerHandlerI+0x24>
     2e4:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <ch+0x13>
     2e8:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <ch+0x14>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
     2ec:	42 0f       	add	r20, r18
     2ee:	53 1f       	adc	r21, r19
     2f0:	50 93 ee 02 	sts	0x02EE, r21	; 0x8002ee <ch+0x14>
     2f4:	40 93 ed 02 	sts	0x02ED, r20	; 0x8002ed <ch+0x13>
      nowdelta -= vtp->delta;
     2f8:	02 1b       	sub	r16, r18
     2fa:	13 0b       	sbc	r17, r19

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     2fc:	e8 81       	ld	r30, Y
     2fe:	f9 81       	ldd	r31, Y+1	; 0x01
     300:	f3 82       	std	Z+3, r15	; 0x03
     302:	e2 82       	std	Z+2, r14	; 0x02
      ch.vtlist.next = vtp->next;
     304:	f0 93 e8 02 	sts	0x02E8, r31	; 0x8002e8 <ch+0xe>
     308:	e0 93 e7 02 	sts	0x02E7, r30	; 0x8002e7 <ch+0xd>
      fn = vtp->func;
     30c:	ce 80       	ldd	r12, Y+6	; 0x06
     30e:	df 80       	ldd	r13, Y+7	; 0x07
      vtp->func = NULL;
     310:	1f 82       	std	Y+7, r1	; 0x07
     312:	1e 82       	std	Y+6, r1	; 0x06

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     314:	e7 5e       	subi	r30, 0xE7	; 231
     316:	f2 40       	sbci	r31, 0x02	; 2
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     318:	c1 f6       	brne	.-80     	; 0x2ca <chSysTimerHandlerI+0x42>
     31a:	bf d4       	rcall	.+2430   	; 0xc9a <stStopAlarm>
    }
    while (vtp->delta <= nowdelta);
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     31c:	d6 cf       	rjmp	.-84     	; 0x2ca <chSysTimerHandlerI+0x42>
     31e:	f2 e0       	ldi	r31, 0x02	; 2
     320:	c7 3e       	cpi	r28, 0xE7	; 231
     322:	df 07       	cpc	r29, r31
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
     324:	d9 f0       	breq	.+54     	; 0x35c <chSysTimerHandlerI+0xd4>
     326:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <ch+0x14>
     32a:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <ch+0x13>
  ch.vtlist.next->delta -= nowdelta;
     32e:	8c 81       	ldd	r24, Y+4	; 0x04
     330:	9d 81       	ldd	r25, Y+5	; 0x05
     332:	80 1b       	sub	r24, r16
     334:	91 0b       	sbc	r25, r17
     336:	9d 83       	std	Y+5, r25	; 0x05

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     338:	8c 83       	std	Y+4, r24	; 0x04
     33a:	82 30       	cpi	r24, 0x02	; 2
     33c:	91 05       	cpc	r25, r1
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     33e:	58 f0       	brcs	.+22     	; 0x356 <chSysTimerHandlerI+0xce>
     340:	86 0f       	add	r24, r22
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     342:	97 1f       	adc	r25, r23
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	cf 90       	pop	r12
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     354:	a5 c4       	rjmp	.+2378   	; 0xca0 <stSetAlarm>
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	f2 cf       	rjmp	.-28     	; 0x340 <chSysTimerHandlerI+0xb8>
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	ff 90       	pop	r15
     366:	ef 90       	pop	r14
     368:	df 90       	pop	r13
     36a:	cf 90       	pop	r12
     36c:	08 95       	ret

0000036e <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     36e:	ea ed       	ldi	r30, 0xDA	; 218
     370:	f2 e0       	ldi	r31, 0x02	; 2
     372:	87 ee       	ldi	r24, 0xE7	; 231
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	96 87       	std	Z+14, r25	; 0x0e
     378:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     37a:	90 8b       	std	Z+16, r25	; 0x10
     37c:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	9f ef       	ldi	r25, 0xFF	; 255
     382:	92 8b       	std	Z+18, r25	; 0x12
     384:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
     386:	14 8a       	std	Z+20, r1	; 0x14
     388:	13 8a       	std	Z+19, r1	; 0x13
     38a:	08 95       	ret

0000038c <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	7c 01       	movw	r14, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     39a:	dc 01       	movw	r26, r24
     39c:	19 96       	adiw	r26, 0x09	; 9
     39e:	3c 93       	st	X, r19
     3a0:	2e 93       	st	-X, r18
     3a2:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     3a4:	17 96       	adiw	r26, 0x07	; 7
     3a6:	5c 93       	st	X, r21
     3a8:	4e 93       	st	-X, r20
     3aa:	16 97       	sbiw	r26, 0x06	; 6
     3ac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     3b0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     3b4:	62 30       	cpi	r22, 0x02	; 2
     3b6:	71 05       	cpc	r23, r1
     3b8:	08 f4       	brcc	.+2      	; 0x3bc <chVTDoSetI+0x30>
     3ba:	59 c0       	rjmp	.+178    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     3bc:	00 91 e7 02 	lds	r16, 0x02E7	; 0x8002e7 <ch+0xd>
     3c0:	10 91 e8 02 	lds	r17, 0x02E8	; 0x8002e8 <ch+0xe>
     3c4:	b2 e0       	ldi	r27, 0x02	; 2
     3c6:	07 3e       	cpi	r16, 0xE7	; 231
     3c8:	1b 07       	cpc	r17, r27
     3ca:	09 f4       	brne	.+2      	; 0x3ce <chVTDoSetI+0x42>
     3cc:	5a c0       	rjmp	.+180    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
     3ce:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <ch+0x13>
     3d2:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <ch+0x14>
     3d6:	28 1b       	sub	r18, r24
     3d8:	39 0b       	sbc	r19, r25
     3da:	eb 01       	movw	r28, r22
     3dc:	c2 0f       	add	r28, r18
     3de:	d3 1f       	adc	r29, r19

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     3e0:	d8 01       	movw	r26, r16

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
     3e2:	c2 17       	cp	r28, r18
     3e4:	d3 07       	cpc	r29, r19
     3e6:	e0 f1       	brcs	.+120    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
     3e8:	14 96       	adiw	r26, 0x04	; 4
     3ea:	2d 91       	ld	r18, X+
     3ec:	3c 91       	ld	r19, X
     3ee:	15 97       	sbiw	r26, 0x05	; 5
     3f0:	c2 17       	cp	r28, r18
     3f2:	d3 07       	cpc	r29, r19
     3f4:	48 f4       	brcc	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f6:	3e c0       	rjmp	.+124    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     3f8:	c2 1b       	sub	r28, r18
     3fa:	d3 0b       	sbc	r29, r19
    p = p->next;
     3fc:	d8 01       	movw	r26, r16
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
     3fe:	0d 91       	ld	r16, X+
     400:	1c 91       	ld	r17, X
     402:	f8 01       	movw	r30, r16
     404:	24 81       	ldd	r18, Z+4	; 0x04
     406:	35 81       	ldd	r19, Z+5	; 0x05
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     408:	2c 17       	cp	r18, r28
     40a:	3d 07       	cpc	r19, r29
     40c:	a8 f3       	brcs	.-22     	; 0x3f8 <chVTDoSetI+0x6c>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     40e:	d7 01       	movw	r26, r14
     410:	0d 93       	st	X+, r16
     412:	1c 93       	st	X, r17
  vtp->prev = vtp->next->prev;
     414:	d8 01       	movw	r26, r16
     416:	12 96       	adiw	r26, 0x02	; 2
     418:	ed 91       	ld	r30, X+
     41a:	fc 91       	ld	r31, X
     41c:	13 97       	sbiw	r26, 0x03	; 3
     41e:	d7 01       	movw	r26, r14
     420:	13 96       	adiw	r26, 0x03	; 3
     422:	fc 93       	st	X, r31
     424:	ee 93       	st	-X, r30
     426:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     428:	f1 82       	std	Z+1, r15	; 0x01
     42a:	e0 82       	st	Z, r14
  p->prev = vtp;
     42c:	f8 01       	movw	r30, r16
     42e:	f3 82       	std	Z+3, r15	; 0x03
     430:	e2 82       	std	Z+2, r14	; 0x02
  vtp->delta = delta;
     432:	15 96       	adiw	r26, 0x05	; 5
     434:	dc 93       	st	X, r29
     436:	ce 93       	st	-X, r28
     438:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     43a:	84 81       	ldd	r24, Z+4	; 0x04
     43c:	95 81       	ldd	r25, Z+5	; 0x05
     43e:	8c 1b       	sub	r24, r28
     440:	9d 0b       	sbc	r25, r29
     442:	95 83       	std	Z+5, r25	; 0x05
     444:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	9f ef       	ldi	r25, 0xFF	; 255
     44a:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <ch+0x12>
     44e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <ch+0x11>
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	08 95       	ret

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     460:	14 96       	adiw	r26, 0x04	; 4
     462:	8d 91       	ld	r24, X+
     464:	9c 91       	ld	r25, X
     466:	15 97       	sbiw	r26, 0x05	; 5
     468:	c8 1b       	sub	r28, r24
     46a:	d9 0b       	sbc	r29, r25
     46c:	c8 cf       	rjmp	.-112    	; 0x3fe <chVTDoSetI+0x72>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	a4 cf       	rjmp	.-184    	; 0x3bc <chVTDoSetI+0x30>
     474:	8c 0f       	add	r24, r28
     476:	9d 1f       	adc	r25, r29
     478:	13 d4       	rcall	.+2086   	; 0xca0 <stSetAlarm>
     47a:	f8 01       	movw	r30, r16
     47c:	24 81       	ldd	r18, Z+4	; 0x04
     47e:	35 81       	ldd	r19, Z+5	; 0x05
     480:	c3 cf       	rjmp	.-122    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
     482:	30 93 ee 02 	sts	0x02EE, r19	; 0x8002ee <ch+0x14>
     486:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <ch+0x13>
      ch.vtlist.next = vtp;
     48a:	f0 92 e8 02 	sts	0x02E8, r15	; 0x8002e8 <ch+0xe>
     48e:	e0 92 e7 02 	sts	0x02E7, r14	; 0x8002e7 <ch+0xd>
      ch.vtlist.prev = vtp;
     492:	f0 92 ea 02 	sts	0x02EA, r15	; 0x8002ea <ch+0x10>
     496:	e0 92 e9 02 	sts	0x02E9, r14	; 0x8002e9 <ch+0xf>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
     49a:	f7 01       	movw	r30, r14
     49c:	11 83       	std	Z+1, r17	; 0x01
     49e:	00 83       	st	Z, r16
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
     4a0:	13 83       	std	Z+3, r17	; 0x03
     4a2:	02 83       	std	Z+2, r16	; 0x02
      vtp->delta = delay;
     4a4:	75 83       	std	Z+5, r23	; 0x05
     4a6:	64 83       	std	Z+4, r22	; 0x04
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
     4a8:	cb 01       	movw	r24, r22
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	e6 c3       	rjmp	.+1996   	; 0xc88 <stStartAlarm>

000004bc <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	fc 01       	movw	r30, r24
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
     4c2:	a0 91 e7 02 	lds	r26, 0x02E7	; 0x8002e7 <ch+0xd>
     4c6:	b0 91 e8 02 	lds	r27, 0x02E8	; 0x8002e8 <ch+0xe>
     4ca:	a8 17       	cp	r26, r24
     4cc:	b9 07       	cpc	r27, r25
     4ce:	09 f1       	breq	.+66     	; 0x512 <chVTDoResetI+0x56>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
     4d0:	c2 81       	ldd	r28, Z+2	; 0x02
     4d2:	d3 81       	ldd	r29, Z+3	; 0x03
     4d4:	80 81       	ld	r24, Z
     4d6:	91 81       	ldd	r25, Z+1	; 0x01
     4d8:	99 83       	std	Y+1, r25	; 0x01
     4da:	88 83       	st	Y, r24
    vtp->next->prev = vtp->prev;
     4dc:	a0 81       	ld	r26, Z
     4de:	b1 81       	ldd	r27, Z+1	; 0x01
     4e0:	13 96       	adiw	r26, 0x03	; 3
     4e2:	dc 93       	st	X, r29
     4e4:	ce 93       	st	-X, r28
     4e6:	12 97       	sbiw	r26, 0x02	; 2
    vtp->func = NULL;
     4e8:	17 82       	std	Z+7, r1	; 0x07
     4ea:	16 82       	std	Z+6, r1	; 0x06

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	a7 3e       	cpi	r26, 0xE7	; 231
     4f0:	b8 07       	cpc	r27, r24
     4f2:	61 f0       	breq	.+24     	; 0x50c <chVTDoResetI+0x50>
      vtp->next->delta += vtp->delta;
     4f4:	14 96       	adiw	r26, 0x04	; 4
     4f6:	2d 91       	ld	r18, X+
     4f8:	3c 91       	ld	r19, X
     4fa:	15 97       	sbiw	r26, 0x05	; 5
     4fc:	84 81       	ldd	r24, Z+4	; 0x04
     4fe:	95 81       	ldd	r25, Z+5	; 0x05
     500:	82 0f       	add	r24, r18
     502:	93 1f       	adc	r25, r19
     504:	15 96       	adiw	r26, 0x05	; 5
     506:	9c 93       	st	X, r25
     508:	8e 93       	st	-X, r24
     50a:	14 97       	sbiw	r26, 0x04	; 4
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
     512:	ed 91       	ld	r30, X+
     514:	fc 91       	ld	r31, X
     516:	11 97       	sbiw	r26, 0x01	; 1
     518:	f0 93 e8 02 	sts	0x02E8, r31	; 0x8002e8 <ch+0xe>
     51c:	e0 93 e7 02 	sts	0x02E7, r30	; 0x8002e7 <ch+0xd>
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
     520:	87 ee       	ldi	r24, 0xE7	; 231
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	82 83       	std	Z+2, r24	; 0x02
  vtp->func = NULL;
     528:	17 96       	adiw	r26, 0x07	; 7
     52a:	1c 92       	st	X, r1
     52c:	1e 92       	st	-X, r1
     52e:	16 97       	sbiw	r26, 0x06	; 6

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     530:	e8 17       	cp	r30, r24
     532:	f9 07       	cpc	r31, r25
     534:	29 f1       	breq	.+74     	; 0x580 <chVTDoResetI+0xc4>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
     536:	24 81       	ldd	r18, Z+4	; 0x04
     538:	35 81       	ldd	r19, Z+5	; 0x05
     53a:	14 96       	adiw	r26, 0x04	; 4
     53c:	8d 91       	ld	r24, X+
     53e:	9c 91       	ld	r25, X
     540:	15 97       	sbiw	r26, 0x05	; 5
     542:	82 0f       	add	r24, r18
     544:	93 1f       	adc	r25, r19
     546:	95 83       	std	Z+5, r25	; 0x05
     548:	84 83       	std	Z+4, r24	; 0x04
     54a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     54e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
     552:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <ch+0x13>
     556:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <ch+0x14>
     55a:	24 1b       	sub	r18, r20
     55c:	35 0b       	sbc	r19, r21

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
     55e:	28 17       	cp	r18, r24
     560:	39 07       	cpc	r19, r25
     562:	a0 f6       	brcc	.-88     	; 0x50c <chVTDoResetI+0x50>
  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     564:	bc 01       	movw	r22, r24
     566:	62 1b       	sub	r22, r18
     568:	73 0b       	sbc	r23, r19
     56a:	62 30       	cpi	r22, 0x02	; 2
     56c:	71 05       	cpc	r23, r1
     56e:	28 f0       	brcs	.+10     	; 0x57a <chVTDoResetI+0xbe>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     570:	84 0f       	add	r24, r20
     572:	95 1f       	adc	r25, r21
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     578:	93 c3       	rjmp	.+1830   	; 0xca0 <stSetAlarm>
     57a:	c9 01       	movw	r24, r18
     57c:	02 96       	adiw	r24, 0x02	; 2
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     57e:	f8 cf       	rjmp	.-16     	; 0x570 <chVTDoResetI+0xb4>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	8a c3       	rjmp	.+1812   	; 0xc9a <stStopAlarm>

00000586 <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	dc 01       	movw	r26, r24
     58c:	1d 96       	adiw	r26, 0x0d	; 13
     58e:	8c 91       	ld	r24, X
     590:	1d 97       	sbiw	r26, 0x0d	; 13
     592:	84 30       	cpi	r24, 0x04	; 4
     594:	99 f1       	breq	.+102    	; 0x5fc <wakeup+0x76>
     596:	70 f5       	brcc	.+92     	; 0x5f4 <wakeup+0x6e>
     598:	88 23       	and	r24, r24
     59a:	49 f1       	breq	.+82     	; 0x5ee <wakeup+0x68>
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	31 f4       	brne	.+12     	; 0x5ac <wakeup+0x26>
     5a0:	50 96       	adiw	r26, 0x10	; 16
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	51 97       	sbiw	r26, 0x11	; 17
     5a8:	11 82       	std	Z+1, r1	; 0x01
     5aa:	10 82       	st	Z, r1
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	51 96       	adiw	r26, 0x11	; 17
     5b2:	9c 93       	st	X, r25
     5b4:	8e 93       	st	-X, r24
     5b6:	50 97       	sbiw	r26, 0x10	; 16
     5b8:	1d 96       	adiw	r26, 0x0d	; 13
     5ba:	1c 92       	st	X, r1
     5bc:	1d 97       	sbiw	r26, 0x0d	; 13
     5be:	14 96       	adiw	r26, 0x04	; 4
     5c0:	2c 91       	ld	r18, X
     5c2:	14 97       	sbiw	r26, 0x04	; 4
     5c4:	ea ed       	ldi	r30, 0xDA	; 218
     5c6:	f2 e0       	ldi	r31, 0x02	; 2
     5c8:	01 90       	ld	r0, Z+
     5ca:	f0 81       	ld	r31, Z
     5cc:	e0 2d       	mov	r30, r0
     5ce:	94 81       	ldd	r25, Z+4	; 0x04
     5d0:	92 17       	cp	r25, r18
     5d2:	d0 f7       	brcc	.-12     	; 0x5c8 <wakeup+0x42>
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	fc 93       	st	X, r31
     5d8:	ee 93       	st	-X, r30
     5da:	c2 81       	ldd	r28, Z+2	; 0x02
     5dc:	d3 81       	ldd	r29, Z+3	; 0x03
     5de:	13 96       	adiw	r26, 0x03	; 3
     5e0:	dc 93       	st	X, r29
     5e2:	ce 93       	st	-X, r28
     5e4:	12 97       	sbiw	r26, 0x02	; 2
     5e6:	b9 83       	std	Y+1, r27	; 0x01
     5e8:	a8 83       	st	Y, r26
     5ea:	b3 83       	std	Z+3, r27	; 0x03
     5ec:	a2 83       	std	Z+2, r26	; 0x02
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret
     5f4:	85 30       	cpi	r24, 0x05	; 5
     5f6:	89 f0       	breq	.+34     	; 0x61a <wakeup+0x94>
     5f8:	87 30       	cpi	r24, 0x07	; 7
     5fa:	c1 f6       	brne	.-80     	; 0x5ac <wakeup+0x26>
     5fc:	12 96       	adiw	r26, 0x02	; 2
     5fe:	ed 91       	ld	r30, X+
     600:	fc 91       	ld	r31, X
     602:	13 97       	sbiw	r26, 0x03	; 3
     604:	8d 91       	ld	r24, X+
     606:	9c 91       	ld	r25, X
     608:	11 97       	sbiw	r26, 0x01	; 1
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	80 83       	st	Z, r24
     60e:	cd 91       	ld	r28, X+
     610:	dc 91       	ld	r29, X
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	fb 83       	std	Y+3, r31	; 0x03
     616:	ea 83       	std	Y+2, r30	; 0x02
     618:	c9 cf       	rjmp	.-110    	; 0x5ac <wakeup+0x26>
     61a:	50 96       	adiw	r26, 0x10	; 16
     61c:	ed 91       	ld	r30, X+
     61e:	fc 91       	ld	r31, X
     620:	51 97       	sbiw	r26, 0x11	; 17
     622:	84 81       	ldd	r24, Z+4	; 0x04
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	84 83       	std	Z+4, r24	; 0x04
     628:	e9 cf       	rjmp	.-46     	; 0x5fc <wakeup+0x76>

0000062a <_scheduler_init>:
     62a:	ea ed       	ldi	r30, 0xDA	; 218
     62c:	f2 e0       	ldi	r31, 0x02	; 2
     62e:	f1 83       	std	Z+1, r31	; 0x01
     630:	e0 83       	st	Z, r30
     632:	f3 83       	std	Z+3, r31	; 0x03
     634:	e2 83       	std	Z+2, r30	; 0x02
     636:	14 82       	std	Z+4, r1	; 0x04
     638:	f0 87       	std	Z+8, r31	; 0x08
     63a:	e7 83       	std	Z+7, r30	; 0x07
     63c:	f2 87       	std	Z+10, r31	; 0x0a
     63e:	e1 87       	std	Z+9, r30	; 0x09
     640:	08 95       	ret

00000642 <chSchReadyI>:
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	dc 01       	movw	r26, r24
     648:	1d 96       	adiw	r26, 0x0d	; 13
     64a:	1c 92       	st	X, r1
     64c:	1d 97       	sbiw	r26, 0x0d	; 13
     64e:	14 96       	adiw	r26, 0x04	; 4
     650:	2c 91       	ld	r18, X
     652:	14 97       	sbiw	r26, 0x04	; 4
     654:	ea ed       	ldi	r30, 0xDA	; 218
     656:	f2 e0       	ldi	r31, 0x02	; 2
     658:	01 90       	ld	r0, Z+
     65a:	f0 81       	ld	r31, Z
     65c:	e0 2d       	mov	r30, r0
     65e:	94 81       	ldd	r25, Z+4	; 0x04
     660:	92 17       	cp	r25, r18
     662:	d0 f7       	brcc	.-12     	; 0x658 <chSchReadyI+0x16>
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	fc 93       	st	X, r31
     668:	ee 93       	st	-X, r30
     66a:	c2 81       	ldd	r28, Z+2	; 0x02
     66c:	d3 81       	ldd	r29, Z+3	; 0x03
     66e:	13 96       	adiw	r26, 0x03	; 3
     670:	dc 93       	st	X, r29
     672:	ce 93       	st	-X, r28
     674:	12 97       	sbiw	r26, 0x02	; 2
     676:	b9 83       	std	Y+1, r27	; 0x01
     678:	a8 83       	st	Y, r26
     67a:	b3 83       	std	Z+3, r27	; 0x03
     67c:	a2 83       	std	Z+2, r26	; 0x02
     67e:	cd 01       	movw	r24, r26
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <chSchGoSleepS>:
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ea ed       	ldi	r30, 0xDA	; 218
     68c:	f2 e0       	ldi	r31, 0x02	; 2
     68e:	63 85       	ldd	r22, Z+11	; 0x0b
     690:	74 85       	ldd	r23, Z+12	; 0x0c
     692:	db 01       	movw	r26, r22
     694:	1d 96       	adiw	r26, 0x0d	; 13
     696:	8c 93       	st	X, r24
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	ec 01       	movw	r28, r24
     69e:	a8 81       	ld	r26, Y
     6a0:	b9 81       	ldd	r27, Y+1	; 0x01
     6a2:	b1 83       	std	Z+1, r27	; 0x01
     6a4:	a0 83       	st	Z, r26
     6a6:	13 96       	adiw	r26, 0x03	; 3
     6a8:	fc 93       	st	X, r31
     6aa:	ee 93       	st	-X, r30
     6ac:	12 97       	sbiw	r26, 0x02	; 2
     6ae:	94 87       	std	Z+12, r25	; 0x0c
     6b0:	83 87       	std	Z+11, r24	; 0x0b
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	2d 87       	std	Y+13, r18	; 0x0d
     6b6:	ab d2       	rcall	.+1366   	; 0xc0e <_port_switch>
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <chSchGoSleepTimeoutS>:
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	2a 97       	sbiw	r28, 0x0a	; 10
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	18 2f       	mov	r17, r24
     6d6:	6f 3f       	cpi	r22, 0xFF	; 255
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	78 07       	cpc	r23, r24
     6dc:	11 f1       	breq	.+68     	; 0x722 <chSchGoSleepTimeoutS+0x64>
     6de:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <ch+0xb>
     6e2:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <ch+0xc>
     6e6:	43 ec       	ldi	r20, 0xC3	; 195
     6e8:	52 e0       	ldi	r21, 0x02	; 2
     6ea:	ce 01       	movw	r24, r28
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	4e de       	rcall	.-868    	; 0x38c <chVTDoSetI>
     6f0:	81 2f       	mov	r24, r17
     6f2:	c9 df       	rcall	.-110    	; 0x686 <chSchGoSleepS>
     6f4:	8f 81       	ldd	r24, Y+7	; 0x07
     6f6:	98 85       	ldd	r25, Y+8	; 0x08
     6f8:	89 2b       	or	r24, r25
     6fa:	19 f0       	breq	.+6      	; 0x702 <chSchGoSleepTimeoutS+0x44>
     6fc:	ce 01       	movw	r24, r28
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	dd de       	rcall	.-582    	; 0x4bc <chVTDoResetI>
     702:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <ch+0xb>
     706:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <ch+0xc>
     70a:	80 89       	ldd	r24, Z+16	; 0x10
     70c:	91 89       	ldd	r25, Z+17	; 0x11
     70e:	2a 96       	adiw	r28, 0x0a	; 10
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	08 95       	ret
     722:	81 2f       	mov	r24, r17
     724:	b0 df       	rcall	.-160    	; 0x686 <chSchGoSleepS>
     726:	ed cf       	rjmp	.-38     	; 0x702 <chSchGoSleepTimeoutS+0x44>

00000728 <chSchWakeupS>:
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	dc 01       	movw	r26, r24
     72e:	c0 91 e5 02 	lds	r28, 0x02E5	; 0x8002e5 <ch+0xb>
     732:	d0 91 e6 02 	lds	r29, 0x02E6	; 0x8002e6 <ch+0xc>
     736:	51 96       	adiw	r26, 0x11	; 17
     738:	7c 93       	st	X, r23
     73a:	6e 93       	st	-X, r22
     73c:	50 97       	sbiw	r26, 0x10	; 16
     73e:	14 96       	adiw	r26, 0x04	; 4
     740:	2c 91       	ld	r18, X
     742:	14 97       	sbiw	r26, 0x04	; 4
     744:	8c 81       	ldd	r24, Y+4	; 0x04
     746:	82 17       	cp	r24, r18
     748:	d8 f0       	brcs	.+54     	; 0x780 <chSchWakeupS+0x58>
     74a:	1d 96       	adiw	r26, 0x0d	; 13
     74c:	1c 92       	st	X, r1
     74e:	1d 97       	sbiw	r26, 0x0d	; 13
     750:	ea ed       	ldi	r30, 0xDA	; 218
     752:	f2 e0       	ldi	r31, 0x02	; 2
     754:	01 90       	ld	r0, Z+
     756:	f0 81       	ld	r31, Z
     758:	e0 2d       	mov	r30, r0
     75a:	94 81       	ldd	r25, Z+4	; 0x04
     75c:	92 17       	cp	r25, r18
     75e:	d0 f7       	brcc	.-12     	; 0x754 <chSchWakeupS+0x2c>
     760:	11 96       	adiw	r26, 0x01	; 1
     762:	fc 93       	st	X, r31
     764:	ee 93       	st	-X, r30
     766:	c2 81       	ldd	r28, Z+2	; 0x02
     768:	d3 81       	ldd	r29, Z+3	; 0x03
     76a:	13 96       	adiw	r26, 0x03	; 3
     76c:	dc 93       	st	X, r29
     76e:	ce 93       	st	-X, r28
     770:	12 97       	sbiw	r26, 0x02	; 2
     772:	b9 83       	std	Y+1, r27	; 0x01
     774:	a8 83       	st	Y, r26
     776:	b3 83       	std	Z+3, r27	; 0x03
     778:	a2 83       	std	Z+2, r26	; 0x02
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret
     780:	1d 86       	std	Y+13, r1	; 0x0d
     782:	ea ed       	ldi	r30, 0xDA	; 218
     784:	f2 e0       	ldi	r31, 0x02	; 2
     786:	01 90       	ld	r0, Z+
     788:	f0 81       	ld	r31, Z
     78a:	e0 2d       	mov	r30, r0
     78c:	94 81       	ldd	r25, Z+4	; 0x04
     78e:	98 17       	cp	r25, r24
     790:	d0 f7       	brcc	.-12     	; 0x786 <chSchWakeupS+0x5e>
     792:	cd 01       	movw	r24, r26
     794:	f9 83       	std	Y+1, r31	; 0x01
     796:	e8 83       	st	Y, r30
     798:	a2 81       	ldd	r26, Z+2	; 0x02
     79a:	b3 81       	ldd	r27, Z+3	; 0x03
     79c:	bb 83       	std	Y+3, r27	; 0x03
     79e:	aa 83       	std	Y+2, r26	; 0x02
     7a0:	cd 93       	st	X+, r28
     7a2:	dc 93       	st	X, r29
     7a4:	d3 83       	std	Z+3, r29	; 0x03
     7a6:	c2 83       	std	Z+2, r28	; 0x02
     7a8:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <ch+0xc>
     7ac:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <ch+0xb>
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	fc 01       	movw	r30, r24
     7b4:	25 87       	std	Z+13, r18	; 0x0d
     7b6:	be 01       	movw	r22, r28
     7b8:	2a d2       	rcall	.+1108   	; 0xc0e <_port_switch>
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <chSchIsPreemptionRequired>:
     7c0:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <ch>
     7c4:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <ch+0x1>
     7c8:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <ch+0xb>
     7cc:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <ch+0xc>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	2c 91       	ld	r18, X
     7d6:	94 81       	ldd	r25, Z+4	; 0x04
     7d8:	92 17       	cp	r25, r18
     7da:	08 f0       	brcs	.+2      	; 0x7de <chSchIsPreemptionRequired+0x1e>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret

000007e0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
  thread_t *otp = currp;
     7e4:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <ch+0xb>
     7e8:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     7ec:	40 91 da 02 	lds	r20, 0x02DA	; 0x8002da <ch>
     7f0:	50 91 db 02 	lds	r21, 0x02DB	; 0x8002db <ch+0x1>

  tqp->next             = tp->queue.next;
     7f4:	ea 01       	movw	r28, r20
     7f6:	e8 81       	ld	r30, Y
     7f8:	f9 81       	ldd	r31, Y+1	; 0x01
     7fa:	f0 93 db 02 	sts	0x02DB, r31	; 0x8002db <ch+0x1>
     7fe:	e0 93 da 02 	sts	0x02DA, r30	; 0x8002da <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     802:	8a ed       	ldi	r24, 0xDA	; 218
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	93 83       	std	Z+3, r25	; 0x03
     808:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     80a:	50 93 e6 02 	sts	0x02E6, r21	; 0x8002e6 <ch+0xc>
     80e:	40 93 e5 02 	sts	0x02E5, r20	; 0x8002e5 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     816:	1d 96       	adiw	r26, 0x0d	; 13
     818:	1c 92       	st	X, r1
     81a:	1d 97       	sbiw	r26, 0x0d	; 13
     81c:	14 96       	adiw	r26, 0x04	; 4
     81e:	2c 91       	ld	r18, X
     820:	14 97       	sbiw	r26, 0x04	; 4
     822:	03 c0       	rjmp	.+6      	; 0x82a <chSchDoReschedule+0x4a>
     824:	01 90       	ld	r0, Z+
     826:	f0 81       	ld	r31, Z
     828:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     82a:	94 81       	ldd	r25, Z+4	; 0x04
     82c:	29 17       	cp	r18, r25
     82e:	d0 f3       	brcs	.-12     	; 0x824 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	fc 93       	st	X, r31
     834:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	93 81       	ldd	r25, Z+3	; 0x03
     83a:	13 96       	adiw	r26, 0x03	; 3
     83c:	9c 93       	st	X, r25
     83e:	8e 93       	st	-X, r24
     840:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     842:	ec 01       	movw	r28, r24
     844:	b9 83       	std	Y+1, r27	; 0x01
     846:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     848:	b3 83       	std	Z+3, r27	; 0x03
     84a:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     84c:	bd 01       	movw	r22, r26
     84e:	ca 01       	movw	r24, r20
     850:	de d1       	rcall	.+956    	; 0xc0e <_port_switch>
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	fc 01       	movw	r30, r24
     85e:	44 83       	std	Z+4, r20	; 0x04
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	85 87       	std	Z+13, r24	; 0x0d
     864:	16 86       	std	Z+14, r1	; 0x0e
     866:	43 8f       	std	Z+27, r20	; 0x1b
     868:	12 8e       	std	Z+26, r1	; 0x1a
     86a:	11 8e       	std	Z+25, r1	; 0x19
     86c:	10 8e       	std	Z+24, r1	; 0x18
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	87 87       	std	Z+15, r24	; 0x0f
     872:	74 87       	std	Z+12, r23	; 0x0c
     874:	63 87       	std	Z+11, r22	; 0x0b
     876:	aa ed       	ldi	r26, 0xDA	; 218
     878:	b2 e0       	ldi	r27, 0x02	; 2
     87a:	b0 87       	std	Z+8, r27	; 0x08
     87c:	a7 83       	std	Z+7, r26	; 0x07
     87e:	19 96       	adiw	r26, 0x09	; 9
     880:	cd 91       	ld	r28, X+
     882:	dc 91       	ld	r29, X
     884:	1a 97       	sbiw	r26, 0x0a	; 10
     886:	d2 87       	std	Z+10, r29	; 0x0a
     888:	c1 87       	std	Z+9, r28	; 0x09
     88a:	f8 87       	std	Y+8, r31	; 0x08
     88c:	ef 83       	std	Y+7, r30	; 0x07
     88e:	1a 96       	adiw	r26, 0x0a	; 10
     890:	fc 93       	st	X, r31
     892:	ee 93       	st	-X, r30
     894:	19 97       	sbiw	r26, 0x09	; 9
     896:	cf 01       	movw	r24, r30
     898:	42 96       	adiw	r24, 0x12	; 18
     89a:	93 8b       	std	Z+19, r25	; 0x13
     89c:	82 8b       	std	Z+18, r24	; 0x12
     89e:	02 96       	adiw	r24, 0x02	; 2
     8a0:	95 8b       	std	Z+21, r25	; 0x15
     8a2:	84 8b       	std	Z+20, r24	; 0x14
     8a4:	97 8b       	std	Z+23, r25	; 0x17
     8a6:	86 8b       	std	Z+22, r24	; 0x16
     8a8:	cf 01       	movw	r24, r30
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <chThdCreateSuspendedI>:
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	4c 81       	ldd	r20, Y+4	; 0x04
     8b8:	5d 81       	ldd	r21, Y+5	; 0x05
     8ba:	fa 01       	movw	r30, r20
     8bc:	7c 97       	sbiw	r30, 0x1c	; 28
     8be:	ca 01       	movw	r24, r20
     8c0:	c1 97       	sbiw	r24, 0x31	; 49
     8c2:	96 83       	std	Z+6, r25	; 0x06
     8c4:	85 83       	std	Z+5, r24	; 0x05
     8c6:	2f 81       	ldd	r18, Y+7	; 0x07
     8c8:	dc 01       	movw	r26, r24
     8ca:	52 96       	adiw	r26, 0x12	; 18
     8cc:	2c 93       	st	X, r18
     8ce:	52 97       	sbiw	r26, 0x12	; 18
     8d0:	28 85       	ldd	r18, Y+8	; 0x08
     8d2:	51 96       	adiw	r26, 0x11	; 17
     8d4:	2c 93       	st	X, r18
     8d6:	51 97       	sbiw	r26, 0x11	; 17
     8d8:	29 85       	ldd	r18, Y+9	; 0x09
     8da:	50 96       	adiw	r26, 0x10	; 16
     8dc:	2c 93       	st	X, r18
     8de:	50 97       	sbiw	r26, 0x10	; 16
     8e0:	2a 85       	ldd	r18, Y+10	; 0x0a
     8e2:	1f 96       	adiw	r26, 0x0f	; 15
     8e4:	2c 93       	st	X, r18
     8e6:	1f 97       	sbiw	r26, 0x0f	; 15
     8e8:	26 e3       	ldi	r18, 0x36	; 54
     8ea:	36 e0       	ldi	r19, 0x06	; 6
     8ec:	53 96       	adiw	r26, 0x13	; 19
     8ee:	3c 93       	st	X, r19
     8f0:	53 97       	sbiw	r26, 0x13	; 19
     8f2:	54 96       	adiw	r26, 0x14	; 20
     8f4:	2c 93       	st	X, r18
     8f6:	8e 81       	ldd	r24, Y+6	; 0x06
     8f8:	28 81       	ld	r18, Y
     8fa:	39 81       	ldd	r19, Y+1	; 0x01
     8fc:	84 83       	std	Z+4, r24	; 0x04
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	95 87       	std	Z+13, r25	; 0x0d
     902:	16 86       	std	Z+14, r1	; 0x0e
     904:	83 8f       	std	Z+27, r24	; 0x1b
     906:	12 8e       	std	Z+26, r1	; 0x1a
     908:	11 8e       	std	Z+25, r1	; 0x19
     90a:	10 8e       	std	Z+24, r1	; 0x18
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	87 87       	std	Z+15, r24	; 0x0f
     910:	34 87       	std	Z+12, r19	; 0x0c
     912:	23 87       	std	Z+11, r18	; 0x0b
     914:	ca ed       	ldi	r28, 0xDA	; 218
     916:	d2 e0       	ldi	r29, 0x02	; 2
     918:	d0 87       	std	Z+8, r29	; 0x08
     91a:	c7 83       	std	Z+7, r28	; 0x07
     91c:	89 85       	ldd	r24, Y+9	; 0x09
     91e:	9a 85       	ldd	r25, Y+10	; 0x0a
     920:	92 87       	std	Z+10, r25	; 0x0a
     922:	81 87       	std	Z+9, r24	; 0x09
     924:	dc 01       	movw	r26, r24
     926:	18 96       	adiw	r26, 0x08	; 8
     928:	fc 93       	st	X, r31
     92a:	ee 93       	st	-X, r30
     92c:	17 97       	sbiw	r26, 0x07	; 7
     92e:	fa 87       	std	Y+10, r31	; 0x0a
     930:	e9 87       	std	Y+9, r30	; 0x09
     932:	ea 01       	movw	r28, r20
     934:	2a 97       	sbiw	r28, 0x0a	; 10
     936:	d9 83       	std	Y+1, r29	; 0x01
     938:	c8 83       	st	Y, r28
     93a:	da 01       	movw	r26, r20
     93c:	18 97       	sbiw	r26, 0x08	; 8
     93e:	0b 2e       	mov	r0, r27
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	0c 92       	st	X, r0
     944:	11 97       	sbiw	r26, 0x01	; 1
     946:	ac 93       	st	X, r26
     948:	0a 2e       	mov	r0, r26
     94a:	1b 2e       	mov	r1, r27
     94c:	13 96       	adiw	r26, 0x03	; 3
     94e:	1c 92       	st	X, r1
     950:	0e 92       	st	-X, r0
     952:	11 24       	eor	r1, r1
     954:	12 97       	sbiw	r26, 0x02	; 2
     956:	cf 01       	movw	r24, r30
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <chThdCreate>:
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	f8 94       	cli
     964:	a5 df       	rcall	.-182    	; 0x8b0 <chThdCreateSuspendedI>
     966:	ec 01       	movw	r28, r24
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	dd de       	rcall	.-582    	; 0x728 <chSchWakeupS>
     96e:	78 94       	sei
     970:	ce 01       	movw	r24, r28
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <chThdCreateStatic>:
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	f8 94       	cli
     982:	6c 51       	subi	r22, 0x1C	; 28
     984:	71 09       	sbc	r23, r1
     986:	ec 01       	movw	r28, r24
     988:	c6 0f       	add	r28, r22
     98a:	d7 1f       	adc	r29, r23
     98c:	fe 01       	movw	r30, r28
     98e:	75 97       	sbiw	r30, 0x15	; 21
     990:	fe 83       	std	Y+6, r31	; 0x06
     992:	ed 83       	std	Y+5, r30	; 0x05
     994:	22 8b       	std	Z+18, r18	; 0x12
     996:	31 8b       	std	Z+17, r19	; 0x11
     998:	00 8b       	std	Z+16, r16	; 0x10
     99a:	17 87       	std	Z+15, r17	; 0x0f
     99c:	86 e3       	ldi	r24, 0x36	; 54
     99e:	96 e0       	ldi	r25, 0x06	; 6
     9a0:	93 8b       	std	Z+19, r25	; 0x13
     9a2:	84 8b       	std	Z+20, r24	; 0x14
     9a4:	4c 83       	std	Y+4, r20	; 0x04
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	8d 87       	std	Y+13, r24	; 0x0d
     9aa:	1e 86       	std	Y+14, r1	; 0x0e
     9ac:	4b 8f       	std	Y+27, r20	; 0x1b
     9ae:	1a 8e       	std	Y+26, r1	; 0x1a
     9b0:	19 8e       	std	Y+25, r1	; 0x19
     9b2:	18 8e       	std	Y+24, r1	; 0x18
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	8f 87       	std	Y+15, r24	; 0x0f
     9b8:	80 e1       	ldi	r24, 0x10	; 16
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	9c 87       	std	Y+12, r25	; 0x0c
     9be:	8b 87       	std	Y+11, r24	; 0x0b
     9c0:	ea ed       	ldi	r30, 0xDA	; 218
     9c2:	f2 e0       	ldi	r31, 0x02	; 2
     9c4:	f8 87       	std	Y+8, r31	; 0x08
     9c6:	ef 83       	std	Y+7, r30	; 0x07
     9c8:	a1 85       	ldd	r26, Z+9	; 0x09
     9ca:	b2 85       	ldd	r27, Z+10	; 0x0a
     9cc:	ba 87       	std	Y+10, r27	; 0x0a
     9ce:	a9 87       	std	Y+9, r26	; 0x09
     9d0:	18 96       	adiw	r26, 0x08	; 8
     9d2:	dc 93       	st	X, r29
     9d4:	ce 93       	st	-X, r28
     9d6:	17 97       	sbiw	r26, 0x07	; 7
     9d8:	d2 87       	std	Z+10, r29	; 0x0a
     9da:	c1 87       	std	Z+9, r28	; 0x09
     9dc:	ce 01       	movw	r24, r28
     9de:	42 96       	adiw	r24, 0x12	; 18
     9e0:	9b 8b       	std	Y+19, r25	; 0x13
     9e2:	8a 8b       	std	Y+18, r24	; 0x12
     9e4:	02 96       	adiw	r24, 0x02	; 2
     9e6:	9d 8b       	std	Y+21, r25	; 0x15
     9e8:	8c 8b       	std	Y+20, r24	; 0x14
     9ea:	9f 8b       	std	Y+23, r25	; 0x17
     9ec:	8e 8b       	std	Y+22, r24	; 0x16
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	ce 01       	movw	r24, r28
     9f4:	99 de       	rcall	.-718    	; 0x728 <chSchWakeupS>
     9f6:	78 94       	sei
     9f8:	ce 01       	movw	r24, r28
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <chThdExitS>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	c0 91 e5 02 	lds	r28, 0x02E5	; 0x8002e5 <ch+0xb>
     a10:	d0 91 e6 02 	lds	r29, 0x02E6	; 0x8002e6 <ch+0xc>
     a14:	99 8b       	std	Y+17, r25	; 0x11
     a16:	88 8b       	std	Y+16, r24	; 0x10
     a18:	8e 01       	movw	r16, r28
     a1a:	0e 5e       	subi	r16, 0xEE	; 238
     a1c:	1f 4f       	sbci	r17, 0xFF	; 255
     a1e:	8a 89       	ldd	r24, Y+18	; 0x12
     a20:	9b 89       	ldd	r25, Y+19	; 0x13
     a22:	08 17       	cp	r16, r24
     a24:	19 07       	cpc	r17, r25
     a26:	59 f0       	breq	.+22     	; 0xa3e <chThdExitS+0x3a>
     a28:	fc 01       	movw	r30, r24
     a2a:	20 81       	ld	r18, Z
     a2c:	31 81       	ldd	r19, Z+1	; 0x01
     a2e:	3b 8b       	std	Y+19, r19	; 0x13
     a30:	2a 8b       	std	Y+18, r18	; 0x12
     a32:	07 de       	rcall	.-1010   	; 0x642 <chSchReadyI>
     a34:	8a 89       	ldd	r24, Y+18	; 0x12
     a36:	9b 89       	ldd	r25, Y+19	; 0x13
     a38:	80 17       	cp	r24, r16
     a3a:	91 07       	cpc	r25, r17
     a3c:	a9 f7       	brne	.-22     	; 0xa28 <chThdExitS+0x24>
     a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a40:	81 11       	cpse	r24, r1
     a42:	0c c0       	rjmp	.+24     	; 0xa5c <chThdExitS+0x58>
     a44:	e9 85       	ldd	r30, Y+9	; 0x09
     a46:	fa 85       	ldd	r31, Y+10	; 0x0a
     a48:	8f 81       	ldd	r24, Y+7	; 0x07
     a4a:	98 85       	ldd	r25, Y+8	; 0x08
     a4c:	90 87       	std	Z+8, r25	; 0x08
     a4e:	87 83       	std	Z+7, r24	; 0x07
     a50:	af 81       	ldd	r26, Y+7	; 0x07
     a52:	b8 85       	ldd	r27, Y+8	; 0x08
     a54:	1a 96       	adiw	r26, 0x0a	; 10
     a56:	fc 93       	st	X, r31
     a58:	ee 93       	st	-X, r30
     a5a:	19 97       	sbiw	r26, 0x09	; 9
     a5c:	8f e0       	ldi	r24, 0x0F	; 15
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	0f ce       	rjmp	.-994    	; 0x686 <chSchGoSleepS>

00000a68 <chThdExit>:
     a68:	f8 94       	cli
     a6a:	cc cf       	rjmp	.-104    	; 0xa04 <chThdExitS>

00000a6c <chThdSleep>:
     a6c:	f8 94       	cli
     a6e:	bc 01       	movw	r22, r24
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	25 de       	rcall	.-950    	; 0x6be <chSchGoSleepTimeoutS>
     a74:	78 94       	sei
     a76:	08 95       	ret

00000a78 <chThdResumeI>:
     a78:	dc 01       	movw	r26, r24
     a7a:	ed 91       	ld	r30, X+
     a7c:	fc 91       	ld	r31, X
     a7e:	11 97       	sbiw	r26, 0x01	; 1
     a80:	30 97       	sbiw	r30, 0x00	; 0
     a82:	31 f0       	breq	.+12     	; 0xa90 <chThdResumeI+0x18>
     a84:	1d 92       	st	X+, r1
     a86:	1c 92       	st	X, r1
     a88:	71 8b       	std	Z+17, r23	; 0x11
     a8a:	60 8b       	std	Z+16, r22	; 0x10
     a8c:	cf 01       	movw	r24, r30
     a8e:	d9 cd       	rjmp	.-1102   	; 0x642 <chSchReadyI>
     a90:	08 95       	ret

00000a92 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     a96:	61 15       	cp	r22, r1
     a98:	71 05       	cpc	r23, r1
     a9a:	99 f0       	breq	.+38     	; 0xac2 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     a9c:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <ch+0xb>
     aa0:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     aa8:	ec 01       	movw	r28, r24
     aaa:	aa 81       	ldd	r26, Y+2	; 0x02
     aac:	bb 81       	ldd	r27, Y+3	; 0x03
     aae:	b3 83       	std	Z+3, r27	; 0x03
     ab0:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     ab2:	ed 93       	st	X+, r30
     ab4:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     ab6:	fb 83       	std	Y+3, r31	; 0x03
     ab8:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     aba:	84 e0       	ldi	r24, 0x04	; 4
}
     abc:	df 91       	pop	r29
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     abe:	cf 91       	pop	r28
}
     ac0:	fe cd       	rjmp	.-1028   	; 0x6be <chSchGoSleepTimeoutS>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     ad6:	e8 17       	cp	r30, r24
     ad8:	f9 07       	cpc	r31, r25
     ada:	71 f0       	breq	.+28     	; 0xaf8 <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     adc:	ec 01       	movw	r28, r24
     ade:	a8 81       	ld	r26, Y
     ae0:	b9 81       	ldd	r27, Y+1	; 0x01
     ae2:	b1 83       	std	Z+1, r27	; 0x01
     ae4:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     ae6:	13 96       	adiw	r26, 0x03	; 3
     ae8:	fc 93       	st	X, r31
     aea:	ee 93       	st	-X, r30
     aec:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     aee:	79 8b       	std	Y+17, r23	; 0x11
     af0:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     af2:	df 91       	pop	r29
  (void) chSchReadyI(tp);
     af4:	cf 91       	pop	r28
     af6:	a5 cd       	rjmp	.-1206   	; 0x642 <chSchReadyI>
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     afe:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     b04:	93 83       	std	Z+3, r25	; 0x03
     b06:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     b08:	15 82       	std	Z+5, r1	; 0x05
     b0a:	14 82       	std	Z+4, r1	; 0x04
     b0c:	08 95       	ret

00000b0e <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     b0e:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     b10:	90 8d       	ldd	r25, Z+24	; 0x18
     b12:	69 2b       	or	r22, r25
     b14:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     b16:	85 85       	ldd	r24, Z+13	; 0x0d
     b18:	8a 30       	cpi	r24, 0x0A	; 10
     b1a:	59 f0       	breq	.+22     	; 0xb32 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     b1c:	8b 30       	cpi	r24, 0x0B	; 11
     b1e:	09 f0       	breq	.+2      	; 0xb22 <chEvtSignalI+0x14>
     b20:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     b22:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     b24:	68 23       	and	r22, r24
     b26:	86 13       	cpse	r24, r22
     b28:	fb cf       	rjmp	.-10     	; 0xb20 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     b2a:	11 8a       	std	Z+17, r1	; 0x11
     b2c:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     b2e:	cf 01       	movw	r24, r30
     b30:	88 cd       	rjmp	.-1264   	; 0x642 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     b32:	80 89       	ldd	r24, Z+16	; 0x10
     b34:	68 23       	and	r22, r24
     b36:	c9 f7       	brne	.-14     	; 0xb2a <chEvtSignalI+0x1c>
     b38:	08 95       	ret

00000b3a <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	7c 01       	movw	r14, r24
     b46:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     b48:	fc 01       	movw	r30, r24
     b4a:	c0 81       	ld	r28, Z
     b4c:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     b4e:	8c 17       	cp	r24, r28
     b50:	9d 07       	cpc	r25, r29
     b52:	91 f0       	breq	.+36     	; 0xb78 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     b54:	8d 81       	ldd	r24, Y+5	; 0x05
     b56:	81 2b       	or	r24, r17
     b58:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     b5a:	11 23       	and	r17, r17
     b5c:	19 f0       	breq	.+6      	; 0xb64 <chEvtBroadcastFlagsI+0x2a>
     b5e:	8e 81       	ldd	r24, Y+6	; 0x06
     b60:	81 23       	and	r24, r17
     b62:	21 f0       	breq	.+8      	; 0xb6c <chEvtBroadcastFlagsI+0x32>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     b64:	6c 81       	ldd	r22, Y+4	; 0x04
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	9b 81       	ldd	r25, Y+3	; 0x03
     b6a:	d1 df       	rcall	.-94     	; 0xb0e <chEvtSignalI>
    }
    elp = elp->next;
     b6c:	09 90       	ld	r0, Y+
     b6e:	d8 81       	ld	r29, Y
     b70:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     b72:	ec 16       	cp	r14, r28
     b74:	fd 06       	cpc	r15, r29
     b76:	71 f7       	brne	.-36     	; 0xb54 <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	08 95       	ret

00000b84 <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     b84:	ed e0       	ldi	r30, 0x0D	; 13
     b86:	f3 e0       	ldi	r31, 0x03	; 3
     b88:	82 e6       	ldi	r24, 0x62	; 98
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	82 ee       	ldi	r24, 0xE2	; 226
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	93 83       	std	Z+3, r25	; 0x03
     b96:	82 83       	std	Z+2, r24	; 0x02
     b98:	08 95       	ret

00000b9a <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     b9a:	f8 94       	cli
     b9c:	9b 01       	movw	r18, r22
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	31 09       	sbc	r19, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     ba2:	71 95       	neg	r23
     ba4:	61 95       	neg	r22
     ba6:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     ba8:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <ch_memcore>
     bac:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <ch_memcore+0x1>
     bb0:	4e 0f       	add	r20, r30
     bb2:	5f 1f       	adc	r21, r31
     bb4:	42 0f       	add	r20, r18
     bb6:	53 1f       	adc	r21, r19
     bb8:	46 23       	and	r20, r22
     bba:	57 23       	and	r21, r23
  next = p + size;
     bbc:	82 0f       	add	r24, r18
     bbe:	93 1f       	adc	r25, r19
     bc0:	68 23       	and	r22, r24
     bc2:	79 23       	and	r23, r25
     bc4:	ca 01       	movw	r24, r20
     bc6:	86 0f       	add	r24, r22
     bc8:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     bca:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <ch_memcore+0x2>
     bce:	30 91 10 03 	lds	r19, 0x0310	; 0x800310 <ch_memcore+0x3>
     bd2:	28 17       	cp	r18, r24
     bd4:	39 07       	cpc	r19, r25
     bd6:	50 f0       	brcs	.+20     	; 0xbec <chCoreAllocAlignedWithOffset+0x52>
     bd8:	8e 17       	cp	r24, r30
     bda:	9f 07       	cpc	r25, r31
     bdc:	38 f0       	brcs	.+14     	; 0xbec <chCoreAllocAlignedWithOffset+0x52>
    return NULL;
  }

  ch_memcore.nextmem = next;
     bde:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <ch_memcore+0x1>
     be2:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <ch_memcore>

  return p;
     be6:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     be8:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     bea:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     bf2:	08 95       	ret

00000bf4 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     bf4:	e2 ee       	ldi	r30, 0xE2	; 226
     bf6:	f1 e0       	ldi	r31, 0x01	; 1
     bf8:	8d ec       	ldi	r24, 0xCD	; 205
     bfa:	95 e0       	ldi	r25, 0x05	; 5
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     c00:	13 82       	std	Z+3, r1	; 0x03
     c02:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     c04:	15 82       	std	Z+5, r1	; 0x05
     c06:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     c08:	88 ee       	ldi	r24, 0xE8	; 232
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	78 cf       	rjmp	.-272    	; 0xafe <chMtxObjectInit>

00000c0e <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     c0e:	2f 92       	push	r2
  asm volatile ("push    r3");
     c10:	3f 92       	push	r3
  asm volatile ("push    r4");
     c12:	4f 92       	push	r4
  asm volatile ("push    r5");
     c14:	5f 92       	push	r5
  asm volatile ("push    r6");
     c16:	6f 92       	push	r6
  asm volatile ("push    r7");
     c18:	7f 92       	push	r7
  asm volatile ("push    r8");
     c1a:	8f 92       	push	r8
  asm volatile ("push    r9");
     c1c:	9f 92       	push	r9
  asm volatile ("push    r10");
     c1e:	af 92       	push	r10
  asm volatile ("push    r11");
     c20:	bf 92       	push	r11
  asm volatile ("push    r12");
     c22:	cf 92       	push	r12
  asm volatile ("push    r13");
     c24:	df 92       	push	r13
  asm volatile ("push    r14");
     c26:	ef 92       	push	r14
  asm volatile ("push    r15");
     c28:	ff 92       	push	r15
  asm volatile ("push    r16");
     c2a:	0f 93       	push	r16
  asm volatile ("push    r17");
     c2c:	1f 93       	push	r17
  asm volatile ("push    r28");
     c2e:	cf 93       	push	r28
  asm volatile ("push    r29");
     c30:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     c32:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     c34:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     c36:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     c38:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     c3a:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     c3c:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     c3e:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     c40:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     c42:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     c44:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     c46:	df 91       	pop	r29
  asm volatile ("pop     r28");
     c48:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     c4a:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     c4c:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     c4e:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     c50:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     c52:	df 90       	pop	r13
  asm volatile ("pop     r12");
     c54:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     c56:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     c58:	af 90       	pop	r10
  asm volatile ("pop     r9");
     c5a:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     c5c:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     c5e:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     c60:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     c62:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     c64:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     c66:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     c68:	2f 90       	pop	r2
  asm volatile ("ret");
     c6a:	08 95       	ret

00000c6c <_port_thread_start>:
     c6c:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     c6e:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     c70:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     c72:	09 95       	icall
     c74:	f9 ce       	rjmp	.-526    	; 0xa68 <chThdExit>

00000c76 <halInit>:
     c76:	02 d3       	rcall	.+1540   	; 0x127c <hal_lld_init>
     c78:	84 e4       	ldi	r24, 0x44	; 68
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	00 d3       	rcall	.+1536   	; 0x127e <_pal_lld_init>
     c7e:	66 d2       	rcall	.+1228   	; 0x114c <i2cInit>
     c80:	88 d2       	rcall	.+1296   	; 0x1192 <sdInit>
     c82:	c4 d5       	rcall	.+2952   	; 0x180c <boardInit>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <stInit>

00000c86 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
     c86:	f5 c4       	rjmp	.+2538   	; 0x1672 <st_lld_init>

00000c88 <stStartAlarm>:
     c88:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c8c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	86 bb       	out	0x16, r24	; 22
     c94:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     c98:	08 95       	ret

00000c9a <stStopAlarm>:
     c9a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     c9e:	08 95       	ret

00000ca0 <stSetAlarm>:
     ca0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ca4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ca8:	08 95       	ret

00000caa <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     caa:	af 92       	push	r10
     cac:	bf 92       	push	r11
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
     cc0:	6b 01       	movw	r12, r22
     cc2:	8a 01       	movw	r16, r20
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	84 17       	cp	r24, r20
     cca:	95 07       	cpc	r25, r21
     ccc:	10 f4       	brcc	.+4      	; 0xcd2 <iq_read+0x28>
     cce:	0c 81       	ldd	r16, Y+4	; 0x04
     cd0:	1d 81       	ldd	r17, Y+5	; 0x05
     cd2:	6c 85       	ldd	r22, Y+12	; 0x0c
     cd4:	7d 85       	ldd	r23, Y+13	; 0x0d
     cd6:	e8 84       	ldd	r14, Y+8	; 0x08
     cd8:	f9 84       	ldd	r15, Y+9	; 0x09
     cda:	e6 1a       	sub	r14, r22
     cdc:	f7 0a       	sbc	r15, r23
     cde:	0e 15       	cp	r16, r14
     ce0:	1f 05       	cpc	r17, r15
     ce2:	98 f1       	brcs	.+102    	; 0xd4a <iq_read+0xa0>
     ce4:	e0 16       	cp	r14, r16
     ce6:	f1 06       	cpc	r15, r17
     ce8:	d0 f0       	brcs	.+52     	; 0xd1e <iq_read+0x74>
     cea:	a8 01       	movw	r20, r16
     cec:	c6 01       	movw	r24, r12
     cee:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	9f 81       	ldd	r25, Y+7	; 0x07
     cf6:	9d 87       	std	Y+13, r25	; 0x0d
     cf8:	8c 87       	std	Y+12, r24	; 0x0c
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	80 1b       	sub	r24, r16
     d00:	91 0b       	sbc	r25, r17
     d02:	9d 83       	std	Y+5, r25	; 0x05
     d04:	8c 83       	std	Y+4, r24	; 0x04
     d06:	c8 01       	movw	r24, r16
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	08 95       	ret
     d1e:	a7 01       	movw	r20, r14
     d20:	c6 01       	movw	r24, r12
     d22:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     d26:	58 01       	movw	r10, r16
     d28:	ae 18       	sub	r10, r14
     d2a:	bf 08       	sbc	r11, r15
     d2c:	6e 81       	ldd	r22, Y+6	; 0x06
     d2e:	7f 81       	ldd	r23, Y+7	; 0x07
     d30:	a5 01       	movw	r20, r10
     d32:	c6 01       	movw	r24, r12
     d34:	8e 0d       	add	r24, r14
     d36:	9f 1d       	adc	r25, r15
     d38:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     d3c:	8e 81       	ldd	r24, Y+6	; 0x06
     d3e:	9f 81       	ldd	r25, Y+7	; 0x07
     d40:	a8 0e       	add	r10, r24
     d42:	b9 1e       	adc	r11, r25
     d44:	bd 86       	std	Y+13, r11	; 0x0d
     d46:	ac 86       	std	Y+12, r10	; 0x0c
     d48:	d8 cf       	rjmp	.-80     	; 0xcfa <iq_read+0x50>
     d4a:	a8 01       	movw	r20, r16
     d4c:	c6 01       	movw	r24, r12
     d4e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     d52:	8c 85       	ldd	r24, Y+12	; 0x0c
     d54:	9d 85       	ldd	r25, Y+13	; 0x0d
     d56:	80 0f       	add	r24, r16
     d58:	91 1f       	adc	r25, r17
     d5a:	9d 87       	std	Y+13, r25	; 0x0d
     d5c:	8c 87       	std	Y+12, r24	; 0x0c
     d5e:	cd cf       	rjmp	.-102    	; 0xcfa <iq_read+0x50>

00000d60 <oq_write>:
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	6b 01       	movw	r12, r22
     d78:	8a 01       	movw	r16, r20
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	84 17       	cp	r24, r20
     d80:	95 07       	cpc	r25, r21
     d82:	10 f4       	brcc	.+4      	; 0xd88 <oq_write+0x28>
     d84:	0c 81       	ldd	r16, Y+4	; 0x04
     d86:	1d 81       	ldd	r17, Y+5	; 0x05
     d88:	8a 85       	ldd	r24, Y+10	; 0x0a
     d8a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d8c:	e8 84       	ldd	r14, Y+8	; 0x08
     d8e:	f9 84       	ldd	r15, Y+9	; 0x09
     d90:	e8 1a       	sub	r14, r24
     d92:	f9 0a       	sbc	r15, r25
     d94:	0e 15       	cp	r16, r14
     d96:	1f 05       	cpc	r17, r15
     d98:	98 f1       	brcs	.+102    	; 0xe00 <oq_write+0xa0>
     d9a:	e0 16       	cp	r14, r16
     d9c:	f1 06       	cpc	r15, r17
     d9e:	d0 f0       	brcs	.+52     	; 0xdd4 <oq_write+0x74>
     da0:	a8 01       	movw	r20, r16
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     da8:	8e 81       	ldd	r24, Y+6	; 0x06
     daa:	9f 81       	ldd	r25, Y+7	; 0x07
     dac:	9b 87       	std	Y+11, r25	; 0x0b
     dae:	8a 87       	std	Y+10, r24	; 0x0a
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	80 1b       	sub	r24, r16
     db6:	91 0b       	sbc	r25, r17
     db8:	9d 83       	std	Y+5, r25	; 0x05
     dba:	8c 83       	std	Y+4, r24	; 0x04
     dbc:	c8 01       	movw	r24, r16
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	08 95       	ret
     dd4:	a7 01       	movw	r20, r14
     dd6:	b6 01       	movw	r22, r12
     dd8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     ddc:	58 01       	movw	r10, r16
     dde:	ae 18       	sub	r10, r14
     de0:	bf 08       	sbc	r11, r15
     de2:	b6 01       	movw	r22, r12
     de4:	6e 0d       	add	r22, r14
     de6:	7f 1d       	adc	r23, r15
     de8:	a5 01       	movw	r20, r10
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     df2:	8e 81       	ldd	r24, Y+6	; 0x06
     df4:	9f 81       	ldd	r25, Y+7	; 0x07
     df6:	a8 0e       	add	r10, r24
     df8:	b9 1e       	adc	r11, r25
     dfa:	bb 86       	std	Y+11, r11	; 0x0b
     dfc:	aa 86       	std	Y+10, r10	; 0x0a
     dfe:	d8 cf       	rjmp	.-80     	; 0xdb0 <oq_write+0x50>
     e00:	a8 01       	movw	r20, r16
     e02:	b6 01       	movw	r22, r12
     e04:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <memcpy>
     e08:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0c:	80 0f       	add	r24, r16
     e0e:	91 1f       	adc	r25, r17
     e10:	9b 87       	std	Y+11, r25	; 0x0b
     e12:	8a 87       	std	Y+10, r24	; 0x0a
     e14:	cd cf       	rjmp	.-102    	; 0xdb0 <oq_write+0x50>

00000e16 <iqObjectInit>:
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	fc 01       	movw	r30, r24
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
     e20:	93 83       	std	Z+3, r25	; 0x03
     e22:	82 83       	std	Z+2, r24	; 0x02
     e24:	15 82       	std	Z+5, r1	; 0x05
     e26:	14 82       	std	Z+4, r1	; 0x04
     e28:	77 83       	std	Z+7, r23	; 0x07
     e2a:	66 83       	std	Z+6, r22	; 0x06
     e2c:	75 87       	std	Z+13, r23	; 0x0d
     e2e:	64 87       	std	Z+12, r22	; 0x0c
     e30:	73 87       	std	Z+11, r23	; 0x0b
     e32:	62 87       	std	Z+10, r22	; 0x0a
     e34:	64 0f       	add	r22, r20
     e36:	75 1f       	adc	r23, r21
     e38:	71 87       	std	Z+9, r23	; 0x09
     e3a:	60 87       	std	Z+8, r22	; 0x08
     e3c:	37 87       	std	Z+15, r19	; 0x0f
     e3e:	26 87       	std	Z+14, r18	; 0x0e
     e40:	11 8b       	std	Z+17, r17	; 0x11
     e42:	00 8b       	std	Z+16, r16	; 0x10
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <iqPutI>:
     e4a:	fc 01       	movw	r30, r24
     e4c:	a2 85       	ldd	r26, Z+10	; 0x0a
     e4e:	b3 85       	ldd	r27, Z+11	; 0x0b
     e50:	84 85       	ldd	r24, Z+12	; 0x0c
     e52:	95 85       	ldd	r25, Z+13	; 0x0d
     e54:	a8 17       	cp	r26, r24
     e56:	b9 07       	cpc	r27, r25
     e58:	e1 f0       	breq	.+56     	; 0xe92 <iqPutI+0x48>
     e5a:	84 81       	ldd	r24, Z+4	; 0x04
     e5c:	95 81       	ldd	r25, Z+5	; 0x05
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	95 83       	std	Z+5, r25	; 0x05
     e62:	84 83       	std	Z+4, r24	; 0x04
     e64:	cd 01       	movw	r24, r26
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	93 87       	std	Z+11, r25	; 0x0b
     e6a:	82 87       	std	Z+10, r24	; 0x0a
     e6c:	6c 93       	st	X, r22
     e6e:	22 85       	ldd	r18, Z+10	; 0x0a
     e70:	33 85       	ldd	r19, Z+11	; 0x0b
     e72:	80 85       	ldd	r24, Z+8	; 0x08
     e74:	91 85       	ldd	r25, Z+9	; 0x09
     e76:	28 17       	cp	r18, r24
     e78:	39 07       	cpc	r19, r25
     e7a:	20 f0       	brcs	.+8      	; 0xe84 <iqPutI+0x3a>
     e7c:	86 81       	ldd	r24, Z+6	; 0x06
     e7e:	97 81       	ldd	r25, Z+7	; 0x07
     e80:	93 87       	std	Z+11, r25	; 0x0b
     e82:	82 87       	std	Z+10, r24	; 0x0a
     e84:	cf 01       	movw	r24, r30
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	20 de       	rcall	.-960    	; 0xacc <chThdDequeueNextI>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	08 95       	ret
     e92:	84 81       	ldd	r24, Z+4	; 0x04
     e94:	95 81       	ldd	r25, Z+5	; 0x05
     e96:	89 2b       	or	r24, r25
     e98:	01 f3       	breq	.-64     	; 0xe5a <iqPutI+0x10>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	9f ef       	ldi	r25, 0xFF	; 255
     e9e:	08 95       	ret

00000ea0 <iqGetTimeout>:
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ec 01       	movw	r28, r24
     eaa:	8b 01       	movw	r16, r22
     eac:	f8 94       	cli
     eae:	05 c0       	rjmp	.+10     	; 0xeba <iqGetTimeout+0x1a>
     eb0:	b8 01       	movw	r22, r16
     eb2:	ce 01       	movw	r24, r28
     eb4:	ee dd       	rcall	.-1060   	; 0xa92 <chThdEnqueueTimeoutS>
     eb6:	97 fd       	sbrc	r25, 7
     eb8:	27 c0       	rjmp	.+78     	; 0xf08 <iqGetTimeout+0x68>
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	89 2b       	or	r24, r25
     ec0:	b9 f3       	breq	.-18     	; 0xeb0 <iqGetTimeout+0x10>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	9d 83       	std	Y+5, r25	; 0x05
     eca:	8c 83       	std	Y+4, r24	; 0x04
     ecc:	ec 85       	ldd	r30, Y+12	; 0x0c
     ece:	fd 85       	ldd	r31, Y+13	; 0x0d
     ed0:	cf 01       	movw	r24, r30
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	9d 87       	std	Y+13, r25	; 0x0d
     ed6:	8c 87       	std	Y+12, r24	; 0x0c
     ed8:	10 81       	ld	r17, Z
     eda:	28 85       	ldd	r18, Y+8	; 0x08
     edc:	39 85       	ldd	r19, Y+9	; 0x09
     ede:	82 17       	cp	r24, r18
     ee0:	93 07       	cpc	r25, r19
     ee2:	20 f0       	brcs	.+8      	; 0xeec <iqGetTimeout+0x4c>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	9d 87       	std	Y+13, r25	; 0x0d
     eea:	8c 87       	std	Y+12, r24	; 0x0c
     eec:	ee 85       	ldd	r30, Y+14	; 0x0e
     eee:	ff 85       	ldd	r31, Y+15	; 0x0f
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	11 f0       	breq	.+4      	; 0xef8 <iqGetTimeout+0x58>
     ef4:	ce 01       	movw	r24, r28
     ef6:	09 95       	icall
     ef8:	78 94       	sei
     efa:	81 2f       	mov	r24, r17
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret
     f08:	78 94       	sei
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <iqReadTimeout>:
     f14:	6f 92       	push	r6
     f16:	7f 92       	push	r7
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	af 92       	push	r10
     f1e:	bf 92       	push	r11
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	6c 01       	movw	r12, r24
     f32:	7b 01       	movw	r14, r22
     f34:	3a 01       	movw	r6, r20
     f36:	49 01       	movw	r8, r18
     f38:	fc 01       	movw	r30, r24
     f3a:	a6 84       	ldd	r10, Z+14	; 0x0e
     f3c:	b7 84       	ldd	r11, Z+15	; 0x0f
     f3e:	f8 94       	cli
     f40:	41 15       	cp	r20, r1
     f42:	51 05       	cpc	r21, r1
     f44:	b9 f0       	breq	.+46     	; 0xf74 <iqReadTimeout+0x60>
     f46:	8a 01       	movw	r16, r20
     f48:	a8 01       	movw	r20, r16
     f4a:	b7 01       	movw	r22, r14
     f4c:	c6 01       	movw	r24, r12
     f4e:	ad de       	rcall	.-678    	; 0xcaa <iq_read>
     f50:	ec 01       	movw	r28, r24
     f52:	89 2b       	or	r24, r25
     f54:	21 f1       	breq	.+72     	; 0xf9e <iqReadTimeout+0x8a>
     f56:	a1 14       	cp	r10, r1
     f58:	b1 04       	cpc	r11, r1
     f5a:	19 f0       	breq	.+6      	; 0xf62 <iqReadTimeout+0x4e>
     f5c:	c6 01       	movw	r24, r12
     f5e:	f5 01       	movw	r30, r10
     f60:	09 95       	icall
     f62:	78 94       	sei
     f64:	0c 1b       	sub	r16, r28
     f66:	1d 0b       	sbc	r17, r29
     f68:	ec 0e       	add	r14, r28
     f6a:	fd 1e       	adc	r15, r29
     f6c:	f8 94       	cli
     f6e:	01 15       	cp	r16, r1
     f70:	11 05       	cpc	r17, r1
     f72:	51 f7       	brne	.-44     	; 0xf48 <iqReadTimeout+0x34>
     f74:	00 e0       	ldi	r16, 0x00	; 0
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	78 94       	sei
     f7a:	c3 01       	movw	r24, r6
     f7c:	80 1b       	sub	r24, r16
     f7e:	91 0b       	sbc	r25, r17
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	9f 90       	pop	r9
     f96:	8f 90       	pop	r8
     f98:	7f 90       	pop	r7
     f9a:	6f 90       	pop	r6
     f9c:	08 95       	ret
     f9e:	b4 01       	movw	r22, r8
     fa0:	c6 01       	movw	r24, r12
     fa2:	77 dd       	rcall	.-1298   	; 0xa92 <chThdEnqueueTimeoutS>
     fa4:	89 2b       	or	r24, r25
     fa6:	81 f2       	breq	.-96     	; 0xf48 <iqReadTimeout+0x34>
     fa8:	e7 cf       	rjmp	.-50     	; 0xf78 <iqReadTimeout+0x64>

00000faa <oqObjectInit>:
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	fc 01       	movw	r30, r24
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	93 83       	std	Z+3, r25	; 0x03
     fb6:	82 83       	std	Z+2, r24	; 0x02
     fb8:	55 83       	std	Z+5, r21	; 0x05
     fba:	44 83       	std	Z+4, r20	; 0x04
     fbc:	77 83       	std	Z+7, r23	; 0x07
     fbe:	66 83       	std	Z+6, r22	; 0x06
     fc0:	75 87       	std	Z+13, r23	; 0x0d
     fc2:	64 87       	std	Z+12, r22	; 0x0c
     fc4:	73 87       	std	Z+11, r23	; 0x0b
     fc6:	62 87       	std	Z+10, r22	; 0x0a
     fc8:	46 0f       	add	r20, r22
     fca:	57 1f       	adc	r21, r23
     fcc:	51 87       	std	Z+9, r21	; 0x09
     fce:	40 87       	std	Z+8, r20	; 0x08
     fd0:	37 87       	std	Z+15, r19	; 0x0f
     fd2:	26 87       	std	Z+14, r18	; 0x0e
     fd4:	11 8b       	std	Z+17, r17	; 0x11
     fd6:	00 8b       	std	Z+16, r16	; 0x10
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <oqPutTimeout>:
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ec 01       	movw	r28, r24
     fea:	f6 2e       	mov	r15, r22
     fec:	8a 01       	movw	r16, r20
     fee:	f8 94       	cli
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <oqPutTimeout+0x1e>
     ff2:	b8 01       	movw	r22, r16
     ff4:	ce 01       	movw	r24, r28
     ff6:	4d dd       	rcall	.-1382   	; 0xa92 <chThdEnqueueTimeoutS>
     ff8:	97 fd       	sbrc	r25, 7
     ffa:	2a c0       	rjmp	.+84     	; 0x1050 <oqPutTimeout+0x72>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	89 2b       	or	r24, r25
    1002:	b9 f3       	breq	.-18     	; 0xff2 <oqPutTimeout+0x14>
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	9d 83       	std	Y+5, r25	; 0x05
    100c:	8c 83       	std	Y+4, r24	; 0x04
    100e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1010:	fb 85       	ldd	r31, Y+11	; 0x0b
    1012:	cf 01       	movw	r24, r30
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9b 87       	std	Y+11, r25	; 0x0b
    1018:	8a 87       	std	Y+10, r24	; 0x0a
    101a:	f0 82       	st	Z, r15
    101c:	2a 85       	ldd	r18, Y+10	; 0x0a
    101e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1020:	88 85       	ldd	r24, Y+8	; 0x08
    1022:	99 85       	ldd	r25, Y+9	; 0x09
    1024:	28 17       	cp	r18, r24
    1026:	39 07       	cpc	r19, r25
    1028:	20 f0       	brcs	.+8      	; 0x1032 <oqPutTimeout+0x54>
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
    102c:	9f 81       	ldd	r25, Y+7	; 0x07
    102e:	9b 87       	std	Y+11, r25	; 0x0b
    1030:	8a 87       	std	Y+10, r24	; 0x0a
    1032:	ee 85       	ldd	r30, Y+14	; 0x0e
    1034:	ff 85       	ldd	r31, Y+15	; 0x0f
    1036:	30 97       	sbiw	r30, 0x00	; 0
    1038:	11 f0       	breq	.+4      	; 0x103e <oqPutTimeout+0x60>
    103a:	ce 01       	movw	r24, r28
    103c:	09 95       	icall
    103e:	78 94       	sei
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	08 95       	ret
    1050:	78 94       	sei
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	08 95       	ret

0000105e <oqGetI>:
    105e:	cf 93       	push	r28
    1060:	fc 01       	movw	r30, r24
    1062:	a4 85       	ldd	r26, Z+12	; 0x0c
    1064:	b5 85       	ldd	r27, Z+13	; 0x0d
    1066:	82 85       	ldd	r24, Z+10	; 0x0a
    1068:	93 85       	ldd	r25, Z+11	; 0x0b
    106a:	8a 17       	cp	r24, r26
    106c:	9b 07       	cpc	r25, r27
    106e:	e1 f0       	breq	.+56     	; 0x10a8 <oqGetI+0x4a>
    1070:	84 81       	ldd	r24, Z+4	; 0x04
    1072:	95 81       	ldd	r25, Z+5	; 0x05
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	95 83       	std	Z+5, r25	; 0x05
    1078:	84 83       	std	Z+4, r24	; 0x04
    107a:	cd 01       	movw	r24, r26
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	95 87       	std	Z+13, r25	; 0x0d
    1080:	84 87       	std	Z+12, r24	; 0x0c
    1082:	cc 91       	ld	r28, X
    1084:	20 85       	ldd	r18, Z+8	; 0x08
    1086:	31 85       	ldd	r19, Z+9	; 0x09
    1088:	82 17       	cp	r24, r18
    108a:	93 07       	cpc	r25, r19
    108c:	40 f4       	brcc	.+16     	; 0x109e <oqGetI+0x40>
    108e:	cf 01       	movw	r24, r30
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	1b dd       	rcall	.-1482   	; 0xacc <chThdDequeueNextI>
    1096:	8c 2f       	mov	r24, r28
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret
    109e:	86 81       	ldd	r24, Z+6	; 0x06
    10a0:	97 81       	ldd	r25, Z+7	; 0x07
    10a2:	95 87       	std	Z+13, r25	; 0x0d
    10a4:	84 87       	std	Z+12, r24	; 0x0c
    10a6:	f3 cf       	rjmp	.-26     	; 0x108e <oqGetI+0x30>
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	95 81       	ldd	r25, Z+5	; 0x05
    10ac:	89 2b       	or	r24, r25
    10ae:	01 f3       	breq	.-64     	; 0x1070 <oqGetI+0x12>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	f2 cf       	rjmp	.-28     	; 0x109a <oqGetI+0x3c>

000010b6 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	6c 01       	movw	r12, r24
    10d4:	7b 01       	movw	r14, r22
    10d6:	3a 01       	movw	r6, r20
    10d8:	49 01       	movw	r8, r18
  qnotify_t nfy = oqp->q_notify;
    10da:	fc 01       	movw	r30, r24
    10dc:	a6 84       	ldd	r10, Z+14	; 0x0e
    10de:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    10e0:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
    10e2:	41 15       	cp	r20, r1
    10e4:	51 05       	cpc	r21, r1
    10e6:	b9 f0       	breq	.+46     	; 0x1116 <oqWriteTimeout+0x60>
    10e8:	8a 01       	movw	r16, r20
    size_t done;

    done = oq_write(oqp, bp, n);
    10ea:	a8 01       	movw	r20, r16
    10ec:	b7 01       	movw	r22, r14
    10ee:	c6 01       	movw	r24, r12
    10f0:	37 de       	rcall	.-914    	; 0xd60 <oq_write>
    10f2:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
    10f4:	89 2b       	or	r24, r25
    10f6:	21 f1       	breq	.+72     	; 0x1140 <oqWriteTimeout+0x8a>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
    10f8:	a1 14       	cp	r10, r1
    10fa:	b1 04       	cpc	r11, r1
    10fc:	19 f0       	breq	.+6      	; 0x1104 <oqWriteTimeout+0x4e>
        nfy(oqp);
    10fe:	c6 01       	movw	r24, r12
    1100:	f5 01       	movw	r30, r10
    1102:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1104:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
    1106:	0c 1b       	sub	r16, r28
    1108:	1d 0b       	sbc	r17, r29
      bp += done;
    110a:	ec 0e       	add	r14, r28
    110c:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    110e:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
    1110:	01 15       	cp	r16, r1
    1112:	11 05       	cpc	r17, r1
    1114:	51 f7       	brne	.-44     	; 0x10ea <oqWriteTimeout+0x34>
    1116:	00 e0       	ldi	r16, 0x00	; 0
    1118:	10 e0       	ldi	r17, 0x00	; 0
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    111a:	78 94       	sei
    }
  }

  osalSysUnlock();
  return max - n;
}
    111c:	c3 01       	movw	r24, r6
    111e:	80 1b       	sub	r24, r16
    1120:	91 0b       	sbc	r25, r17
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	bf 90       	pop	r11
    1134:	af 90       	pop	r10
    1136:	9f 90       	pop	r9
    1138:	8f 90       	pop	r8
    113a:	7f 90       	pop	r7
    113c:	6f 90       	pop	r6
    113e:	08 95       	ret
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
    1140:	b4 01       	movw	r22, r8
    1142:	c6 01       	movw	r24, r12
    1144:	a6 dc       	rcall	.-1716   	; 0xa92 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
    1146:	89 2b       	or	r24, r25
    1148:	81 f2       	breq	.-96     	; 0x10ea <oqWriteTimeout+0x34>
    114a:	e7 cf       	rjmp	.-50     	; 0x111a <oqWriteTimeout+0x64>

0000114c <i2cInit>:
    114c:	5e c2       	rjmp	.+1212   	; 0x160a <i2c_lld_init>

0000114e <i2cObjectInit>:
    114e:	21 e0       	ldi	r18, 0x01	; 1
    1150:	fc 01       	movw	r30, r24
    1152:	20 83       	st	Z, r18
    1154:	12 82       	std	Z+2, r1	; 0x02
    1156:	11 82       	std	Z+1, r1	; 0x01
    1158:	04 96       	adiw	r24, 0x04	; 4
    115a:	d1 cc       	rjmp	.-1630   	; 0xafe <chMtxObjectInit>

0000115c <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
    115c:	05 96       	adiw	r24, 0x05	; 5
    115e:	da ce       	rjmp	.-588    	; 0xf14 <iqReadTimeout>

00001160 <_read>:
    1160:	2f ef       	ldi	r18, 0xFF	; 255
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	05 96       	adiw	r24, 0x05	; 5
    1166:	d6 ce       	rjmp	.-596    	; 0xf14 <iqReadTimeout>

00001168 <_writet>:
    1168:	47 96       	adiw	r24, 0x17	; 23
    116a:	a5 cf       	rjmp	.-182    	; 0x10b6 <oqWriteTimeout>

0000116c <_write>:
    116c:	2f ef       	ldi	r18, 0xFF	; 255
    116e:	3f ef       	ldi	r19, 0xFF	; 255
    1170:	47 96       	adiw	r24, 0x17	; 23
    1172:	a1 cf       	rjmp	.-190    	; 0x10b6 <oqWriteTimeout>

00001174 <_gett>:
    1174:	05 96       	adiw	r24, 0x05	; 5
    1176:	94 ce       	rjmp	.-728    	; 0xea0 <iqGetTimeout>

00001178 <_get>:
    1178:	6f ef       	ldi	r22, 0xFF	; 255
    117a:	7f ef       	ldi	r23, 0xFF	; 255
    117c:	05 96       	adiw	r24, 0x05	; 5
    117e:	90 ce       	rjmp	.-736    	; 0xea0 <iqGetTimeout>

00001180 <_putt>:
    1180:	47 96       	adiw	r24, 0x17	; 23
    1182:	2d cf       	rjmp	.-422    	; 0xfde <oqPutTimeout>

00001184 <_put>:
    1184:	4f ef       	ldi	r20, 0xFF	; 255
    1186:	5f ef       	ldi	r21, 0xFF	; 255
    1188:	47 96       	adiw	r24, 0x17	; 23
    118a:	29 cf       	rjmp	.-430    	; 0xfde <oqPutTimeout>

0000118c <_ctl>:
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	08 95       	ret

00001192 <sdInit>:
    1192:	04 c3       	rjmp	.+1544   	; 0x179c <sd_lld_init>

00001194 <sdObjectInit>:
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ec 01       	movw	r28, r24
    11a2:	9b 01       	movw	r18, r22
    11a4:	7a 01       	movw	r14, r20
    11a6:	fc 01       	movw	r30, r24
    11a8:	8d e2       	ldi	r24, 0x2D	; 45
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	81 93       	st	Z+, r24
    11ae:	91 93       	st	Z+, r25
    11b0:	fb 83       	std	Y+3, r31	; 0x03
    11b2:	ea 83       	std	Y+2, r30	; 0x02
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8c 83       	std	Y+4, r24	; 0x04
    11b8:	be 01       	movw	r22, r28
    11ba:	67 5d       	subi	r22, 0xD7	; 215
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	8e 01       	movw	r16, r28
    11c0:	40 e1       	ldi	r20, 0x10	; 16
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	ce 01       	movw	r24, r28
    11c6:	05 96       	adiw	r24, 0x05	; 5
    11c8:	26 de       	rcall	.-948    	; 0xe16 <iqObjectInit>
    11ca:	be 01       	movw	r22, r28
    11cc:	67 5c       	subi	r22, 0xC7	; 199
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	97 01       	movw	r18, r14
    11d2:	40 e1       	ldi	r20, 0x10	; 16
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	ce 01       	movw	r24, r28
    11d8:	47 96       	adiw	r24, 0x17	; 23
    11da:	e7 de       	rcall	.-562    	; 0xfaa <oqObjectInit>
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	08 95       	ret

000011ea <sdStart>:
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	f8 94       	cli
    11f2:	db d2       	rcall	.+1462   	; 0x17aa <sd_lld_start>
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	8c 83       	std	Y+4, r24	; 0x04
    11f8:	78 94       	sei
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    120a:	89 85       	ldd	r24, Y+9	; 0x09
    120c:	9a 85       	ldd	r25, Y+10	; 0x0a
    120e:	89 2b       	or	r24, r25
    1210:	51 f0       	breq	.+20     	; 0x1226 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    1212:	61 2f       	mov	r22, r17
    1214:	ce 01       	movw	r24, r28
    1216:	05 96       	adiw	r24, 0x05	; 5
    1218:	18 de       	rcall	.-976    	; 0xe4a <iqPutI>
    121a:	97 fd       	sbrc	r25, 7
    121c:	0e c0       	rjmp	.+28     	; 0x123a <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	ce 01       	movw	r24, r28
    122a:	02 96       	adiw	r24, 0x02	; 2
    122c:	86 dc       	rcall	.-1780   	; 0xb3a <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    122e:	61 2f       	mov	r22, r17
    1230:	ce 01       	movw	r24, r28
    1232:	05 96       	adiw	r24, 0x05	; 5
    1234:	0a de       	rcall	.-1004   	; 0xe4a <iqPutI>
    1236:	97 ff       	sbrs	r25, 7
    1238:	f2 cf       	rjmp	.-28     	; 0x121e <sdIncomingDataI+0x1e>
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	ce 01       	movw	r24, r28
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    123e:	02 96       	adiw	r24, 0x02	; 2
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
    1246:	79 cc       	rjmp	.-1806   	; 0xb3a <chEvtBroadcastFlagsI>

00001248 <sdRequestDataI>:
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	8c 01       	movw	r16, r24
    1252:	47 96       	adiw	r24, 0x17	; 23
    1254:	04 df       	rcall	.-504    	; 0x105e <oqGetI>
    1256:	ec 01       	movw	r28, r24
    1258:	97 fd       	sbrc	r25, 7
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <sdRequestDataI+0x20>
    125c:	ce 01       	movw	r24, r28
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret
    1268:	68 e0       	ldi	r22, 0x08	; 8
    126a:	c8 01       	movw	r24, r16
    126c:	02 96       	adiw	r24, 0x02	; 2
    126e:	65 dc       	rcall	.-1846   	; 0xb3a <chEvtBroadcastFlagsI>
    1270:	ce 01       	movw	r24, r28
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
    127c:	08 95       	ret

0000127e <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    127e:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
    1280:	80 81       	ld	r24, Z
    1282:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
    1284:	81 81       	ldd	r24, Z+1	; 0x01
    1286:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
    128c:	83 81       	ldd	r24, Z+3	; 0x03
    128e:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
    1290:	84 81       	ldd	r24, Z+4	; 0x04
    1292:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
    1294:	85 81       	ldd	r24, Z+5	; 0x05
    1296:	8a b9       	out	0x0a, r24	; 10
    1298:	08 95       	ret

0000129a <__vector_24>:
/**
 * @brief   I2C event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(TWI_vect) {
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	2f 93       	push	r18
    12a6:	3f 93       	push	r19
    12a8:	4f 93       	push	r20
    12aa:	5f 93       	push	r21
    12ac:	6f 93       	push	r22
    12ae:	7f 93       	push	r23
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
    12b4:	af 93       	push	r26
    12b6:	bf 93       	push	r27
    12b8:	ef 93       	push	r30
    12ba:	ff 93       	push	r31
  OSAL_IRQ_PROLOGUE();
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <__avr_in_isr>

  I2CDriver *i2cp = &I2CD1;

  switch (TWSR & 0xF8) {
    12c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12c6:	e8 2f       	mov	r30, r24
    12c8:	e8 7f       	andi	r30, 0xF8	; 248
    12ca:	8e 2f       	mov	r24, r30
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	89 3c       	cpi	r24, 0xC9	; 201
    12d0:	91 05       	cpc	r25, r1
    12d2:	10 f1       	brcs	.+68     	; 0x1318 <__vector_24+0x7e>
  case TWI_BUS_ERROR:
    i2cp->errors |= I2C_BUS_ERROR;
    break;
  default:
    /* FIXME: only gets here if there are other MASTERs in the bus. */
    TWCR = ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    12d4:	84 e9       	ldi	r24, 0x94	; 148
    12d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
    12da:	6e ef       	ldi	r22, 0xFE	; 254
    12dc:	7f ef       	ldi	r23, 0xFF	; 255
    12de:	8e e1       	ldi	r24, 0x1E	; 30
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	ca db       	rcall	.-2156   	; 0xa78 <chThdResumeI>
    12e4:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    _i2c_wakeup_error_isr(i2cp);
  }

  if (i2cp->errors != I2C_NO_ERROR) {
    12e8:	81 11       	cpse	r24, r1
    12ea:	4f c0       	rjmp	.+158    	; 0x138a <__vector_24+0xf0>
    TWCR = ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    _i2c_wakeup_error_isr(i2cp);
  }

  OSAL_IRQ_EPILOGUE();
    12ec:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <__avr_in_isr>
    12f0:	67 da       	rcall	.-2866   	; 0x7c0 <chSchIsPreemptionRequired>
    12f2:	81 11       	cpse	r24, r1
    12f4:	75 da       	rcall	.-2838   	; 0x7e0 <chSchDoReschedule>
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
OSAL_IRQ_HANDLER(TWI_vect) {
  OSAL_IRQ_PROLOGUE();

  I2CDriver *i2cp = &I2CD1;

  switch (TWSR & 0xF8) {
    1316:	18 95       	reti
    1318:	fc 01       	movw	r30, r24
    131a:	ec 5c       	subi	r30, 0xCC	; 204
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    i2cp->rxidx++;
    TWCR = ((1 << TWEA) | (1 << TWINT) | (1 << TWEN) | (1 << TWIE));
  }
  break;
  case TWI_SLAVE_RX_DATA_NACK: /*ref $88*/
  i2cp->rxbuf[i2cp->rxidx++] = TWDR;
    131e:	83 c5       	rjmp	.+2822   	; 0x1e26 <__tablejump2__>
    1320:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <I2CD1+0x15>
    1324:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <I2CD1+0x16>
    1328:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <I2CD1+0x19>
    132c:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <I2CD1+0x1a>
    1330:	9c 01       	movw	r18, r24
    1332:	2f 5f       	subi	r18, 0xFF	; 255
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	30 93 2c 03 	sts	0x032C, r19	; 0x80032c <I2CD1+0x1a>
    133a:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <I2CD1+0x19>
    133e:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1342:	fa 01       	movw	r30, r20
    1344:	e8 0f       	add	r30, r24
    1346:	f9 1f       	adc	r31, r25
   /*implement decision making past communication with flags*/
   /*default to retain addr and not send start*/
   TWCR = ((1 << TWINT) | (1<< TWIE)| (1<<TWEA));
    1348:	20 83       	st	Z, r18
    134a:	81 ec       	ldi	r24, 0xC1	; 193
    134c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1350:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    else {
      TWCR = ((1 << TWEA) | (1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    }
    break;
  case TWI_MASTER_RX_DATA_NACK:
    i2cp->rxbuf[i2cp->rxidx] = TWDR;
    1354:	c9 cf       	rjmp	.-110    	; 0x12e8 <__vector_24+0x4e>
    1356:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    135a:	e0 91 27 03 	lds	r30, 0x0327	; 0x800327 <I2CD1+0x15>
    135e:	f0 91 28 03 	lds	r31, 0x0328	; 0x800328 <I2CD1+0x16>
    1362:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <I2CD1+0x19>
    1366:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <I2CD1+0x1a>
    136a:	e8 0f       	add	r30, r24
    136c:	f9 1f       	adc	r31, r25
    TWCR = ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    136e:	20 83       	st	Z, r18
    1370:	84 e9       	ldi	r24, 0x94	; 148
    1372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	8e e1       	ldi	r24, 0x1E	; 30
    _i2c_wakeup_isr(i2cp);
  case TWI_MASTER_TX_ADDR_NACK:
  case TWI_MASTER_TX_DATA_NACK:
  case TWI_MASTER_RX_ADDR_NACK:
    i2cp->errors |= I2C_ACK_FAILURE;
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	7c db       	rcall	.-2312   	; 0xa78 <chThdResumeI>
    1380:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    1384:	84 60       	ori	r24, 0x04	; 4
    TWCR = ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    _i2c_wakeup_error_isr(i2cp);
  }

  if (i2cp->errors != I2C_NO_ERROR) {
    TWCR = ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    1386:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <I2CD1+0x3>
    138a:	84 e9       	ldi	r24, 0x94	; 148
    138c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1390:	6e ef       	ldi	r22, 0xFE	; 254
    1392:	7f ef       	ldi	r23, 0xFF	; 255
    1394:	8e e1       	ldi	r24, 0x1E	; 30
    1396:	93 e0       	ldi	r25, 0x03	; 3
   /*default to retain addr and not send start*/
   TWCR = ((1 << TWINT) | (1<< TWIE)| (1<<TWEA));
  break;
  case TWI_SLAVE_STOP:
  /*default to retain addr and not send start*/
   TWCR = ((1 << TWINT) | (1<< TWIE) | (1<<TWEA));
    1398:	6f db       	rcall	.-2338   	; 0xa78 <chThdResumeI>
    139a:	a8 cf       	rjmp	.-176    	; 0x12ec <__vector_24+0x52>
    139c:	81 ec       	ldi	r24, 0xC1	; 193

  /*slave transmitt status*/
  case TWI_SLAVE_TX_ADDR_ACK: /*ref $A8*/
  /*load data from buffer to TWDR*/
  /*check if there's more data to transmmit*/
    TWDR = i2cp->txbuf[i2cp->txidx];
    139e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13a2:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <I2CD1+0xf>
    13a6:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <I2CD1+0x10>
    13aa:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <I2CD1+0x13>
    13ae:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <I2CD1+0x14>
    13b2:	e8 0f       	add	r30, r24
    13b4:	f9 1f       	adc	r31, r25
    13b6:	20 81       	ld	r18, Z
       if (i2cp->txidx ==(i2cp->txbytes -1)){
    13b8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    13bc:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <I2CD1+0x11>
    13c0:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <I2CD1+0x12>
    13c4:	21 50       	subi	r18, 0x01	; 1
    13c6:	31 09       	sbc	r19, r1
    13c8:	82 17       	cp	r24, r18
    13ca:	93 07       	cpc	r25, r19
    TWCR = ((1 << TWINT) | (1 << TWIE));
  }
  else{
    i2cp->txidx++;
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <__vector_24+0x136>
    13ce:	40 c0       	rjmp	.+128    	; 0x1450 <__vector_24+0x1b6>
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <I2CD1+0x14>
    TWCR = ((1 << TWINT) | (1 << TWEA) | (1 << TWIE));
    13d6:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <I2CD1+0x13>
    13da:	81 ec       	ldi	r24, 0xC1	; 193
    13dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13e0:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    else {
      TWCR = ((1 << TWEA) | (1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    }
    break;
  case TWI_MASTER_RX_DATA_ACK:
    i2cp->rxbuf[i2cp->rxidx++] = TWDR;
    13e4:	81 cf       	rjmp	.-254    	; 0x12e8 <__vector_24+0x4e>
    13e6:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <I2CD1+0x15>
    13ea:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <I2CD1+0x16>
    13ee:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <I2CD1+0x19>
    13f2:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <I2CD1+0x1a>
    13f6:	9c 01       	movw	r18, r24
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	30 93 2c 03 	sts	0x032C, r19	; 0x80032c <I2CD1+0x1a>
    1400:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <I2CD1+0x19>
    1404:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1408:	fa 01       	movw	r30, r20
    140a:	e8 0f       	add	r30, r24
    if (i2cp->rxidx == (i2cp->rxbytes - 1)) {
    140c:	f9 1f       	adc	r31, r25
    140e:	20 83       	st	Z, r18
    1410:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <I2CD1+0x17>
    1414:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <I2CD1+0x18>
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <I2CD1+0x19>
    141e:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <I2CD1+0x1a>
    1422:	28 17       	cp	r18, r24
    1424:	39 07       	cpc	r19, r25
    TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE));
  }
  /*can recieve more bytes stay in $80*/
  else {
    i2cp->rxidx++;
    TWCR = ((1 << TWEA) | (1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    1426:	09 f4       	brne	.+2      	; 0x142a <__vector_24+0x190>
    1428:	a2 c0       	rjmp	.+324    	; 0x156e <__vector_24+0x2d4>
    142a:	85 ec       	ldi	r24, 0xC5	; 197
    142c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1430:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>

  /*slave recieve status*/
  case TWI_SLAVE_RX_ADDR_ACK: /*ref $60*/
  /*review cases where state 0x60 should return nack (not initialize ?)
  same decision making on the 0x68 and 0x70)*/
    if (i2cp->rxidx ==(i2cp->rxbytes -1)){
    1434:	59 cf       	rjmp	.-334    	; 0x12e8 <__vector_24+0x4e>
    1436:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <I2CD1+0x17>
    143a:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <I2CD1+0x18>
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <I2CD1+0x19>
    1444:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <I2CD1+0x1a>
    1448:	28 17       	cp	r18, r24
    144a:	39 07       	cpc	r19, r25
  }
  break;
  case TWI_SLAVE_TX_DATA_ACK: /*ref $B8*/
    TWDR = i2cp->txbuf[i2cp->txidx++];
  if (i2cp->txidx ==(i2cp->txbytes -1)){
    TWCR = (1 << TWINT | (1 << TWIE));
    144c:	09 f0       	breq	.+2      	; 0x1450 <__vector_24+0x1b6>
    144e:	7d cf       	rjmp	.-262    	; 0x134a <__vector_24+0xb0>
    1450:	81 e8       	ldi	r24, 0x81	; 129
    1452:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1456:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    else{
      TWCR = ((1 << TWINT) | (1 << TWEA)| (1 << TWIE));
    }
  break;
  case TWI_SLAVE_RX_POST_ARB_LOST: /*ref $68*/
    if (i2cp->rxidx ==(i2cp->rxbytes -1)){
    145a:	46 cf       	rjmp	.-372    	; 0x12e8 <__vector_24+0x4e>
    145c:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <I2CD1+0x17>
    1460:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <I2CD1+0x18>
    1464:	21 50       	subi	r18, 0x01	; 1
    1466:	31 09       	sbc	r19, r1
    1468:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <I2CD1+0x19>
    146c:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <I2CD1+0x1a>
    1470:	82 17       	cp	r24, r18
    1472:	93 07       	cpc	r25, r19
      TWCR = (1 << TWINT) | (1 << TWIE);
    }
    else{
      TWCR = ((1 << TWINT) | (1 << TWEA)| (1 << TWIE));
    1474:	09 f4       	brne	.+2      	; 0x1478 <__vector_24+0x1de>
    1476:	ba c0       	rjmp	.+372    	; 0x15ec <__vector_24+0x352>
    1478:	21 ec       	ldi	r18, 0xC1	; 193
    }
  case TWI_SLAVE_RX_DATA_ACK: /*ref $80*/
  /*Read the data from the bus to the buffer rxbuf recieves the byte from TWDR*/
  i2cp->rxbuf[i2cp->rxidx++] = TWDR;
    147a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    147e:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <I2CD1+0x15>
    1482:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <I2CD1+0x16>
    1486:	9c 01       	movw	r18, r24
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	30 93 2c 03 	sts	0x032C, r19	; 0x80032c <I2CD1+0x1a>
    1490:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <I2CD1+0x19>
    1494:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1498:	fa 01       	movw	r30, r20
    149a:	e8 0f       	add	r30, r24
  /*send nack master move to $88*/
  if (i2cp->rxidx == (i2cp->rxbytes - 1)) {
    149c:	f9 1f       	adc	r31, r25
    149e:	20 83       	st	Z, r18
    14a0:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <I2CD1+0x19>
    14a4:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <I2CD1+0x1a>
    14a8:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <I2CD1+0x17>
    14ac:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <I2CD1+0x18>
    14b0:	21 50       	subi	r18, 0x01	; 1
    14b2:	31 09       	sbc	r19, r1
    14b4:	82 17       	cp	r24, r18
    14b6:	93 07       	cpc	r25, r19
    TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE));
  }
  /*can recieve more bytes stay in $80*/
  else {
    i2cp->rxidx++;
    14b8:	09 f4       	brne	.+2      	; 0x14bc <__vector_24+0x222>
    14ba:	59 c0       	rjmp	.+178    	; 0x156e <__vector_24+0x2d4>
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <I2CD1+0x1a>
    14c2:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <I2CD1+0x19>
    TWCR = ((1 << TWINT) | (1 << TWEA) | (1 << TWIE));
  }
  break;
  case TWI_SLAVE_TX_POST_ARB_LOST:/*ref $B0*/
  /*load data and check for nack transmission*/
    TWDR = i2cp->txbuf[i2cp->txidx];
    14c6:	b1 cf       	rjmp	.-158    	; 0x142a <__vector_24+0x190>
    14c8:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <I2CD1+0xf>
    14cc:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <I2CD1+0x10>
    14d0:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <I2CD1+0x13>
    14d4:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <I2CD1+0x14>
  else{
    TWCR = ((1 << TWINT) | (1 << TWEA) | (1 << TWIE));
  }
  break;
  case TWI_SLAVE_TX_DATA_ACK: /*ref $B8*/
    TWDR = i2cp->txbuf[i2cp->txidx++];
    14d8:	e2 0f       	add	r30, r18
    14da:	f3 1f       	adc	r31, r19
    14dc:	80 81       	ld	r24, Z
  if (i2cp->txidx ==(i2cp->txbytes -1)){
    14de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    14e2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <I2CD1+0x11>
    14e6:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <I2CD1+0x12>
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	28 17       	cp	r18, r24
    14ee:	39 07       	cpc	r19, r25
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <__vector_24+0x25a>
  /*implement decision making past communication with flags*/
   /*default to retain addr and not send start*/
   TWCR = ((1 << TWINT) | (1<< TWIE)| (1<<TWEA));
   break;
  case TWI_ARBITRATION_LOST:
    i2cp->errors |= I2C_ARBITRATION_LOST;
    14f2:	2b cf       	rjmp	.-426    	; 0x134a <__vector_24+0xb0>
    14f4:	ad cf       	rjmp	.-166    	; 0x1450 <__vector_24+0x1b6>
    14f6:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    14fa:	82 60       	ori	r24, 0x02	; 2
    break;
    14fc:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <I2CD1+0x3>
  else{
    TWCR = ((1 << TWINT) | (1 << TWEA) | (1 << TWIE));
  }
  break;
  case TWI_SLAVE_TX_DATA_ACK: /*ref $B8*/
    TWDR = i2cp->txbuf[i2cp->txidx++];
    1500:	44 cf       	rjmp	.-376    	; 0x138a <__vector_24+0xf0>
    1502:	40 91 21 03 	lds	r20, 0x0321	; 0x800321 <I2CD1+0xf>
    1506:	50 91 22 03 	lds	r21, 0x0322	; 0x800322 <I2CD1+0x10>
    150a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <I2CD1+0x13>
    150e:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <I2CD1+0x14>
    1512:	9c 01       	movw	r18, r24
    1514:	2f 5f       	subi	r18, 0xFF	; 255
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	30 93 26 03 	sts	0x0326, r19	; 0x800326 <I2CD1+0x14>
    151c:	20 93 25 03 	sts	0x0325, r18	; 0x800325 <I2CD1+0x13>
    1520:	fa 01       	movw	r30, r20
    1522:	e8 0f       	add	r30, r24
   break;
  case TWI_ARBITRATION_LOST:
    i2cp->errors |= I2C_ARBITRATION_LOST;
    break;
  case TWI_BUS_ERROR:
    i2cp->errors |= I2C_BUS_ERROR;
    1524:	f9 1f       	adc	r31, r25
    1526:	da cf       	rjmp	.-76     	; 0x14dc <__vector_24+0x242>
    1528:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    152c:	81 60       	ori	r24, 0x01	; 1
    break;
    152e:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <I2CD1+0x3>
  I2CDriver *i2cp = &I2CD1;

  switch (TWSR & 0xF8) {
  case TWI_START:
  case TWI_REPEAT_START:
    TWDR = (i2cp->addr << 1);
    1532:	2b cf       	rjmp	.-426    	; 0x138a <__vector_24+0xf0>
    1534:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <I2CD1+0xe>
    1538:	88 0f       	add	r24, r24
    if ((i2cp->txbuf == NULL) || (i2cp->txbytes == 0) || (i2cp->txidx == i2cp->txbytes)) {
    153a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    153e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <I2CD1+0xf>
    1542:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <I2CD1+0x10>
    1546:	89 2b       	or	r24, r25
    1548:	69 f0       	breq	.+26     	; 0x1564 <__vector_24+0x2ca>
    154a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <I2CD1+0x11>
    154e:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <I2CD1+0x12>
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	39 f0       	breq	.+14     	; 0x1564 <__vector_24+0x2ca>
    1556:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <I2CD1+0x13>
    155a:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <I2CD1+0x14>
    155e:	82 17       	cp	r24, r18
      TWDR |= 0x01;
    1560:	93 07       	cpc	r25, r19
    1562:	29 f4       	brne	.+10     	; 0x156e <__vector_24+0x2d4>
    1564:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1568:	81 60       	ori	r24, 0x01	; 1
  case TWI_SLAVE_RX_DATA_ACK: /*ref $80*/
  /*Read the data from the bus to the buffer rxbuf recieves the byte from TWDR*/
  i2cp->rxbuf[i2cp->rxidx++] = TWDR;
  /*send nack master move to $88*/
  if (i2cp->rxidx == (i2cp->rxbytes - 1)) {
    TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    156a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    156e:	85 e8       	ldi	r24, 0x85	; 133
    1570:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1574:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    }
    TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    break;
  case TWI_MASTER_TX_ADDR_ACK:
  case TWI_MASTER_TX_DATA_ACK:
    if (i2cp->txidx < i2cp->txbytes) {
    1578:	b7 ce       	rjmp	.-658    	; 0x12e8 <__vector_24+0x4e>
    157a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <I2CD1+0x13>
    157e:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <I2CD1+0x14>
    1582:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <I2CD1+0x11>
    1586:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <I2CD1+0x12>
    158a:	82 17       	cp	r24, r18
      TWDR = i2cp->txbuf[i2cp->txidx++];
      TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    }
    else {
      if (i2cp->rxbuf && i2cp->rxbytes) {
    158c:	93 07       	cpc	r25, r19
    158e:	b8 f0       	brcs	.+46     	; 0x15be <__vector_24+0x324>
    1590:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <I2CD1+0x15>
    1594:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <I2CD1+0x16>
    1598:	89 2b       	or	r24, r25
    159a:	61 f1       	breq	.+88     	; 0x15f4 <__vector_24+0x35a>
    159c:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <I2CD1+0x17>
    15a0:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <I2CD1+0x18>
        TWCR = ((1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    15a4:	89 2b       	or	r24, r25
    15a6:	31 f1       	breq	.+76     	; 0x15f4 <__vector_24+0x35a>
    15a8:	85 ea       	ldi	r24, 0xA5	; 165
    15aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15ae:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    15b2:	9a ce       	rjmp	.-716    	; 0x12e8 <__vector_24+0x4e>
    15b4:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <I2CD1+0x19>
    15b8:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <I2CD1+0x1a>
    TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    break;
  case TWI_MASTER_TX_ADDR_ACK:
  case TWI_MASTER_TX_DATA_ACK:
    if (i2cp->txidx < i2cp->txbytes) {
      TWDR = i2cp->txbuf[i2cp->txidx++];
    15bc:	60 cf       	rjmp	.-320    	; 0x147e <__vector_24+0x1e4>
    15be:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <I2CD1+0xf>
    15c2:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <I2CD1+0x10>
    15c6:	ac 01       	movw	r20, r24
    15c8:	4f 5f       	subi	r20, 0xFF	; 255
    15ca:	5f 4f       	sbci	r21, 0xFF	; 255
    15cc:	50 93 26 03 	sts	0x0326, r21	; 0x800326 <I2CD1+0x14>
    15d0:	40 93 25 03 	sts	0x0325, r20	; 0x800325 <I2CD1+0x13>
    15d4:	f9 01       	movw	r30, r18
    15d6:	e8 0f       	add	r30, r24
    15d8:	f9 1f       	adc	r31, r25
    15da:	80 81       	ld	r24, Z
      TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWIE));
    15dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    15e0:	85 e8       	ldi	r24, 0x85	; 133
    15e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15e6:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
      TWCR = ((1 << TWINT) | (1 << TWEA)| (1 << TWIE));
    }
  break;
  case TWI_SLAVE_RX_POST_ARB_LOST: /*ref $68*/
    if (i2cp->rxidx ==(i2cp->rxbytes -1)){
      TWCR = (1 << TWINT) | (1 << TWIE);
    15ea:	7e ce       	rjmp	.-772    	; 0x12e8 <__vector_24+0x4e>
    15ec:	21 e8       	ldi	r18, 0x81	; 129
    15ee:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    else {
      if (i2cp->rxbuf && i2cp->rxbytes) {
        TWCR = ((1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWIE));
      }
      else {
        TWCR = ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    15f2:	45 cf       	rjmp	.-374    	; 0x147e <__vector_24+0x1e4>
    15f4:	84 e9       	ldi	r24, 0x94	; 148
    15f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	8e e1       	ldi	r24, 0x1E	; 30
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	3a da       	rcall	.-2956   	; 0xa78 <chThdResumeI>
    1604:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <I2CD1+0x3>
    1608:	6f ce       	rjmp	.-802    	; 0x12e8 <__vector_24+0x4e>

0000160a <i2c_lld_init>:
 *
 * @notapi
 */
void i2c_lld_init(void) {

  i2cObjectInit(&I2CD1);
    160a:	82 e1       	ldi	r24, 0x12	; 18
    160c:	93 e0       	ldi	r25, 0x03	; 3
    160e:	9f dd       	rcall	.-1218   	; 0x114e <i2cObjectInit>
  I2CD1.thread = NULL;
    1610:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <I2CD1+0xd>
    1614:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <I2CD1+0xc>
    1618:	08 95       	ret

0000161a <__vector_11>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    1642:	0e 94 44 01 	call	0x288	; 0x288 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1646:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <__avr_in_isr>
    164a:	ba d8       	rcall	.-3724   	; 0x7c0 <chSchIsPreemptionRequired>
    164c:	81 11       	cpse	r24, r1
    164e:	c8 d8       	rcall	.-3696   	; 0x7e0 <chSchDoReschedule>
}
    1650:	ff 91       	pop	r31
    1652:	ef 91       	pop	r30
    1654:	bf 91       	pop	r27
    1656:	af 91       	pop	r26
    1658:	9f 91       	pop	r25
    165a:	8f 91       	pop	r24
    165c:	7f 91       	pop	r23
    165e:	6f 91       	pop	r22
    1660:	5f 91       	pop	r21
    1662:	4f 91       	pop	r20
    1664:	3f 91       	pop	r19
    1666:	2f 91       	pop	r18
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 90       	pop	r0
    166e:	1f 90       	pop	r1
    1670:	18 95       	reti

00001672 <st_lld_init>:
  /*
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source. */
  TCCR1A     = 0;
    1672:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1B     = _BV(WGM12);
    1676:	e1 e8       	ldi	r30, 0x81	; 129
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	88 e0       	ldi	r24, 0x08	; 8
    167c:	80 83       	st	Z, r24

  /* start disabled. */
  TCCR1C     = 0;
    167e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  OCR1A      = 0;
    1682:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1686:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  TCNT1      = 0;
    168a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    168e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */    
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
    1696:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  TCCR1B     = PRESCALER;
    169a:	85 e0       	ldi	r24, 0x05	; 5
    169c:	80 83       	st	Z, r24
    169e:	08 95       	ret

000016a0 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    16a0:	e1 ec       	ldi	r30, 0xC1	; 193
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	80 62       	ori	r24, 0x20	; 32
    16a8:	80 83       	st	Z, r24
    16aa:	08 95       	ret

000016ac <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    16ac:	1f 92       	push	r1
    16ae:	0f 92       	push	r0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	0f 92       	push	r0
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <__avr_in_isr>

  sra = UCSR0A;
    16d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    16d8:	98 2f       	mov	r25, r24
    16da:	9c 71       	andi	r25, 0x1C	; 28
    16dc:	d9 f4       	brne	.+54     	; 0x1714 <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    16de:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    16e2:	8f e3       	ldi	r24, 0x3F	; 63
    16e4:	93 e0       	ldi	r25, 0x03	; 3
    16e6:	8c dd       	rcall	.-1256   	; 0x1200 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    16e8:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <__avr_in_isr>
    16ec:	69 d8       	rcall	.-3886   	; 0x7c0 <chSchIsPreemptionRequired>
    16ee:	81 11       	cpse	r24, r1
    16f0:	77 d8       	rcall	.-3858   	; 0x7e0 <chSchDoReschedule>
}
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	0f 90       	pop	r0
    1710:	1f 90       	pop	r1
    1712:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    1714:	83 fd       	sbrc	r24, 3
    1716:	09 c0       	rjmp	.+18     	; 0x172a <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    1718:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    171a:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    171c:	60 62       	ori	r22, 0x20	; 32
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    171e:	84 fd       	sbrc	r24, 4
    1720:	60 64       	ori	r22, 0x40	; 64
    1722:	81 e4       	ldi	r24, 0x41	; 65
    1724:	93 e0       	ldi	r25, 0x03	; 3
    1726:	09 da       	rcall	.-3054   	; 0xb3a <chEvtBroadcastFlagsI>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    1728:	da cf       	rjmp	.-76     	; 0x16de <__vector_18+0x32>
    172a:	60 e8       	ldi	r22, 0x80	; 128
    172c:	f6 cf       	rjmp	.-20     	; 0x171a <__vector_18+0x6e>

0000172e <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	ef 93       	push	r30
    174e:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    1756:	8f e3       	ldi	r24, 0x3F	; 63
    1758:	93 e0       	ldi	r25, 0x03	; 3
    175a:	76 dd       	rcall	.-1300   	; 0x1248 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    175c:	97 fd       	sbrc	r25, 7
    175e:	18 c0       	rjmp	.+48     	; 0x1790 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    1760:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  OSAL_IRQ_EPILOGUE();
    1764:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <__avr_in_isr>
    1768:	2b d8       	rcall	.-4010   	; 0x7c0 <chSchIsPreemptionRequired>
    176a:	81 11       	cpse	r24, r1
    176c:	39 d8       	rcall	.-3982   	; 0x7e0 <chSchDoReschedule>
}
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    1790:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1794:	8f 7d       	andi	r24, 0xDF	; 223
    1796:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    179a:	e4 cf       	rjmp	.-56     	; 0x1764 <__vector_19+0x36>

0000179c <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    179c:	40 e5       	ldi	r20, 0x50	; 80
    179e:	5b e0       	ldi	r21, 0x0B	; 11
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	8f e3       	ldi	r24, 0x3F	; 63
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	f5 cc       	rjmp	.-1558   	; 0x1194 <sdObjectInit>

000017aa <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    17aa:	61 15       	cp	r22, r1
    17ac:	71 05       	cpc	r23, r1
    17ae:	19 f1       	breq	.+70     	; 0x17f6 <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    17b0:	8f 53       	subi	r24, 0x3F	; 63
    17b2:	93 40       	sbci	r25, 0x03	; 3
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <sd_lld_start+0xe>
    17b6:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    17b8:	fb 01       	movw	r30, r22
    17ba:	80 81       	ld	r24, Z
    17bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    17c0:	81 81       	ldd	r24, Z+1	; 0x01
    17c2:	8f 70       	andi	r24, 0x0F	; 15
    17c4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UCSR0A = (1 << U2X0);
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    17ce:	88 e9       	ldi	r24, 0x98	; 152
    17d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  switch (config->sc_bits_per_char) {
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	b9 f0       	breq	.+46     	; 0x1808 <sd_lld_start+0x5e>
    17da:	a0 f0       	brcs	.+40     	; 0x1804 <sd_lld_start+0x5a>
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	71 f0       	breq	.+28     	; 0x17fc <sd_lld_start+0x52>
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	71 f4       	brne	.+28     	; 0x1800 <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    17e4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    17ee:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    17f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    17f4:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    17f6:	61 e4       	ldi	r22, 0x41	; 65
    17f8:	71 e0       	ldi	r23, 0x01	; 1
    17fa:	da cf       	rjmp	.-76     	; 0x17b0 <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	f8 cf       	rjmp	.-16     	; 0x17f0 <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    1800:	86 e0       	ldi	r24, 0x06	; 6
    1802:	f6 cf       	rjmp	.-20     	; 0x17f0 <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	f4 cf       	rjmp	.-24     	; 0x17f0 <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	f2 cf       	rjmp	.-28     	; 0x17f0 <sd_lld_start+0x46>

0000180c <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    180c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  EIMSK  = 0x00;
    1810:	1d ba       	out	0x1d, r1	; 29
    1812:	08 95       	ret

00001814 <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
    1814:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <ch+0xb>
    1818:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <ch+0xc>
    181c:	8a e4       	ldi	r24, 0x4A	; 74
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	94 87       	std	Z+12, r25	; 0x0c
    1822:	83 87       	std	Z+11, r24	; 0x0b
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("Blinker");
  while (true) {
    palTogglePad(IOPORT2, PORTB_LED1);
    1824:	c0 e2       	ldi	r28, 0x20	; 32
    1826:	85 b1       	in	r24, 0x05	; 5
    1828:	8c 27       	eor	r24, r28
    182a:	85 b9       	out	0x05, r24	; 5
    chThdSleepMilliseconds(1000);
    182c:	88 e0       	ldi	r24, 0x08	; 8
    182e:	9d e3       	ldi	r25, 0x3D	; 61
    1830:	1d d9       	rcall	.-3526   	; 0xa6c <chThdSleep>
    1832:	f9 cf       	rjmp	.-14     	; 0x1826 <Thread1+0x12>

00001834 <main>:
    1834:	20 da       	rcall	.-3008   	; 0xc76 <halInit>
    1836:	0e 94 2d 01 	call	0x25a	; 0x25a <chSysInit>
    183a:	88 dc       	rcall	.-1776   	; 0x114c <i2cInit>
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	8f e3       	ldi	r24, 0x3F	; 63
    1842:	93 e0       	ldi	r25, 0x03	; 3
    1844:	d2 dc       	rcall	.-1628   	; 0x11ea <sdStart>
    1846:	00 e0       	ldi	r16, 0x00	; 0
    1848:	10 e0       	ldi	r17, 0x00	; 0
    184a:	2a e0       	ldi	r18, 0x0A	; 10
    184c:	3c e0       	ldi	r19, 0x0C	; 12
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	61 e8       	ldi	r22, 0x81	; 129
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	80 ef       	ldi	r24, 0xF0	; 240
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	8f d8       	rcall	.-3810   	; 0x978 <chThdCreateStatic>
    185a:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <SD1>
    185e:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <SD1+0x1>
    1862:	02 80       	ldd	r0, Z+2	; 0x02
    1864:	f3 81       	ldd	r31, Z+3	; 0x03
    1866:	e0 2d       	mov	r30, r0
    1868:	4e e0       	ldi	r20, 0x0E	; 14
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	62 e5       	ldi	r22, 0x52	; 82
    186e:	71 e0       	ldi	r23, 0x01	; 1
    1870:	8f e3       	ldi	r24, 0x3F	; 63
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	09 95       	icall
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	9d e3       	ldi	r25, 0x3D	; 61
    187a:	f8 d8       	rcall	.-3600   	; 0xa6c <chThdSleep>
    187c:	fc cf       	rjmp	.-8      	; 0x1876 <main+0x42>

0000187e <vfprintf>:
    187e:	ab e0       	ldi	r26, 0x0B	; 11
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e4 e4       	ldi	r30, 0x44	; 68
    1884:	fc e0       	ldi	r31, 0x0C	; 12
    1886:	d9 c2       	rjmp	.+1458   	; 0x1e3a <__prologue_saves__+0x8>
    1888:	6c 01       	movw	r12, r24
    188a:	7b 01       	movw	r14, r22
    188c:	3a 01       	movw	r6, r20
    188e:	fc 01       	movw	r30, r24
    1890:	17 82       	std	Z+7, r1	; 0x07
    1892:	16 82       	std	Z+6, r1	; 0x06
    1894:	83 81       	ldd	r24, Z+3	; 0x03
    1896:	81 ff       	sbrs	r24, 1
    1898:	f9 c0       	rjmp	.+498    	; 0x1a8c <vfprintf+0x20e>
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	4c 01       	movw	r8, r24
    18a0:	f6 01       	movw	r30, r12
    18a2:	b3 80       	ldd	r11, Z+3	; 0x03
    18a4:	f7 01       	movw	r30, r14
    18a6:	b3 fc       	sbrc	r11, 3
    18a8:	05 91       	lpm	r16, Z+
    18aa:	b3 fe       	sbrs	r11, 3
    18ac:	01 91       	ld	r16, Z+
    18ae:	7f 01       	movw	r14, r30
    18b0:	00 23       	and	r16, r16
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <vfprintf+0x38>
    18b4:	e7 c0       	rjmp	.+462    	; 0x1a84 <vfprintf+0x206>
    18b6:	05 32       	cpi	r16, 0x25	; 37
    18b8:	49 f4       	brne	.+18     	; 0x18cc <vfprintf+0x4e>
    18ba:	b3 fc       	sbrc	r11, 3
    18bc:	05 91       	lpm	r16, Z+
    18be:	b3 fe       	sbrs	r11, 3
    18c0:	01 91       	ld	r16, Z+
    18c2:	7f 01       	movw	r14, r30
    18c4:	05 32       	cpi	r16, 0x25	; 37
    18c6:	11 f0       	breq	.+4      	; 0x18cc <vfprintf+0x4e>
    18c8:	10 e0       	ldi	r17, 0x00	; 0
    18ca:	17 c0       	rjmp	.+46     	; 0x18fa <vfprintf+0x7c>
    18cc:	b6 01       	movw	r22, r12
    18ce:	80 2f       	mov	r24, r16
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	40 d3       	rcall	.+1664   	; 0x1f54 <fputc>
    18d4:	53 01       	movw	r10, r6
    18d6:	35 01       	movw	r6, r10
    18d8:	e3 cf       	rjmp	.-58     	; 0x18a0 <vfprintf+0x22>
    18da:	00 23       	and	r16, r16
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <vfprintf+0x62>
    18de:	d2 c0       	rjmp	.+420    	; 0x1a84 <vfprintf+0x206>
    18e0:	60 2f       	mov	r22, r16
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	e3 d2       	rcall	.+1478   	; 0x1eb0 <strchr_P>
    18ea:	89 2b       	or	r24, r25
    18ec:	49 f0       	breq	.+18     	; 0x1900 <vfprintf+0x82>
    18ee:	f7 01       	movw	r30, r14
    18f0:	b3 fc       	sbrc	r11, 3
    18f2:	05 91       	lpm	r16, Z+
    18f4:	b3 fe       	sbrs	r11, 3
    18f6:	01 91       	ld	r16, Z+
    18f8:	7f 01       	movw	r14, r30
    18fa:	17 ff       	sbrs	r17, 7
    18fc:	ee cf       	rjmp	.-36     	; 0x18da <vfprintf+0x5c>
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <vfprintf+0x8a>
    1900:	03 32       	cpi	r16, 0x23	; 35
    1902:	39 f0       	breq	.+14     	; 0x1912 <vfprintf+0x94>
    1904:	0c 36       	cpi	r16, 0x6C	; 108
    1906:	19 f0       	breq	.+6      	; 0x190e <vfprintf+0x90>
    1908:	01 11       	cpse	r16, r1
    190a:	05 c0       	rjmp	.+10     	; 0x1916 <vfprintf+0x98>
    190c:	bb c0       	rjmp	.+374    	; 0x1a84 <vfprintf+0x206>
    190e:	10 68       	ori	r17, 0x80	; 128
    1910:	ee cf       	rjmp	.-36     	; 0x18ee <vfprintf+0x70>
    1912:	10 e1       	ldi	r17, 0x10	; 16
    1914:	ec cf       	rjmp	.-40     	; 0x18ee <vfprintf+0x70>
    1916:	60 2f       	mov	r22, r16
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	8a ef       	ldi	r24, 0xFA	; 250
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	c8 d2       	rcall	.+1424   	; 0x1eb0 <strchr_P>
    1920:	89 2b       	or	r24, r25
    1922:	41 f0       	breq	.+16     	; 0x1934 <vfprintf+0xb6>
    1924:	53 01       	movw	r10, r6
    1926:	f4 e0       	ldi	r31, 0x04	; 4
    1928:	af 0e       	add	r10, r31
    192a:	b1 1c       	adc	r11, r1
    192c:	b6 01       	movw	r22, r12
    192e:	8f e3       	ldi	r24, 0x3F	; 63
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	10 c0       	rjmp	.+32     	; 0x1954 <vfprintf+0xd6>
    1934:	03 36       	cpi	r16, 0x63	; 99
    1936:	31 f0       	breq	.+12     	; 0x1944 <vfprintf+0xc6>
    1938:	03 37       	cpi	r16, 0x73	; 115
    193a:	71 f0       	breq	.+28     	; 0x1958 <vfprintf+0xda>
    193c:	03 35       	cpi	r16, 0x53	; 83
    193e:	01 f5       	brne	.+64     	; 0x1980 <vfprintf+0x102>
    1940:	11 60       	ori	r17, 0x01	; 1
    1942:	0a c0       	rjmp	.+20     	; 0x1958 <vfprintf+0xda>
    1944:	53 01       	movw	r10, r6
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	a8 0e       	add	r10, r24
    194a:	b1 1c       	adc	r11, r1
    194c:	b6 01       	movw	r22, r12
    194e:	f3 01       	movw	r30, r6
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	ff d2       	rcall	.+1534   	; 0x1f54 <fputc>
    1956:	bf cf       	rjmp	.-130    	; 0x18d6 <vfprintf+0x58>
    1958:	53 01       	movw	r10, r6
    195a:	f2 e0       	ldi	r31, 0x02	; 2
    195c:	af 0e       	add	r10, r31
    195e:	b1 1c       	adc	r11, r1
    1960:	f3 01       	movw	r30, r6
    1962:	60 80       	ld	r6, Z
    1964:	71 80       	ldd	r7, Z+1	; 0x01
    1966:	f3 01       	movw	r30, r6
    1968:	10 fd       	sbrc	r17, 0
    196a:	85 91       	lpm	r24, Z+
    196c:	10 ff       	sbrs	r17, 0
    196e:	81 91       	ld	r24, Z+
    1970:	3f 01       	movw	r6, r30
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <vfprintf+0xfa>
    1976:	af cf       	rjmp	.-162    	; 0x18d6 <vfprintf+0x58>
    1978:	b6 01       	movw	r22, r12
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	eb d2       	rcall	.+1494   	; 0x1f54 <fputc>
    197e:	f3 cf       	rjmp	.-26     	; 0x1966 <vfprintf+0xe8>
    1980:	04 36       	cpi	r16, 0x64	; 100
    1982:	11 f0       	breq	.+4      	; 0x1988 <vfprintf+0x10a>
    1984:	09 36       	cpi	r16, 0x69	; 105
    1986:	21 f5       	brne	.+72     	; 0x19d0 <vfprintf+0x152>
    1988:	53 01       	movw	r10, r6
    198a:	17 ff       	sbrs	r17, 7
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <vfprintf+0x122>
    198e:	f4 e0       	ldi	r31, 0x04	; 4
    1990:	af 0e       	add	r10, r31
    1992:	b1 1c       	adc	r11, r1
    1994:	f3 01       	movw	r30, r6
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	93 81       	ldd	r25, Z+3	; 0x03
    199e:	0a c0       	rjmp	.+20     	; 0x19b4 <vfprintf+0x136>
    19a0:	f2 e0       	ldi	r31, 0x02	; 2
    19a2:	af 0e       	add	r10, r31
    19a4:	b1 1c       	adc	r11, r1
    19a6:	f3 01       	movw	r30, r6
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	07 2e       	mov	r0, r23
    19ae:	00 0c       	add	r0, r0
    19b0:	88 0b       	sbc	r24, r24
    19b2:	99 0b       	sbc	r25, r25
    19b4:	1f 7e       	andi	r17, 0xEF	; 239
    19b6:	97 ff       	sbrs	r25, 7
    19b8:	08 c0       	rjmp	.+16     	; 0x19ca <vfprintf+0x14c>
    19ba:	90 95       	com	r25
    19bc:	80 95       	com	r24
    19be:	70 95       	com	r23
    19c0:	61 95       	neg	r22
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	10 64       	ori	r17, 0x40	; 64
    19ca:	2a e0       	ldi	r18, 0x0A	; 10
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	30 c0       	rjmp	.+96     	; 0x1a30 <vfprintf+0x1b2>
    19d0:	00 37       	cpi	r16, 0x70	; 112
    19d2:	91 f0       	breq	.+36     	; 0x19f8 <vfprintf+0x17a>
    19d4:	40 f4       	brcc	.+16     	; 0x19e6 <vfprintf+0x168>
    19d6:	08 35       	cpi	r16, 0x58	; 88
    19d8:	a1 f0       	breq	.+40     	; 0x1a02 <vfprintf+0x184>
    19da:	0f 36       	cpi	r16, 0x6F	; 111
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <vfprintf+0x162>
    19de:	52 c0       	rjmp	.+164    	; 0x1a84 <vfprintf+0x206>
    19e0:	28 e0       	ldi	r18, 0x08	; 8
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	11 c0       	rjmp	.+34     	; 0x1a08 <vfprintf+0x18a>
    19e6:	05 37       	cpi	r16, 0x75	; 117
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <vfprintf+0x172>
    19ea:	08 37       	cpi	r16, 0x78	; 120
    19ec:	31 f0       	breq	.+12     	; 0x19fa <vfprintf+0x17c>
    19ee:	4a c0       	rjmp	.+148    	; 0x1a84 <vfprintf+0x206>
    19f0:	1f 7e       	andi	r17, 0xEF	; 239
    19f2:	2a e0       	ldi	r18, 0x0A	; 10
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	08 c0       	rjmp	.+16     	; 0x1a08 <vfprintf+0x18a>
    19f8:	10 61       	ori	r17, 0x10	; 16
    19fa:	14 62       	ori	r17, 0x24	; 36
    19fc:	20 e1       	ldi	r18, 0x10	; 16
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <vfprintf+0x18a>
    1a02:	14 60       	ori	r17, 0x04	; 4
    1a04:	20 e1       	ldi	r18, 0x10	; 16
    1a06:	32 e0       	ldi	r19, 0x02	; 2
    1a08:	53 01       	movw	r10, r6
    1a0a:	17 ff       	sbrs	r17, 7
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <vfprintf+0x1a2>
    1a0e:	f4 e0       	ldi	r31, 0x04	; 4
    1a10:	af 0e       	add	r10, r31
    1a12:	b1 1c       	adc	r11, r1
    1a14:	f3 01       	movw	r30, r6
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	08 c0       	rjmp	.+16     	; 0x1a30 <vfprintf+0x1b2>
    1a20:	f2 e0       	ldi	r31, 0x02	; 2
    1a22:	af 0e       	add	r10, r31
    1a24:	b1 1c       	adc	r11, r1
    1a26:	f3 01       	movw	r30, r6
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a4 01       	movw	r20, r8
    1a32:	e5 d2       	rcall	.+1482   	; 0x1ffe <__ultoa_invert>
    1a34:	08 2f       	mov	r16, r24
    1a36:	08 19       	sub	r16, r8
    1a38:	16 ff       	sbrs	r17, 6
    1a3a:	04 c0       	rjmp	.+8      	; 0x1a44 <vfprintf+0x1c6>
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	8d e2       	ldi	r24, 0x2D	; 45
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	88 d2       	rcall	.+1296   	; 0x1f54 <fputc>
    1a44:	14 ff       	sbrs	r17, 4
    1a46:	13 c0       	rjmp	.+38     	; 0x1a6e <vfprintf+0x1f0>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e0 0f       	add	r30, r16
    1a4c:	f1 1d       	adc	r31, r1
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 33       	cpi	r24, 0x30	; 48
    1a52:	69 f0       	breq	.+26     	; 0x1a6e <vfprintf+0x1f0>
    1a54:	b6 01       	movw	r22, r12
    1a56:	80 e3       	ldi	r24, 0x30	; 48
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	7c d2       	rcall	.+1272   	; 0x1f54 <fputc>
    1a5c:	12 ff       	sbrs	r17, 2
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <vfprintf+0x1f0>
    1a60:	10 72       	andi	r17, 0x20	; 32
    1a62:	81 2f       	mov	r24, r17
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	b6 01       	movw	r22, r12
    1a68:	88 5a       	subi	r24, 0xA8	; 168
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	73 d2       	rcall	.+1254   	; 0x1f54 <fputc>
    1a6e:	01 50       	subi	r16, 0x01	; 1
    1a70:	f4 01       	movw	r30, r8
    1a72:	e0 0f       	add	r30, r16
    1a74:	f1 1d       	adc	r31, r1
    1a76:	80 81       	ld	r24, Z
    1a78:	b6 01       	movw	r22, r12
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	6b d2       	rcall	.+1238   	; 0x1f54 <fputc>
    1a7e:	01 11       	cpse	r16, r1
    1a80:	f6 cf       	rjmp	.-20     	; 0x1a6e <vfprintf+0x1f0>
    1a82:	29 cf       	rjmp	.-430    	; 0x18d6 <vfprintf+0x58>
    1a84:	f6 01       	movw	r30, r12
    1a86:	86 81       	ldd	r24, Z+6	; 0x06
    1a88:	97 81       	ldd	r25, Z+7	; 0x07
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x212>
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	9f ef       	ldi	r25, 0xFF	; 255
    1a90:	2b 96       	adiw	r28, 0x0b	; 11
    1a92:	ee e0       	ldi	r30, 0x0E	; 14
    1a94:	ee c1       	rjmp	.+988    	; 0x1e72 <__epilogue_restores__+0x8>

00001a96 <putval>:
    1a96:	20 fd       	sbrc	r18, 0
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <putval+0x16>
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	23 fd       	sbrc	r18, 3
    1a9e:	05 c0       	rjmp	.+10     	; 0x1aaa <putval+0x14>
    1aa0:	22 ff       	sbrs	r18, 2
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <putval+0x12>
    1aa4:	73 83       	std	Z+3, r23	; 0x03
    1aa6:	62 83       	std	Z+2, r22	; 0x02
    1aa8:	51 83       	std	Z+1, r21	; 0x01
    1aaa:	40 83       	st	Z, r20
    1aac:	08 95       	ret

00001aae <mulacc>:
    1aae:	44 fd       	sbrc	r20, 4
    1ab0:	17 c0       	rjmp	.+46     	; 0x1ae0 <mulacc+0x32>
    1ab2:	46 fd       	sbrc	r20, 6
    1ab4:	17 c0       	rjmp	.+46     	; 0x1ae4 <mulacc+0x36>
    1ab6:	ab 01       	movw	r20, r22
    1ab8:	bc 01       	movw	r22, r24
    1aba:	da 01       	movw	r26, r20
    1abc:	fb 01       	movw	r30, r22
    1abe:	aa 0f       	add	r26, r26
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	ee 1f       	adc	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	10 94       	com	r1
    1ac8:	d1 f7       	brne	.-12     	; 0x1abe <mulacc+0x10>
    1aca:	4a 0f       	add	r20, r26
    1acc:	5b 1f       	adc	r21, r27
    1ace:	6e 1f       	adc	r22, r30
    1ad0:	7f 1f       	adc	r23, r31
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	ba 01       	movw	r22, r20
    1ad6:	66 0f       	add	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	88 1f       	adc	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	09 c0       	rjmp	.+18     	; 0x1af2 <mulacc+0x44>
    1ae0:	33 e0       	ldi	r19, 0x03	; 3
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <mulacc+0x38>
    1ae4:	34 e0       	ldi	r19, 0x04	; 4
    1ae6:	66 0f       	add	r22, r22
    1ae8:	77 1f       	adc	r23, r23
    1aea:	88 1f       	adc	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	31 50       	subi	r19, 0x01	; 1
    1af0:	d1 f7       	brne	.-12     	; 0x1ae6 <mulacc+0x38>
    1af2:	62 0f       	add	r22, r18
    1af4:	71 1d       	adc	r23, r1
    1af6:	81 1d       	adc	r24, r1
    1af8:	91 1d       	adc	r25, r1
    1afa:	08 95       	ret

00001afc <skip_spaces>:
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	8c 01       	movw	r16, r24
    1b06:	c8 01       	movw	r24, r16
    1b08:	e7 d1       	rcall	.+974    	; 0x1ed8 <fgetc>
    1b0a:	ec 01       	movw	r28, r24
    1b0c:	97 fd       	sbrc	r25, 7
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <skip_spaces+0x20>
    1b10:	c7 d1       	rcall	.+910    	; 0x1ea0 <isspace>
    1b12:	89 2b       	or	r24, r25
    1b14:	c1 f7       	brne	.-16     	; 0x1b06 <skip_spaces+0xa>
    1b16:	b8 01       	movw	r22, r16
    1b18:	ce 01       	movw	r24, r28
    1b1a:	58 d2       	rcall	.+1200   	; 0x1fcc <ungetc>
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <conv_int>:
    1b28:	8f 92       	push	r8
    1b2a:	9f 92       	push	r9
    1b2c:	af 92       	push	r10
    1b2e:	bf 92       	push	r11
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	8c 01       	movw	r16, r24
    1b3e:	d6 2f       	mov	r29, r22
    1b40:	7a 01       	movw	r14, r20
    1b42:	b2 2e       	mov	r11, r18
    1b44:	c9 d1       	rcall	.+914    	; 0x1ed8 <fgetc>
    1b46:	9c 01       	movw	r18, r24
    1b48:	33 27       	eor	r19, r19
    1b4a:	2b 32       	cpi	r18, 0x2B	; 43
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	31 f0       	breq	.+12     	; 0x1b5c <conv_int+0x34>
    1b50:	2d 32       	cpi	r18, 0x2D	; 45
    1b52:	31 05       	cpc	r19, r1
    1b54:	59 f4       	brne	.+22     	; 0x1b6c <conv_int+0x44>
    1b56:	8b 2d       	mov	r24, r11
    1b58:	80 68       	ori	r24, 0x80	; 128
    1b5a:	b8 2e       	mov	r11, r24
    1b5c:	d1 50       	subi	r29, 0x01	; 1
    1b5e:	11 f4       	brne	.+4      	; 0x1b64 <conv_int+0x3c>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	61 c0       	rjmp	.+194    	; 0x1c26 <conv_int+0xfe>
    1b64:	c8 01       	movw	r24, r16
    1b66:	b8 d1       	rcall	.+880    	; 0x1ed8 <fgetc>
    1b68:	97 fd       	sbrc	r25, 7
    1b6a:	fa cf       	rjmp	.-12     	; 0x1b60 <conv_int+0x38>
    1b6c:	cb 2d       	mov	r28, r11
    1b6e:	cd 7f       	andi	r28, 0xFD	; 253
    1b70:	2b 2d       	mov	r18, r11
    1b72:	20 73       	andi	r18, 0x30	; 48
    1b74:	f9 f4       	brne	.+62     	; 0x1bb4 <conv_int+0x8c>
    1b76:	80 33       	cpi	r24, 0x30	; 48
    1b78:	e9 f4       	brne	.+58     	; 0x1bb4 <conv_int+0x8c>
    1b7a:	aa 24       	eor	r10, r10
    1b7c:	aa 94       	dec	r10
    1b7e:	ad 0e       	add	r10, r29
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <conv_int+0x5c>
    1b82:	3e c0       	rjmp	.+124    	; 0x1c00 <conv_int+0xd8>
    1b84:	c8 01       	movw	r24, r16
    1b86:	a8 d1       	rcall	.+848    	; 0x1ed8 <fgetc>
    1b88:	97 fd       	sbrc	r25, 7
    1b8a:	3a c0       	rjmp	.+116    	; 0x1c00 <conv_int+0xd8>
    1b8c:	9c 01       	movw	r18, r24
    1b8e:	2f 7d       	andi	r18, 0xDF	; 223
    1b90:	33 27       	eor	r19, r19
    1b92:	28 35       	cpi	r18, 0x58	; 88
    1b94:	31 05       	cpc	r19, r1
    1b96:	41 f4       	brne	.+16     	; 0x1ba8 <conv_int+0x80>
    1b98:	c2 64       	ori	r28, 0x42	; 66
    1b9a:	d2 50       	subi	r29, 0x02	; 2
    1b9c:	89 f1       	breq	.+98     	; 0x1c00 <conv_int+0xd8>
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	9b d1       	rcall	.+822    	; 0x1ed8 <fgetc>
    1ba2:	97 ff       	sbrs	r25, 7
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <conv_int+0x8c>
    1ba6:	2c c0       	rjmp	.+88     	; 0x1c00 <conv_int+0xd8>
    1ba8:	b6 fe       	sbrs	r11, 6
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <conv_int+0x88>
    1bac:	c2 60       	ori	r28, 0x02	; 2
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <conv_int+0x8a>
    1bb0:	c2 61       	ori	r28, 0x12	; 18
    1bb2:	da 2d       	mov	r29, r10
    1bb4:	81 2c       	mov	r8, r1
    1bb6:	91 2c       	mov	r9, r1
    1bb8:	54 01       	movw	r10, r8
    1bba:	20 ed       	ldi	r18, 0xD0	; 208
    1bbc:	28 0f       	add	r18, r24
    1bbe:	28 30       	cpi	r18, 0x08	; 8
    1bc0:	78 f0       	brcs	.+30     	; 0x1be0 <conv_int+0xb8>
    1bc2:	c4 ff       	sbrs	r28, 4
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <conv_int+0xa4>
    1bc6:	b8 01       	movw	r22, r16
    1bc8:	01 d2       	rcall	.+1026   	; 0x1fcc <ungetc>
    1bca:	17 c0       	rjmp	.+46     	; 0x1bfa <conv_int+0xd2>
    1bcc:	2a 30       	cpi	r18, 0x0A	; 10
    1bce:	40 f0       	brcs	.+16     	; 0x1be0 <conv_int+0xb8>
    1bd0:	c6 ff       	sbrs	r28, 6
    1bd2:	f9 cf       	rjmp	.-14     	; 0x1bc6 <conv_int+0x9e>
    1bd4:	2f 7d       	andi	r18, 0xDF	; 223
    1bd6:	3f ee       	ldi	r19, 0xEF	; 239
    1bd8:	32 0f       	add	r19, r18
    1bda:	36 30       	cpi	r19, 0x06	; 6
    1bdc:	a0 f7       	brcc	.-24     	; 0x1bc6 <conv_int+0x9e>
    1bde:	27 50       	subi	r18, 0x07	; 7
    1be0:	4c 2f       	mov	r20, r28
    1be2:	c5 01       	movw	r24, r10
    1be4:	b4 01       	movw	r22, r8
    1be6:	63 df       	rcall	.-314    	; 0x1aae <mulacc>
    1be8:	4b 01       	movw	r8, r22
    1bea:	5c 01       	movw	r10, r24
    1bec:	c2 60       	ori	r28, 0x02	; 2
    1bee:	d1 50       	subi	r29, 0x01	; 1
    1bf0:	51 f0       	breq	.+20     	; 0x1c06 <conv_int+0xde>
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	71 d1       	rcall	.+738    	; 0x1ed8 <fgetc>
    1bf6:	97 ff       	sbrs	r25, 7
    1bf8:	e0 cf       	rjmp	.-64     	; 0x1bba <conv_int+0x92>
    1bfa:	c1 fd       	sbrc	r28, 1
    1bfc:	04 c0       	rjmp	.+8      	; 0x1c06 <conv_int+0xde>
    1bfe:	b0 cf       	rjmp	.-160    	; 0x1b60 <conv_int+0x38>
    1c00:	81 2c       	mov	r8, r1
    1c02:	91 2c       	mov	r9, r1
    1c04:	54 01       	movw	r10, r8
    1c06:	c7 ff       	sbrs	r28, 7
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <conv_int+0xf2>
    1c0a:	b0 94       	com	r11
    1c0c:	a0 94       	com	r10
    1c0e:	90 94       	com	r9
    1c10:	80 94       	com	r8
    1c12:	81 1c       	adc	r8, r1
    1c14:	91 1c       	adc	r9, r1
    1c16:	a1 1c       	adc	r10, r1
    1c18:	b1 1c       	adc	r11, r1
    1c1a:	2c 2f       	mov	r18, r28
    1c1c:	b5 01       	movw	r22, r10
    1c1e:	a4 01       	movw	r20, r8
    1c20:	c7 01       	movw	r24, r14
    1c22:	39 df       	rcall	.-398    	; 0x1a96 <putval>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	08 95       	ret

00001c3c <vfscanf>:
    1c3c:	a0 e0       	ldi	r26, 0x00	; 0
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e3 e2       	ldi	r30, 0x23	; 35
    1c42:	fe e0       	ldi	r31, 0x0E	; 14
    1c44:	f9 c0       	rjmp	.+498    	; 0x1e38 <__prologue_saves__+0x6>
    1c46:	6c 01       	movw	r12, r24
    1c48:	eb 01       	movw	r28, r22
    1c4a:	5a 01       	movw	r10, r20
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	17 82       	std	Z+7, r1	; 0x07
    1c50:	16 82       	std	Z+6, r1	; 0x06
    1c52:	51 2c       	mov	r5, r1
    1c54:	f6 01       	movw	r30, r12
    1c56:	f3 80       	ldd	r15, Z+3	; 0x03
    1c58:	fe 01       	movw	r30, r28
    1c5a:	f3 fc       	sbrc	r15, 3
    1c5c:	85 91       	lpm	r24, Z+
    1c5e:	f3 fe       	sbrs	r15, 3
    1c60:	81 91       	ld	r24, Z+
    1c62:	18 2f       	mov	r17, r24
    1c64:	ef 01       	movw	r28, r30
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <vfscanf+0x30>
    1c6a:	d4 c0       	rjmp	.+424    	; 0x1e14 <vfscanf+0x1d8>
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	18 d1       	rcall	.+560    	; 0x1ea0 <isspace>
    1c70:	89 2b       	or	r24, r25
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <vfscanf+0x3e>
    1c74:	c6 01       	movw	r24, r12
    1c76:	42 df       	rcall	.-380    	; 0x1afc <skip_spaces>
    1c78:	ed cf       	rjmp	.-38     	; 0x1c54 <vfscanf+0x18>
    1c7a:	15 32       	cpi	r17, 0x25	; 37
    1c7c:	41 f4       	brne	.+16     	; 0x1c8e <vfscanf+0x52>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	f3 fc       	sbrc	r15, 3
    1c82:	15 91       	lpm	r17, Z+
    1c84:	f3 fe       	sbrs	r15, 3
    1c86:	11 91       	ld	r17, Z+
    1c88:	ef 01       	movw	r28, r30
    1c8a:	15 32       	cpi	r17, 0x25	; 37
    1c8c:	71 f4       	brne	.+28     	; 0x1caa <vfscanf+0x6e>
    1c8e:	c6 01       	movw	r24, r12
    1c90:	23 d1       	rcall	.+582    	; 0x1ed8 <fgetc>
    1c92:	97 fd       	sbrc	r25, 7
    1c94:	bd c0       	rjmp	.+378    	; 0x1e10 <vfscanf+0x1d4>
    1c96:	41 2f       	mov	r20, r17
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	33 27       	eor	r19, r19
    1c9e:	24 17       	cp	r18, r20
    1ca0:	35 07       	cpc	r19, r21
    1ca2:	c1 f2       	breq	.-80     	; 0x1c54 <vfscanf+0x18>
    1ca4:	b6 01       	movw	r22, r12
    1ca6:	92 d1       	rcall	.+804    	; 0x1fcc <ungetc>
    1ca8:	b5 c0       	rjmp	.+362    	; 0x1e14 <vfscanf+0x1d8>
    1caa:	1a 32       	cpi	r17, 0x2A	; 42
    1cac:	39 f4       	brne	.+14     	; 0x1cbc <vfscanf+0x80>
    1cae:	f3 fc       	sbrc	r15, 3
    1cb0:	15 91       	lpm	r17, Z+
    1cb2:	f3 fe       	sbrs	r15, 3
    1cb4:	11 91       	ld	r17, Z+
    1cb6:	ef 01       	movw	r28, r30
    1cb8:	01 e0       	ldi	r16, 0x01	; 1
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <vfscanf+0x82>
    1cbc:	00 e0       	ldi	r16, 0x00	; 0
    1cbe:	e1 2c       	mov	r14, r1
    1cc0:	20 ed       	ldi	r18, 0xD0	; 208
    1cc2:	21 0f       	add	r18, r17
    1cc4:	2a 30       	cpi	r18, 0x0A	; 10
    1cc6:	78 f4       	brcc	.+30     	; 0x1ce6 <vfscanf+0xaa>
    1cc8:	02 60       	ori	r16, 0x02	; 2
    1cca:	6e 2d       	mov	r22, r14
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	ec de       	rcall	.-552    	; 0x1aae <mulacc>
    1cd6:	e6 2e       	mov	r14, r22
    1cd8:	fe 01       	movw	r30, r28
    1cda:	f3 fc       	sbrc	r15, 3
    1cdc:	15 91       	lpm	r17, Z+
    1cde:	f3 fe       	sbrs	r15, 3
    1ce0:	11 91       	ld	r17, Z+
    1ce2:	ef 01       	movw	r28, r30
    1ce4:	ed cf       	rjmp	.-38     	; 0x1cc0 <vfscanf+0x84>
    1ce6:	01 ff       	sbrs	r16, 1
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <vfscanf+0xb4>
    1cea:	e1 10       	cpse	r14, r1
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <vfscanf+0xb8>
    1cee:	92 c0       	rjmp	.+292    	; 0x1e14 <vfscanf+0x1d8>
    1cf0:	ee 24       	eor	r14, r14
    1cf2:	ea 94       	dec	r14
    1cf4:	18 36       	cpi	r17, 0x68	; 104
    1cf6:	19 f0       	breq	.+6      	; 0x1cfe <vfscanf+0xc2>
    1cf8:	1c 36       	cpi	r17, 0x6C	; 108
    1cfa:	51 f0       	breq	.+20     	; 0x1d10 <vfscanf+0xd4>
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <vfscanf+0xe2>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	f3 fc       	sbrc	r15, 3
    1d02:	15 91       	lpm	r17, Z+
    1d04:	f3 fe       	sbrs	r15, 3
    1d06:	11 91       	ld	r17, Z+
    1d08:	ef 01       	movw	r28, r30
    1d0a:	18 36       	cpi	r17, 0x68	; 104
    1d0c:	41 f4       	brne	.+16     	; 0x1d1e <vfscanf+0xe2>
    1d0e:	08 60       	ori	r16, 0x08	; 8
    1d10:	04 60       	ori	r16, 0x04	; 4
    1d12:	fe 01       	movw	r30, r28
    1d14:	f3 fc       	sbrc	r15, 3
    1d16:	15 91       	lpm	r17, Z+
    1d18:	f3 fe       	sbrs	r15, 3
    1d1a:	11 91       	ld	r17, Z+
    1d1c:	ef 01       	movw	r28, r30
    1d1e:	11 23       	and	r17, r17
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <vfscanf+0xe8>
    1d22:	78 c0       	rjmp	.+240    	; 0x1e14 <vfscanf+0x1d8>
    1d24:	61 2f       	mov	r22, r17
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	81 e1       	ldi	r24, 0x11	; 17
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	c1 d0       	rcall	.+386    	; 0x1eb0 <strchr_P>
    1d2e:	89 2b       	or	r24, r25
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <vfscanf+0xf8>
    1d32:	70 c0       	rjmp	.+224    	; 0x1e14 <vfscanf+0x1d8>
    1d34:	00 fd       	sbrc	r16, 0
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <vfscanf+0x10a>
    1d38:	f5 01       	movw	r30, r10
    1d3a:	80 80       	ld	r8, Z
    1d3c:	91 80       	ldd	r9, Z+1	; 0x01
    1d3e:	c5 01       	movw	r24, r10
    1d40:	02 96       	adiw	r24, 0x02	; 2
    1d42:	5c 01       	movw	r10, r24
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <vfscanf+0x10e>
    1d46:	81 2c       	mov	r8, r1
    1d48:	91 2c       	mov	r9, r1
    1d4a:	1e 36       	cpi	r17, 0x6E	; 110
    1d4c:	49 f4       	brne	.+18     	; 0x1d60 <vfscanf+0x124>
    1d4e:	f6 01       	movw	r30, r12
    1d50:	46 81       	ldd	r20, Z+6	; 0x06
    1d52:	57 81       	ldd	r21, Z+7	; 0x07
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	20 2f       	mov	r18, r16
    1d5a:	c4 01       	movw	r24, r8
    1d5c:	9c de       	rcall	.-712    	; 0x1a96 <putval>
    1d5e:	7a cf       	rjmp	.-268    	; 0x1c54 <vfscanf+0x18>
    1d60:	13 36       	cpi	r17, 0x63	; 99
    1d62:	a1 f4       	brne	.+40     	; 0x1d8c <vfscanf+0x150>
    1d64:	01 fd       	sbrc	r16, 1
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <vfscanf+0x130>
    1d68:	ee 24       	eor	r14, r14
    1d6a:	e3 94       	inc	r14
    1d6c:	c6 01       	movw	r24, r12
    1d6e:	b4 d0       	rcall	.+360    	; 0x1ed8 <fgetc>
    1d70:	97 fd       	sbrc	r25, 7
    1d72:	4e c0       	rjmp	.+156    	; 0x1e10 <vfscanf+0x1d4>
    1d74:	81 14       	cp	r8, r1
    1d76:	91 04       	cpc	r9, r1
    1d78:	29 f0       	breq	.+10     	; 0x1d84 <vfscanf+0x148>
    1d7a:	f4 01       	movw	r30, r8
    1d7c:	80 83       	st	Z, r24
    1d7e:	c4 01       	movw	r24, r8
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	4c 01       	movw	r8, r24
    1d84:	ea 94       	dec	r14
    1d86:	e1 10       	cpse	r14, r1
    1d88:	f1 cf       	rjmp	.-30     	; 0x1d6c <vfscanf+0x130>
    1d8a:	3e c0       	rjmp	.+124    	; 0x1e08 <vfscanf+0x1cc>
    1d8c:	c6 01       	movw	r24, r12
    1d8e:	b6 de       	rcall	.-660    	; 0x1afc <skip_spaces>
    1d90:	97 fd       	sbrc	r25, 7
    1d92:	3e c0       	rjmp	.+124    	; 0x1e10 <vfscanf+0x1d4>
    1d94:	1f 36       	cpi	r17, 0x6F	; 111
    1d96:	49 f1       	breq	.+82     	; 0x1dea <vfscanf+0x1ae>
    1d98:	28 f4       	brcc	.+10     	; 0x1da4 <vfscanf+0x168>
    1d9a:	14 36       	cpi	r17, 0x64	; 100
    1d9c:	21 f1       	breq	.+72     	; 0x1de6 <vfscanf+0x1aa>
    1d9e:	19 36       	cpi	r17, 0x69	; 105
    1da0:	39 f1       	breq	.+78     	; 0x1df0 <vfscanf+0x1b4>
    1da2:	25 c0       	rjmp	.+74     	; 0x1dee <vfscanf+0x1b2>
    1da4:	13 37       	cpi	r17, 0x73	; 115
    1da6:	71 f0       	breq	.+28     	; 0x1dc4 <vfscanf+0x188>
    1da8:	15 37       	cpi	r17, 0x75	; 117
    1daa:	e9 f0       	breq	.+58     	; 0x1de6 <vfscanf+0x1aa>
    1dac:	20 c0       	rjmp	.+64     	; 0x1dee <vfscanf+0x1b2>
    1dae:	81 14       	cp	r8, r1
    1db0:	91 04       	cpc	r9, r1
    1db2:	29 f0       	breq	.+10     	; 0x1dbe <vfscanf+0x182>
    1db4:	f4 01       	movw	r30, r8
    1db6:	60 82       	st	Z, r6
    1db8:	c4 01       	movw	r24, r8
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	4c 01       	movw	r8, r24
    1dbe:	ea 94       	dec	r14
    1dc0:	ee 20       	and	r14, r14
    1dc2:	59 f0       	breq	.+22     	; 0x1dda <vfscanf+0x19e>
    1dc4:	c6 01       	movw	r24, r12
    1dc6:	88 d0       	rcall	.+272    	; 0x1ed8 <fgetc>
    1dc8:	3c 01       	movw	r6, r24
    1dca:	97 fd       	sbrc	r25, 7
    1dcc:	06 c0       	rjmp	.+12     	; 0x1dda <vfscanf+0x19e>
    1dce:	68 d0       	rcall	.+208    	; 0x1ea0 <isspace>
    1dd0:	89 2b       	or	r24, r25
    1dd2:	69 f3       	breq	.-38     	; 0x1dae <vfscanf+0x172>
    1dd4:	b6 01       	movw	r22, r12
    1dd6:	c3 01       	movw	r24, r6
    1dd8:	f9 d0       	rcall	.+498    	; 0x1fcc <ungetc>
    1dda:	81 14       	cp	r8, r1
    1ddc:	91 04       	cpc	r9, r1
    1dde:	a1 f0       	breq	.+40     	; 0x1e08 <vfscanf+0x1cc>
    1de0:	f4 01       	movw	r30, r8
    1de2:	10 82       	st	Z, r1
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <vfscanf+0x1cc>
    1de6:	00 62       	ori	r16, 0x20	; 32
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <vfscanf+0x1b4>
    1dea:	00 61       	ori	r16, 0x10	; 16
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <vfscanf+0x1b4>
    1dee:	00 64       	ori	r16, 0x40	; 64
    1df0:	20 2f       	mov	r18, r16
    1df2:	a4 01       	movw	r20, r8
    1df4:	6e 2d       	mov	r22, r14
    1df6:	c6 01       	movw	r24, r12
    1df8:	97 de       	rcall	.-722    	; 0x1b28 <conv_int>
    1dfa:	81 11       	cpse	r24, r1
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <vfscanf+0x1cc>
    1dfe:	f6 01       	movw	r30, r12
    1e00:	83 81       	ldd	r24, Z+3	; 0x03
    1e02:	80 73       	andi	r24, 0x30	; 48
    1e04:	29 f4       	brne	.+10     	; 0x1e10 <vfscanf+0x1d4>
    1e06:	06 c0       	rjmp	.+12     	; 0x1e14 <vfscanf+0x1d8>
    1e08:	00 fd       	sbrc	r16, 0
    1e0a:	24 cf       	rjmp	.-440    	; 0x1c54 <vfscanf+0x18>
    1e0c:	53 94       	inc	r5
    1e0e:	22 cf       	rjmp	.-444    	; 0x1c54 <vfscanf+0x18>
    1e10:	55 20       	and	r5, r5
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <vfscanf+0x1de>
    1e14:	85 2d       	mov	r24, r5
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <vfscanf+0x1e2>
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	9f ef       	ldi	r25, 0xFF	; 255
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	ef e0       	ldi	r30, 0x0F	; 15
    1e24:	25 c0       	rjmp	.+74     	; 0x1e70 <__epilogue_restores__+0x6>

00001e26 <__tablejump2__>:
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	05 90       	lpm	r0, Z+
    1e2c:	f4 91       	lpm	r31, Z
    1e2e:	e0 2d       	mov	r30, r0
    1e30:	09 94       	ijmp

00001e32 <__prologue_saves__>:
    1e32:	2f 92       	push	r2
    1e34:	3f 92       	push	r3
    1e36:	4f 92       	push	r4
    1e38:	5f 92       	push	r5
    1e3a:	6f 92       	push	r6
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	ca 1b       	sub	r28, r26
    1e5c:	db 0b       	sbc	r29, r27
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	09 94       	ijmp

00001e6a <__epilogue_restores__>:
    1e6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e6c:	39 88       	ldd	r3, Y+17	; 0x11
    1e6e:	48 88       	ldd	r4, Y+16	; 0x10
    1e70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1e80:	df 80       	ldd	r13, Y+7	; 0x07
    1e82:	ee 80       	ldd	r14, Y+6	; 0x06
    1e84:	fd 80       	ldd	r15, Y+5	; 0x05
    1e86:	0c 81       	ldd	r16, Y+4	; 0x04
    1e88:	1b 81       	ldd	r17, Y+3	; 0x03
    1e8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1e8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e8e:	ce 0f       	add	r28, r30
    1e90:	d1 1d       	adc	r29, r1
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	ed 01       	movw	r28, r26
    1e9e:	08 95       	ret

00001ea0 <isspace>:
    1ea0:	91 11       	cpse	r25, r1
    1ea2:	0b c1       	rjmp	.+534    	; 0x20ba <__ctype_isfalse>
    1ea4:	80 32       	cpi	r24, 0x20	; 32
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <isspace+0xe>
    1ea8:	89 50       	subi	r24, 0x09	; 9
    1eaa:	85 50       	subi	r24, 0x05	; 5
    1eac:	d0 f7       	brcc	.-12     	; 0x1ea2 <isspace+0x2>
    1eae:	08 95       	ret

00001eb0 <strchr_P>:
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	05 90       	lpm	r0, Z+
    1eb4:	06 16       	cp	r0, r22
    1eb6:	21 f0       	breq	.+8      	; 0x1ec0 <strchr_P+0x10>
    1eb8:	00 20       	and	r0, r0
    1eba:	d9 f7       	brne	.-10     	; 0x1eb2 <strchr_P+0x2>
    1ebc:	c0 01       	movw	r24, r0
    1ebe:	08 95       	ret
    1ec0:	31 97       	sbiw	r30, 0x01	; 1
    1ec2:	cf 01       	movw	r24, r30
    1ec4:	08 95       	ret

00001ec6 <memcpy>:
    1ec6:	fb 01       	movw	r30, r22
    1ec8:	dc 01       	movw	r26, r24
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <memcpy+0xa>
    1ecc:	01 90       	ld	r0, Z+
    1ece:	0d 92       	st	X+, r0
    1ed0:	41 50       	subi	r20, 0x01	; 1
    1ed2:	50 40       	sbci	r21, 0x00	; 0
    1ed4:	d8 f7       	brcc	.-10     	; 0x1ecc <memcpy+0x6>
    1ed6:	08 95       	ret

00001ed8 <fgetc>:
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	ec 01       	movw	r28, r24
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	20 ff       	sbrs	r18, 0
    1ee2:	33 c0       	rjmp	.+102    	; 0x1f4a <fgetc+0x72>
    1ee4:	26 ff       	sbrs	r18, 6
    1ee6:	0a c0       	rjmp	.+20     	; 0x1efc <fgetc+0x24>
    1ee8:	2f 7b       	andi	r18, 0xBF	; 191
    1eea:	2b 83       	std	Y+3, r18	; 0x03
    1eec:	8e 81       	ldd	r24, Y+6	; 0x06
    1eee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	9f 83       	std	Y+7, r25	; 0x07
    1ef4:	8e 83       	std	Y+6, r24	; 0x06
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	29 c0       	rjmp	.+82     	; 0x1f4e <fgetc+0x76>
    1efc:	22 ff       	sbrs	r18, 2
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <fgetc+0x46>
    1f00:	e8 81       	ld	r30, Y
    1f02:	f9 81       	ldd	r31, Y+1	; 0x01
    1f04:	80 81       	ld	r24, Z
    1f06:	08 2e       	mov	r0, r24
    1f08:	00 0c       	add	r0, r0
    1f0a:	99 0b       	sbc	r25, r25
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	19 f4       	brne	.+6      	; 0x1f16 <fgetc+0x3e>
    1f10:	20 62       	ori	r18, 0x20	; 32
    1f12:	2b 83       	std	Y+3, r18	; 0x03
    1f14:	1a c0       	rjmp	.+52     	; 0x1f4a <fgetc+0x72>
    1f16:	31 96       	adiw	r30, 0x01	; 1
    1f18:	f9 83       	std	Y+1, r31	; 0x01
    1f1a:	e8 83       	st	Y, r30
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <fgetc+0x62>
    1f1e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f20:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f22:	09 95       	icall
    1f24:	97 ff       	sbrs	r25, 7
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <fgetc+0x62>
    1f28:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	11 f0       	breq	.+4      	; 0x1f32 <fgetc+0x5a>
    1f2e:	80 e2       	ldi	r24, 0x20	; 32
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <fgetc+0x5c>
    1f32:	80 e1       	ldi	r24, 0x10	; 16
    1f34:	82 2b       	or	r24, r18
    1f36:	8b 83       	std	Y+3, r24	; 0x03
    1f38:	08 c0       	rjmp	.+16     	; 0x1f4a <fgetc+0x72>
    1f3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f3e:	2f 5f       	subi	r18, 0xFF	; 255
    1f40:	3f 4f       	sbci	r19, 0xFF	; 255
    1f42:	3f 83       	std	Y+7, r19	; 0x07
    1f44:	2e 83       	std	Y+6, r18	; 0x06
    1f46:	99 27       	eor	r25, r25
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <fgetc+0x76>
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <fputc>:
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	fb 01       	movw	r30, r22
    1f5e:	23 81       	ldd	r18, Z+3	; 0x03
    1f60:	21 fd       	sbrc	r18, 1
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <fputc+0x16>
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	2c c0       	rjmp	.+88     	; 0x1fc2 <fputc+0x6e>
    1f6a:	22 ff       	sbrs	r18, 2
    1f6c:	16 c0       	rjmp	.+44     	; 0x1f9a <fputc+0x46>
    1f6e:	46 81       	ldd	r20, Z+6	; 0x06
    1f70:	57 81       	ldd	r21, Z+7	; 0x07
    1f72:	24 81       	ldd	r18, Z+4	; 0x04
    1f74:	35 81       	ldd	r19, Z+5	; 0x05
    1f76:	42 17       	cp	r20, r18
    1f78:	53 07       	cpc	r21, r19
    1f7a:	44 f4       	brge	.+16     	; 0x1f8c <fputc+0x38>
    1f7c:	a0 81       	ld	r26, Z
    1f7e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f80:	9d 01       	movw	r18, r26
    1f82:	2f 5f       	subi	r18, 0xFF	; 255
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	31 83       	std	Z+1, r19	; 0x01
    1f88:	20 83       	st	Z, r18
    1f8a:	8c 93       	st	X, r24
    1f8c:	26 81       	ldd	r18, Z+6	; 0x06
    1f8e:	37 81       	ldd	r19, Z+7	; 0x07
    1f90:	2f 5f       	subi	r18, 0xFF	; 255
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	37 83       	std	Z+7, r19	; 0x07
    1f96:	26 83       	std	Z+6, r18	; 0x06
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <fputc+0x6e>
    1f9a:	8b 01       	movw	r16, r22
    1f9c:	ec 01       	movw	r28, r24
    1f9e:	fb 01       	movw	r30, r22
    1fa0:	00 84       	ldd	r0, Z+8	; 0x08
    1fa2:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	09 95       	icall
    1fa8:	89 2b       	or	r24, r25
    1faa:	e1 f6       	brne	.-72     	; 0x1f64 <fputc+0x10>
    1fac:	d8 01       	movw	r26, r16
    1fae:	16 96       	adiw	r26, 0x06	; 6
    1fb0:	8d 91       	ld	r24, X+
    1fb2:	9c 91       	ld	r25, X
    1fb4:	17 97       	sbiw	r26, 0x07	; 7
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	17 96       	adiw	r26, 0x07	; 7
    1fba:	9c 93       	st	X, r25
    1fbc:	8e 93       	st	-X, r24
    1fbe:	16 97       	sbiw	r26, 0x06	; 6
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	08 95       	ret

00001fcc <ungetc>:
    1fcc:	fb 01       	movw	r30, r22
    1fce:	23 81       	ldd	r18, Z+3	; 0x03
    1fd0:	20 ff       	sbrs	r18, 0
    1fd2:	12 c0       	rjmp	.+36     	; 0x1ff8 <ungetc+0x2c>
    1fd4:	26 fd       	sbrc	r18, 6
    1fd6:	10 c0       	rjmp	.+32     	; 0x1ff8 <ungetc+0x2c>
    1fd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	93 07       	cpc	r25, r19
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <ungetc+0x2c>
    1fe0:	82 83       	std	Z+2, r24	; 0x02
    1fe2:	2f 7d       	andi	r18, 0xDF	; 223
    1fe4:	20 64       	ori	r18, 0x40	; 64
    1fe6:	23 83       	std	Z+3, r18	; 0x03
    1fe8:	26 81       	ldd	r18, Z+6	; 0x06
    1fea:	37 81       	ldd	r19, Z+7	; 0x07
    1fec:	21 50       	subi	r18, 0x01	; 1
    1fee:	31 09       	sbc	r19, r1
    1ff0:	37 83       	std	Z+7, r19	; 0x07
    1ff2:	26 83       	std	Z+6, r18	; 0x06
    1ff4:	99 27       	eor	r25, r25
    1ff6:	08 95       	ret
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	9f ef       	ldi	r25, 0xFF	; 255
    1ffc:	08 95       	ret

00001ffe <__ultoa_invert>:
    1ffe:	fa 01       	movw	r30, r20
    2000:	aa 27       	eor	r26, r26
    2002:	28 30       	cpi	r18, 0x08	; 8
    2004:	51 f1       	breq	.+84     	; 0x205a <__ultoa_invert+0x5c>
    2006:	20 31       	cpi	r18, 0x10	; 16
    2008:	81 f1       	breq	.+96     	; 0x206a <__ultoa_invert+0x6c>
    200a:	e8 94       	clt
    200c:	6f 93       	push	r22
    200e:	6e 7f       	andi	r22, 0xFE	; 254
    2010:	6e 5f       	subi	r22, 0xFE	; 254
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	8f 4f       	sbci	r24, 0xFF	; 255
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	af 4f       	sbci	r26, 0xFF	; 255
    201a:	b1 e0       	ldi	r27, 0x01	; 1
    201c:	3e d0       	rcall	.+124    	; 0x209a <__ultoa_invert+0x9c>
    201e:	b4 e0       	ldi	r27, 0x04	; 4
    2020:	3c d0       	rcall	.+120    	; 0x209a <__ultoa_invert+0x9c>
    2022:	67 0f       	add	r22, r23
    2024:	78 1f       	adc	r23, r24
    2026:	89 1f       	adc	r24, r25
    2028:	9a 1f       	adc	r25, r26
    202a:	a1 1d       	adc	r26, r1
    202c:	68 0f       	add	r22, r24
    202e:	79 1f       	adc	r23, r25
    2030:	8a 1f       	adc	r24, r26
    2032:	91 1d       	adc	r25, r1
    2034:	a1 1d       	adc	r26, r1
    2036:	6a 0f       	add	r22, r26
    2038:	71 1d       	adc	r23, r1
    203a:	81 1d       	adc	r24, r1
    203c:	91 1d       	adc	r25, r1
    203e:	a1 1d       	adc	r26, r1
    2040:	20 d0       	rcall	.+64     	; 0x2082 <__ultoa_invert+0x84>
    2042:	09 f4       	brne	.+2      	; 0x2046 <__ultoa_invert+0x48>
    2044:	68 94       	set
    2046:	3f 91       	pop	r19
    2048:	2a e0       	ldi	r18, 0x0A	; 10
    204a:	26 9f       	mul	r18, r22
    204c:	11 24       	eor	r1, r1
    204e:	30 19       	sub	r19, r0
    2050:	30 5d       	subi	r19, 0xD0	; 208
    2052:	31 93       	st	Z+, r19
    2054:	de f6       	brtc	.-74     	; 0x200c <__ultoa_invert+0xe>
    2056:	cf 01       	movw	r24, r30
    2058:	08 95       	ret
    205a:	46 2f       	mov	r20, r22
    205c:	47 70       	andi	r20, 0x07	; 7
    205e:	40 5d       	subi	r20, 0xD0	; 208
    2060:	41 93       	st	Z+, r20
    2062:	b3 e0       	ldi	r27, 0x03	; 3
    2064:	0f d0       	rcall	.+30     	; 0x2084 <__ultoa_invert+0x86>
    2066:	c9 f7       	brne	.-14     	; 0x205a <__ultoa_invert+0x5c>
    2068:	f6 cf       	rjmp	.-20     	; 0x2056 <__ultoa_invert+0x58>
    206a:	46 2f       	mov	r20, r22
    206c:	4f 70       	andi	r20, 0x0F	; 15
    206e:	40 5d       	subi	r20, 0xD0	; 208
    2070:	4a 33       	cpi	r20, 0x3A	; 58
    2072:	18 f0       	brcs	.+6      	; 0x207a <__ultoa_invert+0x7c>
    2074:	49 5d       	subi	r20, 0xD9	; 217
    2076:	31 fd       	sbrc	r19, 1
    2078:	40 52       	subi	r20, 0x20	; 32
    207a:	41 93       	st	Z+, r20
    207c:	02 d0       	rcall	.+4      	; 0x2082 <__ultoa_invert+0x84>
    207e:	a9 f7       	brne	.-22     	; 0x206a <__ultoa_invert+0x6c>
    2080:	ea cf       	rjmp	.-44     	; 0x2056 <__ultoa_invert+0x58>
    2082:	b4 e0       	ldi	r27, 0x04	; 4
    2084:	a6 95       	lsr	r26
    2086:	97 95       	ror	r25
    2088:	87 95       	ror	r24
    208a:	77 95       	ror	r23
    208c:	67 95       	ror	r22
    208e:	ba 95       	dec	r27
    2090:	c9 f7       	brne	.-14     	; 0x2084 <__ultoa_invert+0x86>
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	61 05       	cpc	r22, r1
    2096:	71 05       	cpc	r23, r1
    2098:	08 95       	ret
    209a:	9b 01       	movw	r18, r22
    209c:	ac 01       	movw	r20, r24
    209e:	0a 2e       	mov	r0, r26
    20a0:	06 94       	lsr	r0
    20a2:	57 95       	ror	r21
    20a4:	47 95       	ror	r20
    20a6:	37 95       	ror	r19
    20a8:	27 95       	ror	r18
    20aa:	ba 95       	dec	r27
    20ac:	c9 f7       	brne	.-14     	; 0x20a0 <__ultoa_invert+0xa2>
    20ae:	62 0f       	add	r22, r18
    20b0:	73 1f       	adc	r23, r19
    20b2:	84 1f       	adc	r24, r20
    20b4:	95 1f       	adc	r25, r21
    20b6:	a0 1d       	adc	r26, r0
    20b8:	08 95       	ret

000020ba <__ctype_isfalse>:
    20ba:	99 27       	eor	r25, r25
    20bc:	88 27       	eor	r24, r24

000020be <__ctype_istrue>:
    20be:	08 95       	ret

000020c0 <_exit>:
    20c0:	f8 94       	cli

000020c2 <__stop_program>:
    20c2:	ff cf       	rjmp	.-2      	; 0x20c2 <__stop_program>
