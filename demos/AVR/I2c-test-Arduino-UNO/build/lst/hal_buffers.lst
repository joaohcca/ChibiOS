   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB180:
  15               		.file 1 "../../../os/hal/src/hal_buffers.c"
   1:../../../os/hal/src/hal_buffers.c **** /*
   2:../../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_buffers.c **** 
   4:../../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_buffers.c **** 
   8:../../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_buffers.c **** 
  10:../../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../../os/hal/src/hal_buffers.c **** */
  16:../../../os/hal/src/hal_buffers.c **** 
  17:../../../os/hal/src/hal_buffers.c **** /**
  18:../../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../../os/hal/src/hal_buffers.c ****  *
  21:../../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  32:../../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../../os/hal/src/hal_buffers.c ****  *          .
  36:../../../os/hal/src/hal_buffers.c ****  * @{
  37:../../../os/hal/src/hal_buffers.c ****  */
  38:../../../os/hal/src/hal_buffers.c **** 
  39:../../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../../os/hal/src/hal_buffers.c **** 
  41:../../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../../os/hal/src/hal_buffers.c **** 
  43:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_buffers.c **** 
  47:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../../os/hal/src/hal_buffers.c **** 
  51:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../../os/hal/src/hal_buffers.c **** 
  55:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../../os/hal/src/hal_buffers.c **** 
  59:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../../os/hal/src/hal_buffers.c **** 
  63:../../../os/hal/src/hal_buffers.c **** /**
  64:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../../os/hal/src/hal_buffers.c ****  *
  66:../../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../../os/hal/src/hal_buffers.c ****  *
  74:../../../os/hal/src/hal_buffers.c ****  * @init
  75:../../../os/hal/src/hal_buffers.c ****  */
  76:../../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c FC01      		movw r30,r24
  48               	.LVL1:
  49               	.LBB202:
  50               	.LBB203:
  51               	.LBB204:
  52               	.LBB205:
  53               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  54               		.loc 2 539 0
  55 000e 9183      		std Z+1,r25
  56 0010 8083      		st Z,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  57               		.loc 2 540 0
  58 0012 9383      		std Z+3,r25
  59 0014 8283      		std Z+2,r24
  60               	.LVL2:
  61               	.LBE205:
  62               	.LBE204:
  63               	.LBE203:
  64               	.LBE202:
  78:../../../os/hal/src/hal_buffers.c **** 
  79:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../../os/hal/src/hal_buffers.c **** 
  81:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  65               		.loc 1 82 0
  66 0016 6483      		std Z+4,r22
  83:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  67               		.loc 1 83 0
  68 0018 1682      		std Z+6,__zero_reg__
  69 001a 1582      		std Z+5,__zero_reg__
  84:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  70               		.loc 1 84 0
  71 001c 5287      		std Z+10,r21
  72 001e 4187      		std Z+9,r20
  85:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  73               		.loc 1 85 0
  74 0020 5087      		std Z+8,r21
  75 0022 4783      		std Z+7,r20
  86:../../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  76               		.loc 1 86 0
  77 0024 2E5F      		subi r18,-2
  78 0026 3F4F      		sbci r19,-1
  79               	.LVL3:
  80 0028 209F      		mul r18,r16
  81 002a C001      		movw r24,r0
  82 002c 219F      		mul r18,r17
  83 002e 900D      		add r25,r0
  84 0030 309F      		mul r19,r16
  85 0032 900D      		add r25,r0
  86 0034 1124      		clr r1
  87               	.LVL4:
  88 0036 840F      		add r24,r20
  89 0038 951F      		adc r25,r21
  90 003a 9487      		std Z+12,r25
  91 003c 8387      		std Z+11,r24
  87:../../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  92               		.loc 1 87 0
  93 003e 3687      		std Z+14,r19
  94 0040 2587      		std Z+13,r18
  88:../../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  95               		.loc 1 88 0
  96 0042 108B      		std Z+16,r17
  97 0044 0787      		std Z+15,r16
  89:../../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
  98               		.loc 1 89 0
  99 0046 528B      		std Z+18,r21
 100 0048 418B      		std Z+17,r20
  90:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 101               		.loc 1 90 0
 102 004a 148A      		std Z+20,__zero_reg__
 103 004c 138A      		std Z+19,__zero_reg__
  91:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 104               		.loc 1 91 0
 105 004e 168A      		std Z+22,__zero_reg__
 106 0050 158A      		std Z+21,__zero_reg__
  92:../../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
 107               		.loc 1 92 0
 108 0052 F08E      		std Z+24,r15
 109 0054 E78A      		std Z+23,r14
  93:../../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 110               		.loc 1 93 0
 111 0056 D28E      		std Z+26,r13
 112 0058 C18E      		std Z+25,r12
 113               	/* epilogue start */
  94:../../../os/hal/src/hal_buffers.c **** }
 114               		.loc 1 94 0
 115 005a 1F91      		pop r17
 116 005c 0F91      		pop r16
 117               	.LVL5:
 118 005e FF90      		pop r15
 119 0060 EF90      		pop r14
 120               	.LVL6:
 121 0062 DF90      		pop r13
 122 0064 CF90      		pop r12
 123               	.LVL7:
 124 0066 0895      		ret
 125               		.cfi_endproc
 126               	.LFE180:
 128               		.section	.text.ibqResetI,"ax",@progbits
 129               	.global	ibqResetI
 131               	ibqResetI:
 132               	.LFB181:
  95:../../../os/hal/src/hal_buffers.c **** 
  96:../../../os/hal/src/hal_buffers.c **** /**
  97:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../../os/hal/src/hal_buffers.c ****  *
 103:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../../os/hal/src/hal_buffers.c ****  *
 105:../../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../../os/hal/src/hal_buffers.c ****  */
 107:../../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 133               		.loc 1 107 0
 134               		.cfi_startproc
 135               	.LVL8:
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 140 0000 FC01      		movw r30,r24
 108:../../../os/hal/src/hal_buffers.c **** 
 109:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../../os/hal/src/hal_buffers.c **** 
 111:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 141               		.loc 1 111 0
 142 0002 1682      		std Z+6,__zero_reg__
 143 0004 1582      		std Z+5,__zero_reg__
 112:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 144               		.loc 1 112 0
 145 0006 8189      		ldd r24,Z+17
 146 0008 9289      		ldd r25,Z+18
 147               	.LVL9:
 148 000a 9287      		std Z+10,r25
 149 000c 8187      		std Z+9,r24
 113:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 150               		.loc 1 113 0
 151 000e 9087      		std Z+8,r25
 152 0010 8783      		std Z+7,r24
 114:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 153               		.loc 1 114 0
 154 0012 148A      		std Z+20,__zero_reg__
 155 0014 138A      		std Z+19,__zero_reg__
 115:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 156               		.loc 1 115 0
 157 0016 168A      		std Z+22,__zero_reg__
 158 0018 158A      		std Z+21,__zero_reg__
 159               	.LVL10:
 160               	.LBB206:
 161               	.LBB207:
 162               		.file 3 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if 0
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:../../../os/hal/osal/rt/osal.h ****  */
 176:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:../../../os/hal/osal/rt/osal.h **** #endif
 178:../../../os/hal/osal/rt/osal.h **** 
 179:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:../../../os/hal/osal/rt/osal.h **** /**
 181:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:../../../os/hal/osal/rt/osal.h ****  */
 188:../../../os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:../../../os/hal/osal/rt/osal.h **** 
 190:../../../os/hal/osal/rt/osal.h **** /**
 191:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:../../../os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:../../../os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:../../../os/hal/osal/rt/osal.h ****  */
 195:../../../os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:../../../os/hal/osal/rt/osal.h **** 
 197:../../../os/hal/osal/rt/osal.h **** /**
 198:../../../os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:../../../os/hal/osal/rt/osal.h ****  */
 205:../../../os/hal/osal/rt/osal.h **** struct event_source {
 206:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:../../../os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:../../../os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:../../../os/hal/osal/rt/osal.h **** };
 210:../../../os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /**
 213:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:../../../os/hal/osal/rt/osal.h ****  */
 217:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:../../../os/hal/osal/rt/osal.h **** #else
 221:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:../../../os/hal/osal/rt/osal.h **** #endif
 223:../../../os/hal/osal/rt/osal.h **** 
 224:../../../os/hal/osal/rt/osal.h **** #if 0
 225:../../../os/hal/osal/rt/osal.h **** /**
 226:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:../../../os/hal/osal/rt/osal.h ****  */
 232:../../../os/hal/osal/rt/osal.h **** typedef struct {
 233:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:../../../os/hal/osal/rt/osal.h **** #endif
 236:../../../os/hal/osal/rt/osal.h **** 
 237:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:../../../os/hal/osal/rt/osal.h **** 
 241:../../../os/hal/osal/rt/osal.h **** /**
 242:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:../../../os/hal/osal/rt/osal.h ****  * @{
 244:../../../os/hal/osal/rt/osal.h ****  */
 245:../../../os/hal/osal/rt/osal.h **** /**
 246:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 249:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:../../../os/hal/osal/rt/osal.h ****  *
 254:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:../../../os/hal/osal/rt/osal.h ****  *
 257:../../../os/hal/osal/rt/osal.h ****  * @api
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 266:../../../os/hal/osal/rt/osal.h ****  *
 267:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:../../../os/hal/osal/rt/osal.h ****  *
 269:../../../os/hal/osal/rt/osal.h ****  * @api
 270:../../../os/hal/osal/rt/osal.h ****  */
 271:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:../../../os/hal/osal/rt/osal.h **** 
 273:../../../os/hal/osal/rt/osal.h **** /**
 274:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:../../../os/hal/osal/rt/osal.h ****  */
 277:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:../../../os/hal/osal/rt/osal.h **** 
 279:../../../os/hal/osal/rt/osal.h **** /**
 280:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:../../../os/hal/osal/rt/osal.h ****  */
 283:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:../../../os/hal/osal/rt/osal.h **** /** @} */
 285:../../../os/hal/osal/rt/osal.h **** 
 286:../../../os/hal/osal/rt/osal.h **** /**
 287:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:../../../os/hal/osal/rt/osal.h ****  * @{
 289:../../../os/hal/osal/rt/osal.h ****  */
 290:../../../os/hal/osal/rt/osal.h **** /**
 291:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:../../../os/hal/osal/rt/osal.h ****  */
 293:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:../../../os/hal/osal/rt/osal.h **** 
 295:../../../os/hal/osal/rt/osal.h **** /**
 296:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:../../../os/hal/osal/rt/osal.h ****  */
 299:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:../../../os/hal/osal/rt/osal.h **** 
 301:../../../os/hal/osal/rt/osal.h **** /**
 302:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:../../../os/hal/osal/rt/osal.h ****  */
 305:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:../../../os/hal/osal/rt/osal.h **** 
 307:../../../os/hal/osal/rt/osal.h **** /**
 308:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:../../../os/hal/osal/rt/osal.h ****  *
 311:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:../../../os/hal/osal/rt/osal.h ****  */
 313:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:../../../os/hal/osal/rt/osal.h **** /** @} */
 315:../../../os/hal/osal/rt/osal.h **** 
 316:../../../os/hal/osal/rt/osal.h **** /**
 317:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:../../../os/hal/osal/rt/osal.h ****  * @{
 319:../../../os/hal/osal/rt/osal.h ****  */
 320:../../../os/hal/osal/rt/osal.h **** /**
 321:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/hal/osal/rt/osal.h ****  *
 325:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:../../../os/hal/osal/rt/osal.h ****  *
 328:../../../os/hal/osal/rt/osal.h ****  * @api
 329:../../../os/hal/osal/rt/osal.h ****  */
 330:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:../../../os/hal/osal/rt/osal.h **** 
 332:../../../os/hal/osal/rt/osal.h **** /**
 333:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:../../../os/hal/osal/rt/osal.h ****  *
 337:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:../../../os/hal/osal/rt/osal.h ****  *
 340:../../../os/hal/osal/rt/osal.h ****  * @api
 341:../../../os/hal/osal/rt/osal.h ****  */
 342:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:../../../os/hal/osal/rt/osal.h **** 
 344:../../../os/hal/osal/rt/osal.h **** /**
 345:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:../../../os/hal/osal/rt/osal.h ****  *
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:../../../os/hal/osal/rt/osal.h **** /** @} */
 356:../../../os/hal/osal/rt/osal.h **** 
 357:../../../os/hal/osal/rt/osal.h **** /**
 358:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:../../../os/hal/osal/rt/osal.h ****  * @{
 360:../../../os/hal/osal/rt/osal.h ****  */
 361:../../../os/hal/osal/rt/osal.h **** /**
 362:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:../../../os/hal/osal/rt/osal.h ****  *
 370:../../../os/hal/osal/rt/osal.h ****  * @api
 371:../../../os/hal/osal/rt/osal.h ****  */
 372:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:../../../os/hal/osal/rt/osal.h **** 
 374:../../../os/hal/osal/rt/osal.h **** /**
 375:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:../../../os/hal/osal/rt/osal.h ****  *
 384:../../../os/hal/osal/rt/osal.h ****  * @api
 385:../../../os/hal/osal/rt/osal.h ****  */
 386:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:../../../os/hal/osal/rt/osal.h **** 
 388:../../../os/hal/osal/rt/osal.h **** /**
 389:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:../../../os/hal/osal/rt/osal.h ****  *
 394:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:../../../os/hal/osal/rt/osal.h ****  *
 398:../../../os/hal/osal/rt/osal.h ****  * @api
 399:../../../os/hal/osal/rt/osal.h ****  */
 400:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:../../../os/hal/osal/rt/osal.h **** /** @} */
 402:../../../os/hal/osal/rt/osal.h **** 
 403:../../../os/hal/osal/rt/osal.h **** /**
 404:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:../../../os/hal/osal/rt/osal.h ****  * @{
 406:../../../os/hal/osal/rt/osal.h ****  */
 407:../../../os/hal/osal/rt/osal.h **** /**
 408:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:../../../os/hal/osal/rt/osal.h ****  *
 413:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:../../../os/hal/osal/rt/osal.h ****  *
 415:../../../os/hal/osal/rt/osal.h ****  * @api
 416:../../../os/hal/osal/rt/osal.h ****  */
 417:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:../../../os/hal/osal/rt/osal.h **** 
 419:../../../os/hal/osal/rt/osal.h **** /**
 420:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:../../../os/hal/osal/rt/osal.h ****  *
 426:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:../../../os/hal/osal/rt/osal.h ****  *
 428:../../../os/hal/osal/rt/osal.h ****  * @api
 429:../../../os/hal/osal/rt/osal.h ****  */
 430:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** /**
 433:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 435:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:../../../os/hal/osal/rt/osal.h ****  *
 439:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:../../../os/hal/osal/rt/osal.h ****  *
 441:../../../os/hal/osal/rt/osal.h ****  * @api
 442:../../../os/hal/osal/rt/osal.h ****  */
 443:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:../../../os/hal/osal/rt/osal.h **** /** @} */
 445:../../../os/hal/osal/rt/osal.h **** 
 446:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:../../../os/hal/osal/rt/osal.h **** 
 450:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:../../../os/hal/osal/rt/osal.h **** extern "C" {
 452:../../../os/hal/osal/rt/osal.h **** #endif
 453:../../../os/hal/osal/rt/osal.h **** 
 454:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:../../../os/hal/osal/rt/osal.h **** }
 456:../../../os/hal/osal/rt/osal.h **** #endif
 457:../../../os/hal/osal/rt/osal.h **** 
 458:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h **** /**
 463:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:../../../os/hal/osal/rt/osal.h ****  *
 465:../../../os/hal/osal/rt/osal.h ****  * @api
 466:../../../os/hal/osal/rt/osal.h ****  */
 467:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:../../../os/hal/osal/rt/osal.h **** 
 469:../../../os/hal/osal/rt/osal.h **** }
 470:../../../os/hal/osal/rt/osal.h **** 
 471:../../../os/hal/osal/rt/osal.h **** /**
 472:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:../../../os/hal/osal/rt/osal.h ****  *
 474:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:../../../os/hal/osal/rt/osal.h ****  *
 476:../../../os/hal/osal/rt/osal.h ****  * @api
 477:../../../os/hal/osal/rt/osal.h ****  */
 478:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:../../../os/hal/osal/rt/osal.h **** 
 480:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:../../../os/hal/osal/rt/osal.h **** }
 482:../../../os/hal/osal/rt/osal.h **** 
 483:../../../os/hal/osal/rt/osal.h **** /**
 484:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:../../../os/hal/osal/rt/osal.h ****  *
 486:../../../os/hal/osal/rt/osal.h ****  * @special
 487:../../../os/hal/osal/rt/osal.h ****  */
 488:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:../../../os/hal/osal/rt/osal.h **** 
 490:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 491:../../../os/hal/osal/rt/osal.h **** }
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h **** /**
 494:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:../../../os/hal/osal/rt/osal.h ****  *
 496:../../../os/hal/osal/rt/osal.h ****  * @special
 497:../../../os/hal/osal/rt/osal.h ****  */
 498:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:../../../os/hal/osal/rt/osal.h **** 
 500:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 501:../../../os/hal/osal/rt/osal.h **** }
 502:../../../os/hal/osal/rt/osal.h **** 
 503:../../../os/hal/osal/rt/osal.h **** /**
 504:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:../../../os/hal/osal/rt/osal.h ****  *
 507:../../../os/hal/osal/rt/osal.h ****  * @special
 508:../../../os/hal/osal/rt/osal.h ****  */
 509:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 510:../../../os/hal/osal/rt/osal.h **** 
 511:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 512:../../../os/hal/osal/rt/osal.h **** }
 513:../../../os/hal/osal/rt/osal.h **** 
 514:../../../os/hal/osal/rt/osal.h **** /**
 515:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:../../../os/hal/osal/rt/osal.h ****  *
 518:../../../os/hal/osal/rt/osal.h ****  * @special
 519:../../../os/hal/osal/rt/osal.h ****  */
 520:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 521:../../../os/hal/osal/rt/osal.h **** 
 522:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 523:../../../os/hal/osal/rt/osal.h **** }
 524:../../../os/hal/osal/rt/osal.h **** 
 525:../../../os/hal/osal/rt/osal.h **** /**
 526:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 527:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 528:../../../os/hal/osal/rt/osal.h ****  *
 529:../../../os/hal/osal/rt/osal.h ****  * @special
 530:../../../os/hal/osal/rt/osal.h ****  */
 531:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 532:../../../os/hal/osal/rt/osal.h **** 
 533:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 534:../../../os/hal/osal/rt/osal.h **** }
 535:../../../os/hal/osal/rt/osal.h **** 
 536:../../../os/hal/osal/rt/osal.h **** /**
 537:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 538:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @special
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 550:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 551:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 552:../../../os/hal/osal/rt/osal.h ****  *          is known.
 553:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 554:../../../os/hal/osal/rt/osal.h ****  *
 555:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 556:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 557:../../../os/hal/osal/rt/osal.h ****  *
 558:../../../os/hal/osal/rt/osal.h ****  * @xclass
 559:../../../os/hal/osal/rt/osal.h ****  */
 560:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 561:../../../os/hal/osal/rt/osal.h **** 
 562:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 563:../../../os/hal/osal/rt/osal.h **** }
 564:../../../os/hal/osal/rt/osal.h **** 
 565:../../../os/hal/osal/rt/osal.h **** /**
 566:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 567:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 568:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 569:../../../os/hal/osal/rt/osal.h ****  *
 570:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 571:../../../os/hal/osal/rt/osal.h ****  *
 572:../../../os/hal/osal/rt/osal.h ****  * @xclass
 573:../../../os/hal/osal/rt/osal.h ****  */
 574:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 575:../../../os/hal/osal/rt/osal.h **** 
 576:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 577:../../../os/hal/osal/rt/osal.h **** }
 578:../../../os/hal/osal/rt/osal.h **** 
 579:../../../os/hal/osal/rt/osal.h **** /**
 580:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 581:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 582:../../../os/hal/osal/rt/osal.h ****  *          value.
 583:../../../os/hal/osal/rt/osal.h ****  *
 584:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 585:../../../os/hal/osal/rt/osal.h ****  *
 586:../../../os/hal/osal/rt/osal.h ****  * @xclass
 587:../../../os/hal/osal/rt/osal.h ****  */
 588:../../../os/hal/osal/rt/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 589:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 590:../../../os/hal/osal/rt/osal.h **** 
 591:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 592:../../../os/hal/osal/rt/osal.h **** }
 593:../../../os/hal/osal/rt/osal.h **** #endif
 594:../../../os/hal/osal/rt/osal.h **** 
 595:../../../os/hal/osal/rt/osal.h **** /**
 596:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 597:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 598:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 599:../../../os/hal/osal/rt/osal.h ****  */
 600:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 601:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 604:../../../os/hal/osal/rt/osal.h **** }
 605:../../../os/hal/osal/rt/osal.h **** #endif
 606:../../../os/hal/osal/rt/osal.h **** 
 607:../../../os/hal/osal/rt/osal.h **** /**
 608:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 609:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 610:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 611:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 612:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @sclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 623:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 624:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 626:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 627:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 628:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 629:../../../os/hal/osal/rt/osal.h ****  *
 630:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 631:../../../os/hal/osal/rt/osal.h ****  *
 632:../../../os/hal/osal/rt/osal.h ****  * @xclass
 633:../../../os/hal/osal/rt/osal.h ****  */
 634:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 635:../../../os/hal/osal/rt/osal.h **** 
 636:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 637:../../../os/hal/osal/rt/osal.h **** }
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h **** /**
 640:../../../os/hal/osal/rt/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 641:../../../os/hal/osal/rt/osal.h ****  *
 642:../../../os/hal/osal/rt/osal.h ****  * @param[in] systime   base system time
 643:../../../os/hal/osal/rt/osal.h ****  * @param[in] interval  interval to be added
 644:../../../os/hal/osal/rt/osal.h ****  * @return              The new system time.
 645:../../../os/hal/osal/rt/osal.h ****  *
 646:../../../os/hal/osal/rt/osal.h ****  * @xclass
 647:../../../os/hal/osal/rt/osal.h ****  */
 648:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 649:../../../os/hal/osal/rt/osal.h ****                                      sysinterval_t interval) {
 650:../../../os/hal/osal/rt/osal.h **** 
 651:../../../os/hal/osal/rt/osal.h ****   return chTimeAddX(systime, interval);
 652:../../../os/hal/osal/rt/osal.h **** }
 653:../../../os/hal/osal/rt/osal.h **** 
 654:../../../os/hal/osal/rt/osal.h **** /**
 655:../../../os/hal/osal/rt/osal.h ****  * @brief   Subtracts two system times returning an interval.
 656:../../../os/hal/osal/rt/osal.h ****  *
 657:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     first system time
 658:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       second system time
 659:../../../os/hal/osal/rt/osal.h ****  * @return              The interval representing the time difference.
 660:../../../os/hal/osal/rt/osal.h ****  *
 661:../../../os/hal/osal/rt/osal.h ****  * @xclass
 662:../../../os/hal/osal/rt/osal.h ****  */
 663:../../../os/hal/osal/rt/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 664:../../../os/hal/osal/rt/osal.h **** 
 665:../../../os/hal/osal/rt/osal.h ****   return chTimeDiffX(start, end);
 666:../../../os/hal/osal/rt/osal.h **** }
 667:../../../os/hal/osal/rt/osal.h **** 
 668:../../../os/hal/osal/rt/osal.h **** /**
 669:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 670:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 671:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 672:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 673:../../../os/hal/osal/rt/osal.h ****  *
 674:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 675:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 676:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 677:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 678:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 679:../../../os/hal/osal/rt/osal.h ****  *
 680:../../../os/hal/osal/rt/osal.h ****  * @xclass
 681:../../../os/hal/osal/rt/osal.h ****  */
 682:../../../os/hal/osal/rt/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 683:../../../os/hal/osal/rt/osal.h ****                                       systime_t start,
 684:../../../os/hal/osal/rt/osal.h ****                                       systime_t end) {
 685:../../../os/hal/osal/rt/osal.h **** 
 686:../../../os/hal/osal/rt/osal.h ****   return chTimeIsInRangeX(time, start, end);
 687:../../../os/hal/osal/rt/osal.h **** }
 688:../../../os/hal/osal/rt/osal.h **** 
 689:../../../os/hal/osal/rt/osal.h **** /**
 690:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 691:../../../os/hal/osal/rt/osal.h ****  *
 692:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 693:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 694:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 695:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 696:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 697:../../../os/hal/osal/rt/osal.h ****  *                      .
 698:../../../os/hal/osal/rt/osal.h ****  *
 699:../../../os/hal/osal/rt/osal.h ****  * @sclass
 700:../../../os/hal/osal/rt/osal.h ****  */
 701:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 702:../../../os/hal/osal/rt/osal.h **** 
 703:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(delay);
 704:../../../os/hal/osal/rt/osal.h **** }
 705:../../../os/hal/osal/rt/osal.h **** 
 706:../../../os/hal/osal/rt/osal.h **** /**
 707:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 708:../../../os/hal/osal/rt/osal.h ****  *
 709:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 710:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 711:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 712:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 713:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 714:../../../os/hal/osal/rt/osal.h ****  *                      .
 715:../../../os/hal/osal/rt/osal.h ****  *
 716:../../../os/hal/osal/rt/osal.h ****  * @api
 717:../../../os/hal/osal/rt/osal.h ****  */
 718:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 719:../../../os/hal/osal/rt/osal.h **** 
 720:../../../os/hal/osal/rt/osal.h ****   chThdSleep(delay);
 721:../../../os/hal/osal/rt/osal.h **** }
 722:../../../os/hal/osal/rt/osal.h **** 
 723:../../../os/hal/osal/rt/osal.h **** /**
 724:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/hal/osal/rt/osal.h ****  *          context.
 727:../../../os/hal/osal/rt/osal.h ****  *
 728:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 730:../../../os/hal/osal/rt/osal.h ****  *
 731:../../../os/hal/osal/rt/osal.h ****  * @sclass
 732:../../../os/hal/osal/rt/osal.h ****  */
 733:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 734:../../../os/hal/osal/rt/osal.h **** 
 735:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 736:../../../os/hal/osal/rt/osal.h **** }
 737:../../../os/hal/osal/rt/osal.h **** 
 738:../../../os/hal/osal/rt/osal.h **** /**
 739:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 740:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 741:../../../os/hal/osal/rt/osal.h ****  *          context.
 742:../../../os/hal/osal/rt/osal.h ****  *
 743:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 744:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 745:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 746:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 747:../../../os/hal/osal/rt/osal.h ****  *                        state.
 748:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 749:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 750:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 751:../../../os/hal/osal/rt/osal.h ****  *                      .
 752:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 753:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 754:../../../os/hal/osal/rt/osal.h ****  *
 755:../../../os/hal/osal/rt/osal.h ****  * @sclass
 756:../../../os/hal/osal/rt/osal.h ****  */
 757:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 758:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 759:../../../os/hal/osal/rt/osal.h **** 
 760:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 761:../../../os/hal/osal/rt/osal.h **** }
 762:../../../os/hal/osal/rt/osal.h **** 
 763:../../../os/hal/osal/rt/osal.h **** /**
 764:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 765:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 766:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 767:../../../os/hal/osal/rt/osal.h ****  *
 768:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 769:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 770:../../../os/hal/osal/rt/osal.h ****  *
 771:../../../os/hal/osal/rt/osal.h ****  * @iclass
 772:../../../os/hal/osal/rt/osal.h ****  */
 773:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 774:../../../os/hal/osal/rt/osal.h **** 
 775:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 776:../../../os/hal/osal/rt/osal.h **** }
 777:../../../os/hal/osal/rt/osal.h **** 
 778:../../../os/hal/osal/rt/osal.h **** /**
 779:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 780:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 781:../../../os/hal/osal/rt/osal.h ****  *          context.
 782:../../../os/hal/osal/rt/osal.h ****  *
 783:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 784:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 785:../../../os/hal/osal/rt/osal.h ****  *
 786:../../../os/hal/osal/rt/osal.h ****  * @iclass
 787:../../../os/hal/osal/rt/osal.h ****  */
 788:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 789:../../../os/hal/osal/rt/osal.h **** 
 790:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 791:../../../os/hal/osal/rt/osal.h **** }
 792:../../../os/hal/osal/rt/osal.h **** 
 793:../../../os/hal/osal/rt/osal.h **** /**
 794:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 795:../../../os/hal/osal/rt/osal.h ****  *
 796:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 797:../../../os/hal/osal/rt/osal.h ****  *
 798:../../../os/hal/osal/rt/osal.h ****  * @init
 799:../../../os/hal/osal/rt/osal.h ****  */
 800:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 801:../../../os/hal/osal/rt/osal.h **** 
 802:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 803:../../../os/hal/osal/rt/osal.h **** }
 804:../../../os/hal/osal/rt/osal.h **** 
 805:../../../os/hal/osal/rt/osal.h **** /**
 806:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 807:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 808:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 809:../../../os/hal/osal/rt/osal.h ****  *
 810:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 811:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 812:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 813:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 814:../../../os/hal/osal/rt/osal.h ****  *                        state.
 815:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 816:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 817:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 818:../../../os/hal/osal/rt/osal.h ****  *                      .
 819:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 820:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 821:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 822:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 823:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 824:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 825:../../../os/hal/osal/rt/osal.h ****  *
 826:../../../os/hal/osal/rt/osal.h ****  * @sclass
 827:../../../os/hal/osal/rt/osal.h ****  */
 828:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 829:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 830:../../../os/hal/osal/rt/osal.h **** 
 831:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 832:../../../os/hal/osal/rt/osal.h **** }
 833:../../../os/hal/osal/rt/osal.h **** 
 834:../../../os/hal/osal/rt/osal.h **** /**
 835:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 836:../../../os/hal/osal/rt/osal.h ****  *
 837:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 838:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 839:../../../os/hal/osal/rt/osal.h ****  *
 840:../../../os/hal/osal/rt/osal.h ****  * @iclass
 841:../../../os/hal/osal/rt/osal.h ****  */
 842:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 843:../../../os/hal/osal/rt/osal.h **** 
 844:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 845:../../../os/hal/osal/rt/osal.h **** }
 846:../../../os/hal/osal/rt/osal.h **** 
 847:../../../os/hal/osal/rt/osal.h **** /**
 848:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 849:../../../os/hal/osal/rt/osal.h ****  *
 850:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 851:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 852:../../../os/hal/osal/rt/osal.h ****  *
 853:../../../os/hal/osal/rt/osal.h ****  * @iclass
 854:../../../os/hal/osal/rt/osal.h ****  */
 855:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 856:../../../os/hal/osal/rt/osal.h **** 
 857:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 163               		.loc 3 857 0
 164 001a 6EEF      		ldi r22,lo8(-2)
 165 001c 7FEF      		ldi r23,lo8(-1)
 166 001e CF01      		movw r24,r30
 167 0020 0C94 0000 		jmp chThdDequeueAllI
 168               	.LVL11:
 169               	.LBE207:
 170               	.LBE206:
 171               		.cfi_endproc
 172               	.LFE181:
 174               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 175               	.global	ibqGetEmptyBufferI
 177               	ibqGetEmptyBufferI:
 178               	.LFB182:
 116:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../../os/hal/src/hal_buffers.c **** }
 118:../../../os/hal/src/hal_buffers.c **** 
 119:../../../os/hal/src/hal_buffers.c **** /**
 120:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../../os/hal/src/hal_buffers.c ****  *
 123:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../../os/hal/src/hal_buffers.c ****  *
 127:../../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../../os/hal/src/hal_buffers.c ****  */
 129:../../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 179               		.loc 1 129 0
 180               		.cfi_startproc
 181               	.LVL12:
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
 186 0000 FC01      		movw r30,r24
 130:../../../os/hal/src/hal_buffers.c **** 
 131:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../../os/hal/src/hal_buffers.c **** 
 133:../../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 187               		.loc 1 133 0
 188 0002 2781      		ldd r18,Z+7
 189 0004 3085      		ldd r19,Z+8
 190 0006 8185      		ldd r24,Z+9
 191 0008 9285      		ldd r25,Z+10
 192               	.LVL13:
 193 000a 2817      		cp r18,r24
 194 000c 3907      		cpc r19,r25
 195 000e 01F0      		breq .L11
 196               	.L4:
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../../os/hal/src/hal_buffers.c ****   }
 136:../../../os/hal/src/hal_buffers.c **** 
 137:../../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 197               		.loc 1 137 0
 198 0010 C901      		movw r24,r18
 199 0012 0296      		adiw r24,2
 138:../../../os/hal/src/hal_buffers.c **** }
 200               		.loc 1 138 0
 201 0014 0895      		ret
 202               	.L11:
 133:../../../os/hal/src/hal_buffers.c ****     return NULL;
 203               		.loc 1 133 0 discriminator 1
 204 0016 8581      		ldd r24,Z+5
 205 0018 9681      		ldd r25,Z+6
 206 001a 892B      		or r24,r25
 207 001c 01F0      		breq .L4
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 208               		.loc 1 134 0
 209 001e 80E0      		ldi r24,0
 210 0020 90E0      		ldi r25,0
 211 0022 0895      		ret
 212               		.cfi_endproc
 213               	.LFE182:
 215               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 216               	.global	ibqPostFullBufferI
 218               	ibqPostFullBufferI:
 219               	.LFB183:
 139:../../../os/hal/src/hal_buffers.c **** 
 140:../../../os/hal/src/hal_buffers.c **** /**
 141:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../../os/hal/src/hal_buffers.c ****  *
 143:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../../os/hal/src/hal_buffers.c ****  *
 146:../../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../../os/hal/src/hal_buffers.c ****  */
 148:../../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 220               		.loc 1 148 0
 221               		.cfi_startproc
 222               	.LVL14:
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 0 */
 226               	.L__stack_usage = 0
 227 0000 FC01      		movw r30,r24
 149:../../../os/hal/src/hal_buffers.c **** 
 150:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../../os/hal/src/hal_buffers.c **** 
 152:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../../os/hal/src/hal_buffers.c **** 
 155:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../../os/hal/src/hal_buffers.c ****   *((size_t *)ibqp->bwrptr) = size;
 228               		.loc 1 156 0
 229 0002 A781      		ldd r26,Z+7
 230 0004 B085      		ldd r27,Z+8
 231 0006 1196      		adiw r26,1
 232 0008 7C93      		st X,r23
 233 000a 6E93      		st -X,r22
 157:../../../os/hal/src/hal_buffers.c **** 
 158:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 234               		.loc 1 159 0
 235 000c 2581      		ldd r18,Z+5
 236 000e 3681      		ldd r19,Z+6
 237 0010 2F5F      		subi r18,-1
 238 0012 3F4F      		sbci r19,-1
 239 0014 3683      		std Z+6,r19
 240 0016 2583      		std Z+5,r18
 160:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 241               		.loc 1 160 0
 242 0018 8585      		ldd r24,Z+13
 243 001a 9685      		ldd r25,Z+14
 244               	.LVL15:
 245 001c 8A0F      		add r24,r26
 246 001e 9B1F      		adc r25,r27
 247 0020 9087      		std Z+8,r25
 248 0022 8783      		std Z+7,r24
 161:../../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 249               		.loc 1 161 0
 250 0024 2385      		ldd r18,Z+11
 251 0026 3485      		ldd r19,Z+12
 252 0028 8217      		cp r24,r18
 253 002a 9307      		cpc r25,r19
 254 002c 00F0      		brlo .L13
 162:../../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 255               		.loc 1 162 0
 256 002e 8189      		ldd r24,Z+17
 257 0030 9289      		ldd r25,Z+18
 258 0032 9087      		std Z+8,r25
 259 0034 8783      		std Z+7,r24
 260               	.L13:
 261               	.LVL16:
 262               	.LBB208:
 263               	.LBB209:
 844:../../../os/hal/osal/rt/osal.h **** }
 264               		.loc 3 844 0
 265 0036 60E0      		ldi r22,0
 266 0038 70E0      		ldi r23,0
 267               	.LVL17:
 268 003a CF01      		movw r24,r30
 269 003c 0C94 0000 		jmp chThdDequeueNextI
 270               	.LVL18:
 271               	.LBE209:
 272               	.LBE208:
 273               		.cfi_endproc
 274               	.LFE183:
 276               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 277               	.global	ibqGetFullBufferTimeoutS
 279               	ibqGetFullBufferTimeoutS:
 280               	.LFB185:
 163:../../../os/hal/src/hal_buffers.c ****   }
 164:../../../os/hal/src/hal_buffers.c **** 
 165:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../../os/hal/src/hal_buffers.c **** }
 168:../../../os/hal/src/hal_buffers.c **** 
 169:../../../os/hal/src/hal_buffers.c **** /**
 170:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../../os/hal/src/hal_buffers.c ****  *
 176:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../../os/hal/src/hal_buffers.c ****  *                      .
 182:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:../../../os/hal/src/hal_buffers.c ****  *
 188:../../../os/hal/src/hal_buffers.c ****  * @api
 189:../../../os/hal/src/hal_buffers.c ****  */
 190:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:../../../os/hal/src/hal_buffers.c ****                               sysinterval_t timeout) {
 192:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 193:../../../os/hal/src/hal_buffers.c **** 
 194:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 195:../../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:../../../os/hal/src/hal_buffers.c **** 
 198:../../../os/hal/src/hal_buffers.c ****   return msg;
 199:../../../os/hal/src/hal_buffers.c **** }
 200:../../../os/hal/src/hal_buffers.c **** 
 201:../../../os/hal/src/hal_buffers.c ****   /**
 202:../../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:../../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:../../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:../../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:../../../os/hal/src/hal_buffers.c ****    *          is empty.
 207:../../../os/hal/src/hal_buffers.c ****    *
 208:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:../../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:../../../os/hal/src/hal_buffers.c ****    *                      .
 214:../../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:../../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:../../../os/hal/src/hal_buffers.c ****    *
 220:../../../os/hal/src/hal_buffers.c ****    * @sclass
 221:../../../os/hal/src/hal_buffers.c ****    */
 222:../../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:../../../os/hal/src/hal_buffers.c ****                                  sysinterval_t timeout) {
 281               		.loc 1 223 0
 282               		.cfi_startproc
 283               	.LVL19:
 284 0000 0F93      		push r16
 285               	.LCFI6:
 286               		.cfi_def_cfa_offset 3
 287               		.cfi_offset 16, -2
 288 0002 1F93      		push r17
 289               	.LCFI7:
 290               		.cfi_def_cfa_offset 4
 291               		.cfi_offset 17, -3
 292 0004 CF93      		push r28
 293               	.LCFI8:
 294               		.cfi_def_cfa_offset 5
 295               		.cfi_offset 28, -4
 296 0006 DF93      		push r29
 297               	.LCFI9:
 298               		.cfi_def_cfa_offset 6
 299               		.cfi_offset 29, -5
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 4 */
 303               	.L__stack_usage = 4
 304 0008 EC01      		movw r28,r24
 305 000a 8B01      		movw r16,r22
 224:../../../os/hal/src/hal_buffers.c **** 
 225:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:../../../os/hal/src/hal_buffers.c **** 
 227:../../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 306               		.loc 1 227 0
 307 000c 00C0      		rjmp .L15
 308               	.LVL20:
 309               	.L17:
 310               	.LBB218:
 228:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 311               		.loc 1 228 0
 312 000e 8C81      		ldd r24,Y+4
 313 0010 8111      		cpse r24,__zero_reg__
 314 0012 00C0      		rjmp .L18
 315               	.LVL21:
 316               	.LBB219:
 317               	.LBB220:
 831:../../../os/hal/osal/rt/osal.h **** }
 318               		.loc 3 831 0
 319 0014 B801      		movw r22,r16
 320 0016 CE01      		movw r24,r28
 321 0018 0E94 0000 		call chThdEnqueueTimeoutS
 322               	.LVL22:
 323               	.LBE220:
 324               	.LBE219:
 229:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:../../../os/hal/src/hal_buffers.c ****     }
 231:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 325               		.loc 1 232 0
 326 001c 97FD      		sbrc r25,7
 327 001e 00C0      		rjmp .L16
 328               	.L15:
 329               	.LBE218:
 227:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 330               		.loc 1 227 0
 331 0020 8D81      		ldd r24,Y+5
 332 0022 9E81      		ldd r25,Y+6
 333 0024 892B      		or r24,r25
 334 0026 01F0      		breq .L17
 335               	.LVL23:
 336               	.LBB221:
 337               	.LBB222:
 233:../../../os/hal/src/hal_buffers.c ****        return msg;
 234:../../../os/hal/src/hal_buffers.c ****     }
 235:../../../os/hal/src/hal_buffers.c ****   }
 236:../../../os/hal/src/hal_buffers.c **** 
 237:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:../../../os/hal/src/hal_buffers.c **** 
 239:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 338               		.loc 1 240 0
 339 0028 E985      		ldd r30,Y+9
 340 002a FA85      		ldd r31,Y+10
 341 002c 9F01      		movw r18,r30
 342 002e 2E5F      		subi r18,-2
 343 0030 3F4F      		sbci r19,-1
 344 0032 3C8B      		std Y+20,r19
 345 0034 2B8B      		std Y+19,r18
 241:../../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 346               		.loc 1 241 0
 347 0036 8081      		ld r24,Z
 348 0038 9181      		ldd r25,Z+1
 349 003a 820F      		add r24,r18
 350 003c 931F      		adc r25,r19
 351 003e 9E8B      		std Y+22,r25
 352 0040 8D8B      		std Y+21,r24
 353               	.LVL24:
 354 0042 80E0      		ldi r24,0
 355 0044 90E0      		ldi r25,0
 356               	.L16:
 357               	/* epilogue start */
 358               	.LBE222:
 359               	.LBE221:
 242:../../../os/hal/src/hal_buffers.c **** 
 243:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:../../../os/hal/src/hal_buffers.c **** }
 360               		.loc 1 244 0
 361 0046 DF91      		pop r29
 362 0048 CF91      		pop r28
 363               	.LVL25:
 364 004a 1F91      		pop r17
 365 004c 0F91      		pop r16
 366               	.LVL26:
 367 004e 0895      		ret
 368               	.LVL27:
 369               	.L18:
 370               	.LBB223:
 229:../../../os/hal/src/hal_buffers.c ****     }
 371               		.loc 1 229 0
 372 0050 8EEF      		ldi r24,lo8(-2)
 373 0052 9FEF      		ldi r25,lo8(-1)
 374               	/* epilogue start */
 375               	.LBE223:
 376               		.loc 1 244 0
 377 0054 DF91      		pop r29
 378 0056 CF91      		pop r28
 379               	.LVL28:
 380 0058 1F91      		pop r17
 381 005a 0F91      		pop r16
 382               	.LVL29:
 383 005c 0895      		ret
 384               		.cfi_endproc
 385               	.LFE185:
 387               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 388               	.global	ibqGetFullBufferTimeout
 390               	ibqGetFullBufferTimeout:
 391               	.LFB184:
 191:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 392               		.loc 1 191 0
 393               		.cfi_startproc
 394               	.LVL30:
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399               	.LBB224:
 400               	.LBB225:
 401               	.LBB226:
 402               	.LBB227:
 403               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 404               		.loc 4 437 0
 405               	/* #APP */
 406               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 407 0000 F894      		cli
 408               	 ;  0 "" 2
 409               	/* #NOAPP */
 410               	.LBE227:
 411               	.LBE226:
 412               	.LBE225:
 413               	.LBE224:
 195:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 414               		.loc 1 195 0
 415 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 416               	.LVL31:
 417               	.LBB228:
 418               	.LBB229:
 419               	.LBB230:
 420               	.LBB231:
 421               	.LBB232:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 422               		.loc 4 447 0
 423               	/* #APP */
 424               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 425 0006 7894      		sei
 426               	 ;  0 "" 2
 427               	/* #NOAPP */
 428               	.LBE232:
 429               	.LBE231:
 430               	.LBE230:
 431               	.LBE229:
 432               	.LBE228:
 199:../../../os/hal/src/hal_buffers.c **** 
 433               		.loc 1 199 0
 434 0008 0895      		ret
 435               		.cfi_endproc
 436               	.LFE184:
 438               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 439               	.global	ibqReleaseEmptyBuffer
 441               	ibqReleaseEmptyBuffer:
 442               	.LFB186:
 245:../../../os/hal/src/hal_buffers.c **** 
 246:../../../os/hal/src/hal_buffers.c **** /**
 247:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:../../../os/hal/src/hal_buffers.c ****  *
 250:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:../../../os/hal/src/hal_buffers.c ****  *
 252:../../../os/hal/src/hal_buffers.c ****  * @api
 253:../../../os/hal/src/hal_buffers.c ****  */
 254:../../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 443               		.loc 1 254 0
 444               		.cfi_startproc
 445               	.LVL32:
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 0 */
 449               	.L__stack_usage = 0
 450 0000 DC01      		movw r26,r24
 451               	.LBB233:
 452               	.LBB234:
 453               	.LBB235:
 454               	.LBB236:
 437:../../../os/common/ports/AVR/chcore.h **** }
 455               		.loc 4 437 0
 456               	/* #APP */
 457               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 458 0002 F894      		cli
 459               	 ;  0 "" 2
 460               	.LVL33:
 461               	/* #NOAPP */
 462               	.LBE236:
 463               	.LBE235:
 464               	.LBE234:
 465               	.LBE233:
 466               	.LBB237:
 467               	.LBB238:
 255:../../../os/hal/src/hal_buffers.c **** 
 256:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 257:../../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:../../../os/hal/src/hal_buffers.c **** }
 260:../../../os/hal/src/hal_buffers.c **** 
 261:../../../os/hal/src/hal_buffers.c ****   /**
 262:../../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:../../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:../../../os/hal/src/hal_buffers.c ****    *
 265:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:../../../os/hal/src/hal_buffers.c ****    *
 267:../../../os/hal/src/hal_buffers.c ****    * @sclass
 268:../../../os/hal/src/hal_buffers.c ****    */
 269:../../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 270:../../../os/hal/src/hal_buffers.c **** 
 271:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:../../../os/hal/src/hal_buffers.c **** 
 274:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 468               		.loc 1 275 0
 469 0004 1596      		adiw r26,5
 470 0006 8D91      		ld r24,X+
 471 0008 9C91      		ld r25,X
 472 000a 1697      		sbiw r26,5+1
 473               	.LVL34:
 474 000c 0197      		sbiw r24,1
 475 000e 1696      		adiw r26,5+1
 476 0010 9C93      		st X,r25
 477 0012 8E93      		st -X,r24
 478 0014 1597      		sbiw r26,5
 276:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 479               		.loc 1 276 0
 480 0016 1996      		adiw r26,9
 481 0018 2D91      		ld r18,X+
 482 001a 3C91      		ld r19,X
 483 001c 1A97      		sbiw r26,9+1
 484 001e 1D96      		adiw r26,13
 485 0020 8D91      		ld r24,X+
 486 0022 9C91      		ld r25,X
 487 0024 1E97      		sbiw r26,13+1
 488 0026 820F      		add r24,r18
 489 0028 931F      		adc r25,r19
 490 002a 1A96      		adiw r26,9+1
 491 002c 9C93      		st X,r25
 492 002e 8E93      		st -X,r24
 493 0030 1997      		sbiw r26,9
 277:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 494               		.loc 1 277 0
 495 0032 1B96      		adiw r26,11
 496 0034 2D91      		ld r18,X+
 497 0036 3C91      		ld r19,X
 498 0038 1C97      		sbiw r26,11+1
 499 003a 8217      		cp r24,r18
 500 003c 9307      		cpc r25,r19
 501 003e 00F0      		brlo .L21
 278:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 502               		.loc 1 278 0
 503 0040 5196      		adiw r26,17
 504 0042 8D91      		ld r24,X+
 505 0044 9C91      		ld r25,X
 506 0046 5297      		sbiw r26,17+1
 507 0048 1A96      		adiw r26,9+1
 508 004a 9C93      		st X,r25
 509 004c 8E93      		st -X,r24
 510 004e 1997      		sbiw r26,9
 511               	.L21:
 279:../../../os/hal/src/hal_buffers.c ****   }
 280:../../../os/hal/src/hal_buffers.c **** 
 281:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 512               		.loc 1 282 0
 513 0050 5496      		adiw r26,19+1
 514 0052 1C92      		st X,__zero_reg__
 515 0054 1E92      		st -X,__zero_reg__
 516 0056 5397      		sbiw r26,19
 283:../../../os/hal/src/hal_buffers.c **** 
 284:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:../../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 517               		.loc 1 285 0
 518 0058 5796      		adiw r26,23
 519 005a ED91      		ld r30,X+
 520 005c FC91      		ld r31,X
 521 005e 5897      		sbiw r26,23+1
 522 0060 3097      		sbiw r30,0
 523 0062 01F0      		breq .L22
 524 0064 CD01      		movw r24,r26
 286:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 525               		.loc 1 286 0
 526 0066 0995      		icall
 527               	.LVL35:
 528               	.L22:
 529               	.LBE238:
 530               	.LBE237:
 531               	.LBB239:
 532               	.LBB240:
 533               	.LBB241:
 534               	.LBB242:
 535               	.LBB243:
 536               		.loc 4 447 0
 537               	/* #APP */
 538               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 539 0068 7894      		sei
 540               	 ;  0 "" 2
 541               	/* #NOAPP */
 542 006a 0895      		ret
 543               	.LBE243:
 544               	.LBE242:
 545               	.LBE241:
 546               	.LBE240:
 547               	.LBE239:
 548               		.cfi_endproc
 549               	.LFE186:
 551               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 552               	.global	ibqReleaseEmptyBufferS
 554               	ibqReleaseEmptyBufferS:
 555               	.LFB187:
 269:../../../os/hal/src/hal_buffers.c **** 
 556               		.loc 1 269 0
 557               		.cfi_startproc
 558               	.LVL36:
 559               	/* prologue: function */
 560               	/* frame size = 0 */
 561               	/* stack size = 0 */
 562               	.L__stack_usage = 0
 563 0000 DC01      		movw r26,r24
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 564               		.loc 1 275 0
 565 0002 1596      		adiw r26,5
 566 0004 8D91      		ld r24,X+
 567 0006 9C91      		ld r25,X
 568 0008 1697      		sbiw r26,5+1
 569               	.LVL37:
 570 000a 0197      		sbiw r24,1
 571 000c 1696      		adiw r26,5+1
 572 000e 9C93      		st X,r25
 573 0010 8E93      		st -X,r24
 574 0012 1597      		sbiw r26,5
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 575               		.loc 1 276 0
 576 0014 1996      		adiw r26,9
 577 0016 2D91      		ld r18,X+
 578 0018 3C91      		ld r19,X
 579 001a 1A97      		sbiw r26,9+1
 580 001c 1D96      		adiw r26,13
 581 001e 8D91      		ld r24,X+
 582 0020 9C91      		ld r25,X
 583 0022 1E97      		sbiw r26,13+1
 584 0024 820F      		add r24,r18
 585 0026 931F      		adc r25,r19
 586 0028 1A96      		adiw r26,9+1
 587 002a 9C93      		st X,r25
 588 002c 8E93      		st -X,r24
 589 002e 1997      		sbiw r26,9
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 590               		.loc 1 277 0
 591 0030 1B96      		adiw r26,11
 592 0032 2D91      		ld r18,X+
 593 0034 3C91      		ld r19,X
 594 0036 1C97      		sbiw r26,11+1
 595 0038 8217      		cp r24,r18
 596 003a 9307      		cpc r25,r19
 597 003c 00F0      		brlo .L27
 278:../../../os/hal/src/hal_buffers.c ****   }
 598               		.loc 1 278 0
 599 003e 5196      		adiw r26,17
 600 0040 8D91      		ld r24,X+
 601 0042 9C91      		ld r25,X
 602 0044 5297      		sbiw r26,17+1
 603 0046 1A96      		adiw r26,9+1
 604 0048 9C93      		st X,r25
 605 004a 8E93      		st -X,r24
 606 004c 1997      		sbiw r26,9
 607               	.L27:
 282:../../../os/hal/src/hal_buffers.c **** 
 608               		.loc 1 282 0
 609 004e 5496      		adiw r26,19+1
 610 0050 1C92      		st X,__zero_reg__
 611 0052 1E92      		st -X,__zero_reg__
 612 0054 5397      		sbiw r26,19
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 613               		.loc 1 285 0
 614 0056 5796      		adiw r26,23
 615 0058 ED91      		ld r30,X+
 616 005a FC91      		ld r31,X
 617 005c 5897      		sbiw r26,23+1
 618 005e 3097      		sbiw r30,0
 619 0060 01F0      		breq .L26
 620               		.loc 1 286 0
 621 0062 CD01      		movw r24,r26
 622 0064 0994      		ijmp
 623               	.LVL38:
 624               	.L26:
 625 0066 0895      		ret
 626               		.cfi_endproc
 627               	.LFE187:
 629               		.section	.text.ibqGetTimeout,"ax",@progbits
 630               	.global	ibqGetTimeout
 632               	ibqGetTimeout:
 633               	.LFB188:
 287:../../../os/hal/src/hal_buffers.c ****   }
 288:../../../os/hal/src/hal_buffers.c **** }
 289:../../../os/hal/src/hal_buffers.c **** 
 290:../../../os/hal/src/hal_buffers.c **** /**
 291:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:../../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:../../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:../../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:../../../os/hal/src/hal_buffers.c ****  *
 296:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:../../../os/hal/src/hal_buffers.c ****  *                      .
 302:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:../../../os/hal/src/hal_buffers.c ****  *
 307:../../../os/hal/src/hal_buffers.c ****  * @api
 308:../../../os/hal/src/hal_buffers.c ****  */
 309:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 634               		.loc 1 309 0
 635               		.cfi_startproc
 636               	.LVL39:
 637 0000 0F93      		push r16
 638               	.LCFI10:
 639               		.cfi_def_cfa_offset 3
 640               		.cfi_offset 16, -2
 641 0002 1F93      		push r17
 642               	.LCFI11:
 643               		.cfi_def_cfa_offset 4
 644               		.cfi_offset 17, -3
 645 0004 CF93      		push r28
 646               	.LCFI12:
 647               		.cfi_def_cfa_offset 5
 648               		.cfi_offset 28, -4
 649 0006 DF93      		push r29
 650               	.LCFI13:
 651               		.cfi_def_cfa_offset 6
 652               		.cfi_offset 29, -5
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 4 */
 656               	.L__stack_usage = 4
 657 0008 EC01      		movw r28,r24
 658               	.LBB244:
 659               	.LBB245:
 660               	.LBB246:
 661               	.LBB247:
 437:../../../os/common/ports/AVR/chcore.h **** }
 662               		.loc 4 437 0
 663               	/* #APP */
 664               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 665 000a F894      		cli
 666               	 ;  0 "" 2
 667               	/* #NOAPP */
 668               	.LBE247:
 669               	.LBE246:
 670               	.LBE245:
 671               	.LBE244:
 310:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 311:../../../os/hal/src/hal_buffers.c **** 
 312:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 313:../../../os/hal/src/hal_buffers.c **** 
 314:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 672               		.loc 1 315 0
 673 000c EB89      		ldd r30,Y+19
 674 000e FC89      		ldd r31,Y+20
 675 0010 3097      		sbiw r30,0
 676 0012 01F0      		breq .L40
 677               	.LVL40:
 678               	.L30:
 316:../../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 317:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 318:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:../../../os/hal/src/hal_buffers.c ****       return msg;
 320:../../../os/hal/src/hal_buffers.c ****     }
 321:../../../os/hal/src/hal_buffers.c ****   }
 322:../../../os/hal/src/hal_buffers.c **** 
 323:../../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:../../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 679               		.loc 1 324 0
 680 0014 0191      		ld r16,Z+
 681 0016 10E0      		ldi r17,0
 682               	.LVL41:
 325:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 683               		.loc 1 325 0
 684 0018 FC8B      		std Y+20,r31
 685 001a EB8B      		std Y+19,r30
 326:../../../os/hal/src/hal_buffers.c **** 
 327:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:../../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 686               		.loc 1 329 0
 687 001c 8D89      		ldd r24,Y+21
 688 001e 9E89      		ldd r25,Y+22
 689 0020 E817      		cp r30,r24
 690 0022 F907      		cpc r31,r25
 691 0024 00F0      		brlo .L34
 692               	.LVL42:
 693               	.LBB248:
 694               	.LBB249:
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 695               		.loc 1 275 0
 696 0026 8D81      		ldd r24,Y+5
 697 0028 9E81      		ldd r25,Y+6
 698 002a 0197      		sbiw r24,1
 699 002c 9E83      		std Y+6,r25
 700 002e 8D83      		std Y+5,r24
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 701               		.loc 1 276 0
 702 0030 2985      		ldd r18,Y+9
 703 0032 3A85      		ldd r19,Y+10
 704 0034 8D85      		ldd r24,Y+13
 705 0036 9E85      		ldd r25,Y+14
 706 0038 820F      		add r24,r18
 707 003a 931F      		adc r25,r19
 708 003c 9A87      		std Y+10,r25
 709 003e 8987      		std Y+9,r24
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 710               		.loc 1 277 0
 711 0040 2B85      		ldd r18,Y+11
 712 0042 3C85      		ldd r19,Y+12
 713 0044 8217      		cp r24,r18
 714 0046 9307      		cpc r25,r19
 715 0048 00F0      		brlo .L35
 278:../../../os/hal/src/hal_buffers.c ****   }
 716               		.loc 1 278 0
 717 004a 8989      		ldd r24,Y+17
 718 004c 9A89      		ldd r25,Y+18
 719 004e 9A87      		std Y+10,r25
 720 0050 8987      		std Y+9,r24
 721               	.L35:
 282:../../../os/hal/src/hal_buffers.c **** 
 722               		.loc 1 282 0
 723 0052 1C8A      		std Y+20,__zero_reg__
 724 0054 1B8A      		std Y+19,__zero_reg__
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 725               		.loc 1 285 0
 726 0056 EF89      		ldd r30,Y+23
 727 0058 F88D      		ldd r31,Y+24
 728 005a 3097      		sbiw r30,0
 729 005c 01F0      		breq .L34
 286:../../../os/hal/src/hal_buffers.c ****   }
 730               		.loc 1 286 0
 731 005e CE01      		movw r24,r28
 732 0060 0995      		icall
 733               	.LVL43:
 734               	.L34:
 735               	.LBE249:
 736               	.LBE248:
 737               	.LBB250:
 738               	.LBB251:
 739               	.LBB252:
 740               	.LBB253:
 741               	.LBB254:
 742               		.loc 4 447 0
 743               	/* #APP */
 744               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 745 0062 7894      		sei
 746               	 ;  0 "" 2
 747               	/* #NOAPP */
 748               	.LBE254:
 749               	.LBE253:
 750               	.LBE252:
 751               	.LBE251:
 752               	.LBE250:
 330:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:../../../os/hal/src/hal_buffers.c ****   }
 332:../../../os/hal/src/hal_buffers.c **** 
 333:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:../../../os/hal/src/hal_buffers.c ****   return msg;
 753               		.loc 1 334 0
 754 0064 C801      		movw r24,r16
 755               	.LVL44:
 756               	.L32:
 757               	/* epilogue start */
 335:../../../os/hal/src/hal_buffers.c **** }
 758               		.loc 1 335 0
 759 0066 DF91      		pop r29
 760 0068 CF91      		pop r28
 761               	.LVL45:
 762 006a 1F91      		pop r17
 763 006c 0F91      		pop r16
 764 006e 0895      		ret
 765               	.LVL46:
 766               	.L40:
 316:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 767               		.loc 1 316 0
 768 0070 0E94 0000 		call ibqGetFullBufferTimeoutS
 769               	.LVL47:
 317:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 770               		.loc 1 317 0
 771 0074 0097      		sbiw r24,0
 772 0076 01F4      		brne .L31
 773 0078 EB89      		ldd r30,Y+19
 774 007a FC89      		ldd r31,Y+20
 775 007c 00C0      		rjmp .L30
 776               	.L31:
 777               	.LBB255:
 778               	.LBB256:
 779               	.LBB257:
 780               	.LBB258:
 781               	.LBB259:
 782               		.loc 4 447 0
 783               	/* #APP */
 784               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 785 007e 7894      		sei
 786               	 ;  0 "" 2
 787               	/* #NOAPP */
 788               	.LBE259:
 789               	.LBE258:
 790               	.LBE257:
 791               	.LBE256:
 792               	.LBE255:
 319:../../../os/hal/src/hal_buffers.c ****     }
 793               		.loc 1 319 0
 794 0080 00C0      		rjmp .L32
 795               		.cfi_endproc
 796               	.LFE188:
 798               		.section	.text.ibqReadTimeout,"ax",@progbits
 799               	.global	ibqReadTimeout
 801               	ibqReadTimeout:
 802               	.LFB189:
 336:../../../os/hal/src/hal_buffers.c **** 
 337:../../../os/hal/src/hal_buffers.c **** /**
 338:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:../../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:../../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 343:../../../os/hal/src/hal_buffers.c ****  *
 344:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:../../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:../../../os/hal/src/hal_buffers.c ****  *                      .
 353:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:../../../os/hal/src/hal_buffers.c ****  *
 356:../../../os/hal/src/hal_buffers.c ****  * @api
 357:../../../os/hal/src/hal_buffers.c ****  */
 358:../../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:../../../os/hal/src/hal_buffers.c ****                       size_t n, sysinterval_t timeout) {
 803               		.loc 1 359 0
 804               		.cfi_startproc
 805               	.LVL48:
 806 0000 8F92      		push r8
 807               	.LCFI14:
 808               		.cfi_def_cfa_offset 3
 809               		.cfi_offset 8, -2
 810 0002 9F92      		push r9
 811               	.LCFI15:
 812               		.cfi_def_cfa_offset 4
 813               		.cfi_offset 9, -3
 814 0004 AF92      		push r10
 815               	.LCFI16:
 816               		.cfi_def_cfa_offset 5
 817               		.cfi_offset 10, -4
 818 0006 BF92      		push r11
 819               	.LCFI17:
 820               		.cfi_def_cfa_offset 6
 821               		.cfi_offset 11, -5
 822 0008 CF92      		push r12
 823               	.LCFI18:
 824               		.cfi_def_cfa_offset 7
 825               		.cfi_offset 12, -6
 826 000a DF92      		push r13
 827               	.LCFI19:
 828               		.cfi_def_cfa_offset 8
 829               		.cfi_offset 13, -7
 830 000c EF92      		push r14
 831               	.LCFI20:
 832               		.cfi_def_cfa_offset 9
 833               		.cfi_offset 14, -8
 834 000e FF92      		push r15
 835               	.LCFI21:
 836               		.cfi_def_cfa_offset 10
 837               		.cfi_offset 15, -9
 838 0010 0F93      		push r16
 839               	.LCFI22:
 840               		.cfi_def_cfa_offset 11
 841               		.cfi_offset 16, -10
 842 0012 1F93      		push r17
 843               	.LCFI23:
 844               		.cfi_def_cfa_offset 12
 845               		.cfi_offset 17, -11
 846 0014 CF93      		push r28
 847               	.LCFI24:
 848               		.cfi_def_cfa_offset 13
 849               		.cfi_offset 28, -12
 850 0016 DF93      		push r29
 851               	.LCFI25:
 852               		.cfi_def_cfa_offset 14
 853               		.cfi_offset 29, -13
 854               	/* prologue: function */
 855               	/* frame size = 0 */
 856               	/* stack size = 12 */
 857               	.L__stack_usage = 12
 858 0018 EC01      		movw r28,r24
 859 001a 6B01      		movw r12,r22
 860 001c 5A01      		movw r10,r20
 861 001e 4901      		movw r8,r18
 862               	.LVL49:
 863               	.LBB260:
 864               	.LBB261:
 865               	.LBB262:
 866               	.LBB263:
 437:../../../os/common/ports/AVR/chcore.h **** }
 867               		.loc 4 437 0
 868               	/* #APP */
 869               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 870 0020 F894      		cli
 871               	 ;  0 "" 2
 872               	/* #NOAPP */
 873               	.LBE263:
 874               	.LBE262:
 875               	.LBE261:
 876               	.LBE260:
 360:../../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 877               		.loc 1 360 0
 878 0022 E12C      		mov r14,__zero_reg__
 879 0024 F12C      		mov r15,__zero_reg__
 880 0026 00C0      		rjmp .L52
 881               	.LVL50:
 882               	.L57:
 883               	.LBB264:
 361:../../../os/hal/src/hal_buffers.c **** 
 362:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 363:../../../os/hal/src/hal_buffers.c **** 
 364:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 365:../../../os/hal/src/hal_buffers.c **** 
 366:../../../os/hal/src/hal_buffers.c ****   while (true) {
 367:../../../os/hal/src/hal_buffers.c ****     size_t size;
 368:../../../os/hal/src/hal_buffers.c **** 
 369:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 370:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 371:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 372:../../../os/hal/src/hal_buffers.c **** 
 373:../../../os/hal/src/hal_buffers.c ****       /* Getting a data buffer using the specified timeout.*/
 374:../../../os/hal/src/hal_buffers.c ****       msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 375:../../../os/hal/src/hal_buffers.c **** 
 376:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 377:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 378:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 379:../../../os/hal/src/hal_buffers.c ****         return r;
 380:../../../os/hal/src/hal_buffers.c ****       }
 381:../../../os/hal/src/hal_buffers.c ****     }
 382:../../../os/hal/src/hal_buffers.c **** 
 383:../../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 384:../../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 385:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 386:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 387:../../../os/hal/src/hal_buffers.c ****     }
 388:../../../os/hal/src/hal_buffers.c **** 
 389:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 390:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 391:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 392:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 393:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, 64U);
 884               		.loc 1 393 0
 885 0028 80E4      		ldi r24,lo8(64)
 886 002a FB01      		movw r30,r22
 887 002c D601      		movw r26,r12
 888               		0:
 889 002e 0190      		ld r0,Z+
 890 0030 0D92      		st X+,r0
 891 0032 8A95      		dec r24
 892 0034 01F4      		brne 0b
 394:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 893               		.loc 1 394 0
 894 0036 20E4      		ldi r18,64
 895 0038 C20E      		add r12,r18
 896 003a D11C      		adc r13,__zero_reg__
 897               	.LVL51:
 395:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 898               		.loc 1 395 0
 899 003c 8B89      		ldd r24,Y+19
 900 003e 9C89      		ldd r25,Y+20
 901 0040 805C      		subi r24,-64
 902 0042 9F4F      		sbci r25,-1
 903 0044 9C8B      		std Y+20,r25
 904 0046 8B8B      		std Y+19,r24
 396:../../../os/hal/src/hal_buffers.c ****       r         += 64U;
 905               		.loc 1 396 0
 906 0048 20E4      		ldi r18,64
 907 004a E20E      		add r14,r18
 908 004c F11C      		adc r15,__zero_reg__
 909               	.LVL52:
 910               	.L47:
 397:../../../os/hal/src/hal_buffers.c ****     }
 398:../../../os/hal/src/hal_buffers.c ****     else {
 399:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 400:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 401:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 402:../../../os/hal/src/hal_buffers.c ****       r         += size;
 403:../../../os/hal/src/hal_buffers.c ****     }
 404:../../../os/hal/src/hal_buffers.c **** 
 405:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 406:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 911               		.loc 1 406 0
 912 004e 2D89      		ldd r18,Y+21
 913 0050 3E89      		ldd r19,Y+22
 914 0052 8217      		cp r24,r18
 915 0054 9307      		cpc r25,r19
 916 0056 00F0      		brlo .L49
 917               	.LVL53:
 918               	.LBB265:
 919               	.LBB266:
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 920               		.loc 1 275 0
 921 0058 8D81      		ldd r24,Y+5
 922 005a 9E81      		ldd r25,Y+6
 923 005c 0197      		sbiw r24,1
 924 005e 9E83      		std Y+6,r25
 925 0060 8D83      		std Y+5,r24
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 926               		.loc 1 276 0
 927 0062 2985      		ldd r18,Y+9
 928 0064 3A85      		ldd r19,Y+10
 929 0066 8D85      		ldd r24,Y+13
 930 0068 9E85      		ldd r25,Y+14
 931 006a 820F      		add r24,r18
 932 006c 931F      		adc r25,r19
 933 006e 9A87      		std Y+10,r25
 934 0070 8987      		std Y+9,r24
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 935               		.loc 1 277 0
 936 0072 2B85      		ldd r18,Y+11
 937 0074 3C85      		ldd r19,Y+12
 938 0076 8217      		cp r24,r18
 939 0078 9307      		cpc r25,r19
 940 007a 00F0      		brlo .L50
 278:../../../os/hal/src/hal_buffers.c ****   }
 941               		.loc 1 278 0
 942 007c 8989      		ldd r24,Y+17
 943 007e 9A89      		ldd r25,Y+18
 944 0080 9A87      		std Y+10,r25
 945 0082 8987      		std Y+9,r24
 946               	.L50:
 282:../../../os/hal/src/hal_buffers.c **** 
 947               		.loc 1 282 0
 948 0084 1C8A      		std Y+20,__zero_reg__
 949 0086 1B8A      		std Y+19,__zero_reg__
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 950               		.loc 1 285 0
 951 0088 EF89      		ldd r30,Y+23
 952 008a F88D      		ldd r31,Y+24
 953 008c 3097      		sbiw r30,0
 954 008e 01F0      		breq .L49
 286:../../../os/hal/src/hal_buffers.c ****   }
 955               		.loc 1 286 0
 956 0090 CE01      		movw r24,r28
 957 0092 0995      		icall
 958               	.LVL54:
 959               	.L49:
 960               	.LBE266:
 961               	.LBE265:
 962               	.LBB267:
 963               	.LBB268:
 964               	.LBB269:
 965               	.LBB270:
 966               	.LBB271:
 967               		.loc 4 447 0
 968               	/* #APP */
 969               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 970 0094 7894      		sei
 971               	 ;  0 "" 2
 972               	/* #NOAPP */
 973               	.LBE271:
 974               	.LBE270:
 975               	.LBE269:
 976               	.LBE268:
 977               	.LBE267:
 407:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 408:../../../os/hal/src/hal_buffers.c ****     }
 409:../../../os/hal/src/hal_buffers.c **** 
 410:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 411:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 412:../../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 978               		.loc 1 412 0
 979 0096 EA14      		cp r14,r10
 980 0098 FB04      		cpc r15,r11
 981 009a 00F4      		brsh .L44
 982               	.LBB272:
 983               	.LBB273:
 984               	.LBB274:
 985               	.LBB275:
 437:../../../os/common/ports/AVR/chcore.h **** }
 986               		.loc 4 437 0
 987               	/* #APP */
 988               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 989 009c F894      		cli
 990               	 ;  0 "" 2
 991               	.LVL55:
 992               	/* #NOAPP */
 993               	.L52:
 994               	.LBE275:
 995               	.LBE274:
 996               	.LBE273:
 997               	.LBE272:
 370:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 998               		.loc 1 370 0
 999 009e 6B89      		ldd r22,Y+19
 1000 00a0 7C89      		ldd r23,Y+20
 1001 00a2 6115      		cp r22,__zero_reg__
 1002 00a4 7105      		cpc r23,__zero_reg__
 1003 00a6 01F0      		breq .L56
 1004               	.L42:
 384:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 1005               		.loc 1 384 0
 1006 00a8 0D89      		ldd r16,Y+21
 1007 00aa 1E89      		ldd r17,Y+22
 1008               	.LVL56:
 385:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 1009               		.loc 1 385 0
 1010 00ac C501      		movw r24,r10
 1011 00ae 8E19      		sub r24,r14
 1012 00b0 9F09      		sbc r25,r15
 1013 00b2 061B      		sub r16,r22
 1014 00b4 170B      		sbc r17,r23
 1015               	.LVL57:
 1016 00b6 8017      		cp r24,r16
 1017 00b8 9107      		cpc r25,r17
 1018 00ba 00F4      		brsh .L45
 1019 00bc 8C01      		movw r16,r24
 1020               	.LVL58:
 1021               	.L45:
 391:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1022               		.loc 1 391 0
 1023 00be 0134      		cpi r16,65
 1024 00c0 1105      		cpc r17,__zero_reg__
 1025 00c2 00F0      		brlo .+2
 1026 00c4 00C0      		rjmp .L57
 399:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 1027               		.loc 1 399 0
 1028 00c6 A801      		movw r20,r16
 1029 00c8 C601      		movw r24,r12
 1030 00ca 0E94 0000 		call memcpy
 1031               	.LVL59:
 400:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 1032               		.loc 1 400 0
 1033 00ce C00E      		add r12,r16
 1034 00d0 D11E      		adc r13,r17
 1035               	.LVL60:
 401:../../../os/hal/src/hal_buffers.c ****       r         += size;
 1036               		.loc 1 401 0
 1037 00d2 8B89      		ldd r24,Y+19
 1038 00d4 9C89      		ldd r25,Y+20
 1039 00d6 800F      		add r24,r16
 1040 00d8 911F      		adc r25,r17
 1041 00da 9C8B      		std Y+20,r25
 1042 00dc 8B8B      		std Y+19,r24
 402:../../../os/hal/src/hal_buffers.c ****     }
 1043               		.loc 1 402 0
 1044 00de E00E      		add r14,r16
 1045 00e0 F11E      		adc r15,r17
 1046               	.LVL61:
 1047 00e2 00C0      		rjmp .L47
 1048               	.LVL62:
 1049               	.L56:
 1050               	.LBB276:
 374:../../../os/hal/src/hal_buffers.c **** 
 1051               		.loc 1 374 0
 1052 00e4 B401      		movw r22,r8
 1053 00e6 CE01      		movw r24,r28
 1054 00e8 0E94 0000 		call ibqGetFullBufferTimeoutS
 1055               	.LVL63:
 377:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1056               		.loc 1 377 0
 1057 00ec 892B      		or r24,r25
 1058 00ee 01F4      		brne .L43
 1059 00f0 6B89      		ldd r22,Y+19
 1060 00f2 7C89      		ldd r23,Y+20
 1061 00f4 00C0      		rjmp .L42
 1062               	.L43:
 1063               	.LBB277:
 1064               	.LBB278:
 1065               	.LBB279:
 1066               	.LBB280:
 1067               	.LBB281:
 1068               		.loc 4 447 0
 1069               	/* #APP */
 1070               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1071 00f6 7894      		sei
 1072               	 ;  0 "" 2
 1073               	.LVL64:
 1074               	/* #NOAPP */
 1075               	.L44:
 1076               	.LBE281:
 1077               	.LBE280:
 1078               	.LBE279:
 1079               	.LBE278:
 1080               	.LBE277:
 1081               	.LBE276:
 1082               	.LBE264:
 413:../../../os/hal/src/hal_buffers.c ****       return r;
 414:../../../os/hal/src/hal_buffers.c ****     }
 415:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 416:../../../os/hal/src/hal_buffers.c ****   }
 417:../../../os/hal/src/hal_buffers.c **** }
 1083               		.loc 1 417 0
 1084 00f8 C701      		movw r24,r14
 1085               	/* epilogue start */
 1086 00fa DF91      		pop r29
 1087 00fc CF91      		pop r28
 1088               	.LVL65:
 1089 00fe 1F91      		pop r17
 1090 0100 0F91      		pop r16
 1091 0102 FF90      		pop r15
 1092 0104 EF90      		pop r14
 1093               	.LVL66:
 1094 0106 DF90      		pop r13
 1095 0108 CF90      		pop r12
 1096               	.LVL67:
 1097 010a BF90      		pop r11
 1098 010c AF90      		pop r10
 1099               	.LVL68:
 1100 010e 9F90      		pop r9
 1101 0110 8F90      		pop r8
 1102               	.LVL69:
 1103 0112 0895      		ret
 1104               		.cfi_endproc
 1105               	.LFE189:
 1107               		.section	.text.obqObjectInit,"ax",@progbits
 1108               	.global	obqObjectInit
 1110               	obqObjectInit:
 1111               	.LFB190:
 418:../../../os/hal/src/hal_buffers.c **** 
 419:../../../os/hal/src/hal_buffers.c **** /**
 420:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 421:../../../os/hal/src/hal_buffers.c ****  *
 422:../../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 423:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 424:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 425:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 426:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 427:../../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 428:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 429:../../../os/hal/src/hal_buffers.c ****  *
 430:../../../os/hal/src/hal_buffers.c ****  * @init
 431:../../../os/hal/src/hal_buffers.c ****  */
 432:../../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 433:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1112               		.loc 1 433 0
 1113               		.cfi_startproc
 1114               	.LVL70:
 1115 0000 CF92      		push r12
 1116               	.LCFI26:
 1117               		.cfi_def_cfa_offset 3
 1118               		.cfi_offset 12, -2
 1119 0002 DF92      		push r13
 1120               	.LCFI27:
 1121               		.cfi_def_cfa_offset 4
 1122               		.cfi_offset 13, -3
 1123 0004 EF92      		push r14
 1124               	.LCFI28:
 1125               		.cfi_def_cfa_offset 5
 1126               		.cfi_offset 14, -4
 1127 0006 FF92      		push r15
 1128               	.LCFI29:
 1129               		.cfi_def_cfa_offset 6
 1130               		.cfi_offset 15, -5
 1131 0008 0F93      		push r16
 1132               	.LCFI30:
 1133               		.cfi_def_cfa_offset 7
 1134               		.cfi_offset 16, -6
 1135 000a 1F93      		push r17
 1136               	.LCFI31:
 1137               		.cfi_def_cfa_offset 8
 1138               		.cfi_offset 17, -7
 1139               	/* prologue: function */
 1140               	/* frame size = 0 */
 1141               	/* stack size = 6 */
 1142               	.L__stack_usage = 6
 1143 000c FC01      		movw r30,r24
 1144               	.LVL71:
 1145               	.LBB282:
 1146               	.LBB283:
 1147               	.LBB284:
 1148               	.LBB285:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 1149               		.loc 2 539 0
 1150 000e 9183      		std Z+1,r25
 1151 0010 8083      		st Z,r24
 1152               		.loc 2 540 0
 1153 0012 9383      		std Z+3,r25
 1154 0014 8283      		std Z+2,r24
 1155               	.LVL72:
 1156               	.LBE285:
 1157               	.LBE284:
 1158               	.LBE283:
 1159               	.LBE282:
 434:../../../os/hal/src/hal_buffers.c **** 
 435:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 436:../../../os/hal/src/hal_buffers.c **** 
 437:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 438:../../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1160               		.loc 1 438 0
 1161 0016 6483      		std Z+4,r22
 439:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1162               		.loc 1 439 0
 1163 0018 1683      		std Z+6,r17
 1164 001a 0583      		std Z+5,r16
 440:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1165               		.loc 1 440 0
 1166 001c 5287      		std Z+10,r21
 1167 001e 4187      		std Z+9,r20
 441:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1168               		.loc 1 441 0
 1169 0020 5087      		std Z+8,r21
 1170 0022 4783      		std Z+7,r20
 442:../../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1171               		.loc 1 442 0
 1172 0024 2E5F      		subi r18,-2
 1173 0026 3F4F      		sbci r19,-1
 1174               	.LVL73:
 1175 0028 029F      		mul r16,r18
 1176 002a C001      		movw r24,r0
 1177 002c 039F      		mul r16,r19
 1178 002e 900D      		add r25,r0
 1179 0030 129F      		mul r17,r18
 1180 0032 900D      		add r25,r0
 1181 0034 1124      		clr r1
 1182               	.LVL74:
 1183 0036 840F      		add r24,r20
 1184 0038 951F      		adc r25,r21
 1185 003a 9487      		std Z+12,r25
 1186 003c 8387      		std Z+11,r24
 443:../../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1187               		.loc 1 443 0
 1188 003e 3687      		std Z+14,r19
 1189 0040 2587      		std Z+13,r18
 444:../../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1190               		.loc 1 444 0
 1191 0042 108B      		std Z+16,r17
 1192 0044 0787      		std Z+15,r16
 445:../../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1193               		.loc 1 445 0
 1194 0046 528B      		std Z+18,r21
 1195 0048 418B      		std Z+17,r20
 446:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1196               		.loc 1 446 0
 1197 004a 148A      		std Z+20,__zero_reg__
 1198 004c 138A      		std Z+19,__zero_reg__
 447:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1199               		.loc 1 447 0
 1200 004e 168A      		std Z+22,__zero_reg__
 1201 0050 158A      		std Z+21,__zero_reg__
 448:../../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1202               		.loc 1 448 0
 1203 0052 F08E      		std Z+24,r15
 1204 0054 E78A      		std Z+23,r14
 449:../../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1205               		.loc 1 449 0
 1206 0056 D28E      		std Z+26,r13
 1207 0058 C18E      		std Z+25,r12
 1208               	/* epilogue start */
 450:../../../os/hal/src/hal_buffers.c **** }
 1209               		.loc 1 450 0
 1210 005a 1F91      		pop r17
 1211 005c 0F91      		pop r16
 1212               	.LVL75:
 1213 005e FF90      		pop r15
 1214 0060 EF90      		pop r14
 1215               	.LVL76:
 1216 0062 DF90      		pop r13
 1217 0064 CF90      		pop r12
 1218               	.LVL77:
 1219 0066 0895      		ret
 1220               		.cfi_endproc
 1221               	.LFE190:
 1223               		.section	.text.obqResetI,"ax",@progbits
 1224               	.global	obqResetI
 1226               	obqResetI:
 1227               	.LFB191:
 451:../../../os/hal/src/hal_buffers.c **** 
 452:../../../os/hal/src/hal_buffers.c **** /**
 453:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 454:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 455:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 456:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 457:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 458:../../../os/hal/src/hal_buffers.c ****  *
 459:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 460:../../../os/hal/src/hal_buffers.c ****  *
 461:../../../os/hal/src/hal_buffers.c ****  * @iclass
 462:../../../os/hal/src/hal_buffers.c ****  */
 463:../../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1228               		.loc 1 463 0
 1229               		.cfi_startproc
 1230               	.LVL78:
 1231               	/* prologue: function */
 1232               	/* frame size = 0 */
 1233               	/* stack size = 0 */
 1234               	.L__stack_usage = 0
 1235 0000 FC01      		movw r30,r24
 464:../../../os/hal/src/hal_buffers.c **** 
 465:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 466:../../../os/hal/src/hal_buffers.c **** 
 467:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1236               		.loc 1 467 0
 1237 0002 8785      		ldd r24,Z+15
 1238 0004 9089      		ldd r25,Z+16
 1239               	.LVL79:
 1240 0006 9683      		std Z+6,r25
 1241 0008 8583      		std Z+5,r24
 468:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1242               		.loc 1 468 0
 1243 000a 8189      		ldd r24,Z+17
 1244 000c 9289      		ldd r25,Z+18
 1245 000e 9287      		std Z+10,r25
 1246 0010 8187      		std Z+9,r24
 469:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1247               		.loc 1 469 0
 1248 0012 9087      		std Z+8,r25
 1249 0014 8783      		std Z+7,r24
 470:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1250               		.loc 1 470 0
 1251 0016 148A      		std Z+20,__zero_reg__
 1252 0018 138A      		std Z+19,__zero_reg__
 471:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1253               		.loc 1 471 0
 1254 001a 168A      		std Z+22,__zero_reg__
 1255 001c 158A      		std Z+21,__zero_reg__
 1256               	.LVL80:
 1257               	.LBB286:
 1258               	.LBB287:
 1259               		.loc 3 857 0
 1260 001e 6EEF      		ldi r22,lo8(-2)
 1261 0020 7FEF      		ldi r23,lo8(-1)
 1262 0022 CF01      		movw r24,r30
 1263 0024 0C94 0000 		jmp chThdDequeueAllI
 1264               	.LVL81:
 1265               	.LBE287:
 1266               	.LBE286:
 1267               		.cfi_endproc
 1268               	.LFE191:
 1270               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1271               	.global	obqGetFullBufferI
 1273               	obqGetFullBufferI:
 1274               	.LFB192:
 472:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 473:../../../os/hal/src/hal_buffers.c **** }
 474:../../../os/hal/src/hal_buffers.c **** 
 475:../../../os/hal/src/hal_buffers.c **** /**
 476:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 477:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 478:../../../os/hal/src/hal_buffers.c ****  *
 479:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 480:../../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 481:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 482:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 483:../../../os/hal/src/hal_buffers.c ****  *
 484:../../../os/hal/src/hal_buffers.c ****  * @iclass
 485:../../../os/hal/src/hal_buffers.c ****  */
 486:../../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 487:../../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1275               		.loc 1 487 0
 1276               		.cfi_startproc
 1277               	.LVL82:
 1278               	/* prologue: function */
 1279               	/* frame size = 0 */
 1280               	/* stack size = 0 */
 1281               	.L__stack_usage = 0
 1282 0000 FC01      		movw r30,r24
 488:../../../os/hal/src/hal_buffers.c **** 
 489:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 490:../../../os/hal/src/hal_buffers.c **** 
 491:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1283               		.loc 1 491 0
 1284 0002 2185      		ldd r18,Z+9
 1285 0004 3285      		ldd r19,Z+10
 1286 0006 8781      		ldd r24,Z+7
 1287 0008 9085      		ldd r25,Z+8
 1288               	.LVL83:
 1289 000a 8217      		cp r24,r18
 1290 000c 9307      		cpc r25,r19
 1291 000e 01F0      		breq .L67
 1292               	.L61:
 492:../../../os/hal/src/hal_buffers.c ****     return NULL;
 493:../../../os/hal/src/hal_buffers.c ****   }
 494:../../../os/hal/src/hal_buffers.c **** 
 495:../../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 496:../../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)obqp->brdptr);
 1293               		.loc 1 496 0
 1294 0010 F901      		movw r30,r18
 1295               	.LVL84:
 1296 0012 2191      		ld r18,Z+
 1297 0014 3191      		ld r19,Z+
 1298 0016 CF01      		movw r24,r30
 1299 0018 FB01      		movw r30,r22
 1300 001a 3183      		std Z+1,r19
 1301 001c 2083      		st Z,r18
 497:../../../os/hal/src/hal_buffers.c **** 
 498:../../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 499:../../../os/hal/src/hal_buffers.c **** }
 1302               		.loc 1 499 0
 1303 001e 0895      		ret
 1304               	.LVL85:
 1305               	.L67:
 491:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1306               		.loc 1 491 0 discriminator 1
 1307 0020 8581      		ldd r24,Z+5
 1308 0022 9681      		ldd r25,Z+6
 1309 0024 892B      		or r24,r25
 1310 0026 01F0      		breq .L61
 492:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1311               		.loc 1 492 0
 1312 0028 80E0      		ldi r24,0
 1313 002a 90E0      		ldi r25,0
 1314 002c 0895      		ret
 1315               		.cfi_endproc
 1316               	.LFE192:
 1318               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1319               	.global	obqReleaseEmptyBufferI
 1321               	obqReleaseEmptyBufferI:
 1322               	.LFB193:
 500:../../../os/hal/src/hal_buffers.c **** 
 501:../../../os/hal/src/hal_buffers.c **** /**
 502:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 503:../../../os/hal/src/hal_buffers.c ****  *
 504:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 505:../../../os/hal/src/hal_buffers.c ****  *
 506:../../../os/hal/src/hal_buffers.c ****  * @iclass
 507:../../../os/hal/src/hal_buffers.c ****  */
 508:../../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1323               		.loc 1 508 0
 1324               		.cfi_startproc
 1325               	.LVL86:
 1326               	/* prologue: function */
 1327               	/* frame size = 0 */
 1328               	/* stack size = 0 */
 1329               	.L__stack_usage = 0
 1330 0000 FC01      		movw r30,r24
 509:../../../os/hal/src/hal_buffers.c **** 
 510:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 511:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 512:../../../os/hal/src/hal_buffers.c **** 
 513:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 514:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1331               		.loc 1 514 0
 1332 0002 8581      		ldd r24,Z+5
 1333 0004 9681      		ldd r25,Z+6
 1334               	.LVL87:
 1335 0006 0196      		adiw r24,1
 1336 0008 9683      		std Z+6,r25
 1337 000a 8583      		std Z+5,r24
 515:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1338               		.loc 1 515 0
 1339 000c 2185      		ldd r18,Z+9
 1340 000e 3285      		ldd r19,Z+10
 1341 0010 8585      		ldd r24,Z+13
 1342 0012 9685      		ldd r25,Z+14
 1343 0014 820F      		add r24,r18
 1344 0016 931F      		adc r25,r19
 1345 0018 9287      		std Z+10,r25
 1346 001a 8187      		std Z+9,r24
 516:../../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1347               		.loc 1 516 0
 1348 001c 2385      		ldd r18,Z+11
 1349 001e 3485      		ldd r19,Z+12
 1350 0020 8217      		cp r24,r18
 1351 0022 9307      		cpc r25,r19
 1352 0024 00F0      		brlo .L69
 517:../../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1353               		.loc 1 517 0
 1354 0026 8189      		ldd r24,Z+17
 1355 0028 9289      		ldd r25,Z+18
 1356 002a 9287      		std Z+10,r25
 1357 002c 8187      		std Z+9,r24
 1358               	.L69:
 1359               	.LVL88:
 1360               	.LBB288:
 1361               	.LBB289:
 844:../../../os/hal/osal/rt/osal.h **** }
 1362               		.loc 3 844 0
 1363 002e 60E0      		ldi r22,0
 1364 0030 70E0      		ldi r23,0
 1365 0032 CF01      		movw r24,r30
 1366 0034 0C94 0000 		jmp chThdDequeueNextI
 1367               	.LVL89:
 1368               	.LBE289:
 1369               	.LBE288:
 1370               		.cfi_endproc
 1371               	.LFE193:
 1373               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1374               	.global	obqGetEmptyBufferTimeoutS
 1376               	obqGetEmptyBufferTimeoutS:
 1377               	.LFB195:
 518:../../../os/hal/src/hal_buffers.c ****   }
 519:../../../os/hal/src/hal_buffers.c **** 
 520:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 521:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 522:../../../os/hal/src/hal_buffers.c **** }
 523:../../../os/hal/src/hal_buffers.c **** 
 524:../../../os/hal/src/hal_buffers.c **** /**
 525:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 526:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 527:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 528:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 529:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 530:../../../os/hal/src/hal_buffers.c ****  *
 531:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 532:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 533:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 534:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 535:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 536:../../../os/hal/src/hal_buffers.c ****  *                      .
 537:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 538:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 539:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 540:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 541:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 542:../../../os/hal/src/hal_buffers.c ****  *
 543:../../../os/hal/src/hal_buffers.c ****  * @api
 544:../../../os/hal/src/hal_buffers.c ****  */
 545:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 546:../../../os/hal/src/hal_buffers.c ****                                sysinterval_t timeout) {
 547:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 548:../../../os/hal/src/hal_buffers.c **** 
 549:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 550:../../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 551:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 552:../../../os/hal/src/hal_buffers.c **** 
 553:../../../os/hal/src/hal_buffers.c ****   return msg;
 554:../../../os/hal/src/hal_buffers.c **** }
 555:../../../os/hal/src/hal_buffers.c **** 
 556:../../../os/hal/src/hal_buffers.c **** /**
 557:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 558:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 559:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 560:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 561:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 562:../../../os/hal/src/hal_buffers.c ****  *
 563:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 564:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 565:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 566:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 567:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 568:../../../os/hal/src/hal_buffers.c ****  *                      .
 569:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 570:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 571:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 572:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 573:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 574:../../../os/hal/src/hal_buffers.c ****  *
 575:../../../os/hal/src/hal_buffers.c ****  * @sclass
 576:../../../os/hal/src/hal_buffers.c ****  */
 577:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 578:../../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 1378               		.loc 1 578 0
 1379               		.cfi_startproc
 1380               	.LVL90:
 1381 0000 0F93      		push r16
 1382               	.LCFI32:
 1383               		.cfi_def_cfa_offset 3
 1384               		.cfi_offset 16, -2
 1385 0002 1F93      		push r17
 1386               	.LCFI33:
 1387               		.cfi_def_cfa_offset 4
 1388               		.cfi_offset 17, -3
 1389 0004 CF93      		push r28
 1390               	.LCFI34:
 1391               		.cfi_def_cfa_offset 5
 1392               		.cfi_offset 28, -4
 1393 0006 DF93      		push r29
 1394               	.LCFI35:
 1395               		.cfi_def_cfa_offset 6
 1396               		.cfi_offset 29, -5
 1397               	/* prologue: function */
 1398               	/* frame size = 0 */
 1399               	/* stack size = 4 */
 1400               	.L__stack_usage = 4
 1401 0008 EC01      		movw r28,r24
 1402 000a 8B01      		movw r16,r22
 579:../../../os/hal/src/hal_buffers.c **** 
 580:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 581:../../../os/hal/src/hal_buffers.c **** 
 582:../../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1403               		.loc 1 582 0
 1404 000c 00C0      		rjmp .L71
 1405               	.LVL91:
 1406               	.L73:
 1407               	.LBB298:
 583:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1408               		.loc 1 583 0
 1409 000e 8C81      		ldd r24,Y+4
 1410 0010 8111      		cpse r24,__zero_reg__
 1411 0012 00C0      		rjmp .L74
 1412               	.LVL92:
 1413               	.LBB299:
 1414               	.LBB300:
 831:../../../os/hal/osal/rt/osal.h **** }
 1415               		.loc 3 831 0
 1416 0014 B801      		movw r22,r16
 1417 0016 CE01      		movw r24,r28
 1418 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1419               	.LVL93:
 1420               	.LBE300:
 1421               	.LBE299:
 584:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 585:../../../os/hal/src/hal_buffers.c ****     }
 586:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 587:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1422               		.loc 1 587 0
 1423 001c 97FD      		sbrc r25,7
 1424 001e 00C0      		rjmp .L72
 1425               	.L71:
 1426               	.LBE298:
 582:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1427               		.loc 1 582 0
 1428 0020 8D81      		ldd r24,Y+5
 1429 0022 9E81      		ldd r25,Y+6
 1430 0024 892B      		or r24,r25
 1431 0026 01F0      		breq .L73
 1432               	.LVL94:
 1433               	.LBB301:
 1434               	.LBB302:
 588:../../../os/hal/src/hal_buffers.c ****       return msg;
 589:../../../os/hal/src/hal_buffers.c ****     }
 590:../../../os/hal/src/hal_buffers.c ****   }
 591:../../../os/hal/src/hal_buffers.c **** 
 592:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 593:../../../os/hal/src/hal_buffers.c **** 
 594:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 595:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1435               		.loc 1 595 0
 1436 0028 2F81      		ldd r18,Y+7
 1437 002a 3885      		ldd r19,Y+8
 1438 002c C901      		movw r24,r18
 1439 002e 0296      		adiw r24,2
 1440 0030 9C8B      		std Y+20,r25
 1441 0032 8B8B      		std Y+19,r24
 596:../../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1442               		.loc 1 596 0
 1443 0034 8D85      		ldd r24,Y+13
 1444 0036 9E85      		ldd r25,Y+14
 1445 0038 820F      		add r24,r18
 1446 003a 931F      		adc r25,r19
 1447 003c 9E8B      		std Y+22,r25
 1448 003e 8D8B      		std Y+21,r24
 1449               	.LVL95:
 1450 0040 80E0      		ldi r24,0
 1451 0042 90E0      		ldi r25,0
 1452               	.L72:
 1453               	/* epilogue start */
 1454               	.LBE302:
 1455               	.LBE301:
 597:../../../os/hal/src/hal_buffers.c **** 
 598:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 599:../../../os/hal/src/hal_buffers.c **** }
 1456               		.loc 1 599 0
 1457 0044 DF91      		pop r29
 1458 0046 CF91      		pop r28
 1459               	.LVL96:
 1460 0048 1F91      		pop r17
 1461 004a 0F91      		pop r16
 1462               	.LVL97:
 1463 004c 0895      		ret
 1464               	.LVL98:
 1465               	.L74:
 1466               	.LBB303:
 584:../../../os/hal/src/hal_buffers.c ****     }
 1467               		.loc 1 584 0
 1468 004e 8EEF      		ldi r24,lo8(-2)
 1469 0050 9FEF      		ldi r25,lo8(-1)
 1470               	/* epilogue start */
 1471               	.LBE303:
 1472               		.loc 1 599 0
 1473 0052 DF91      		pop r29
 1474 0054 CF91      		pop r28
 1475               	.LVL99:
 1476 0056 1F91      		pop r17
 1477 0058 0F91      		pop r16
 1478               	.LVL100:
 1479 005a 0895      		ret
 1480               		.cfi_endproc
 1481               	.LFE195:
 1483               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1484               	.global	obqGetEmptyBufferTimeout
 1486               	obqGetEmptyBufferTimeout:
 1487               	.LFB194:
 546:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1488               		.loc 1 546 0
 1489               		.cfi_startproc
 1490               	.LVL101:
 1491               	/* prologue: function */
 1492               	/* frame size = 0 */
 1493               	/* stack size = 0 */
 1494               	.L__stack_usage = 0
 1495               	.LBB304:
 1496               	.LBB305:
 1497               	.LBB306:
 1498               	.LBB307:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1499               		.loc 4 437 0
 1500               	/* #APP */
 1501               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1502 0000 F894      		cli
 1503               	 ;  0 "" 2
 1504               	/* #NOAPP */
 1505               	.LBE307:
 1506               	.LBE306:
 1507               	.LBE305:
 1508               	.LBE304:
 550:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1509               		.loc 1 550 0
 1510 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1511               	.LVL102:
 1512               	.LBB308:
 1513               	.LBB309:
 1514               	.LBB310:
 1515               	.LBB311:
 1516               	.LBB312:
 1517               		.loc 4 447 0
 1518               	/* #APP */
 1519               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1520 0006 7894      		sei
 1521               	 ;  0 "" 2
 1522               	/* #NOAPP */
 1523               	.LBE312:
 1524               	.LBE311:
 1525               	.LBE310:
 1526               	.LBE309:
 1527               	.LBE308:
 554:../../../os/hal/src/hal_buffers.c **** 
 1528               		.loc 1 554 0
 1529 0008 0895      		ret
 1530               		.cfi_endproc
 1531               	.LFE194:
 1533               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1534               	.global	obqPostFullBuffer
 1536               	obqPostFullBuffer:
 1537               	.LFB196:
 600:../../../os/hal/src/hal_buffers.c **** 
 601:../../../os/hal/src/hal_buffers.c **** /**
 602:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 603:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 604:../../../os/hal/src/hal_buffers.c ****  *
 605:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 606:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 607:../../../os/hal/src/hal_buffers.c ****  *
 608:../../../os/hal/src/hal_buffers.c ****  * @api
 609:../../../os/hal/src/hal_buffers.c ****  */
 610:../../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 1538               		.loc 1 610 0
 1539               		.cfi_startproc
 1540               	.LVL103:
 1541               	/* prologue: function */
 1542               	/* frame size = 0 */
 1543               	/* stack size = 0 */
 1544               	.L__stack_usage = 0
 1545 0000 DC01      		movw r26,r24
 1546               	.LBB313:
 1547               	.LBB314:
 1548               	.LBB315:
 1549               	.LBB316:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1550               		.loc 4 437 0
 1551               	/* #APP */
 1552               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1553 0002 F894      		cli
 1554               	 ;  0 "" 2
 1555               	.LVL104:
 1556               	/* #NOAPP */
 1557               	.LBE316:
 1558               	.LBE315:
 1559               	.LBE314:
 1560               	.LBE313:
 1561               	.LBB317:
 1562               	.LBB318:
 611:../../../os/hal/src/hal_buffers.c **** 
 612:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 613:../../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 614:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 615:../../../os/hal/src/hal_buffers.c **** }
 616:../../../os/hal/src/hal_buffers.c **** 
 617:../../../os/hal/src/hal_buffers.c **** /**
 618:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 619:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 620:../../../os/hal/src/hal_buffers.c ****  *
 621:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 622:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 623:../../../os/hal/src/hal_buffers.c ****  *
 624:../../../os/hal/src/hal_buffers.c ****  * @sclass
 625:../../../os/hal/src/hal_buffers.c ****  */
 626:../../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 627:../../../os/hal/src/hal_buffers.c **** 
 628:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 629:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 630:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 631:../../../os/hal/src/hal_buffers.c **** 
 632:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 633:../../../os/hal/src/hal_buffers.c ****   *((size_t *)obqp->bwrptr) = size;
 1563               		.loc 1 633 0
 1564 0004 1796      		adiw r26,7
 1565 0006 ED91      		ld r30,X+
 1566 0008 FC91      		ld r31,X
 1567 000a 1897      		sbiw r26,7+1
 1568 000c 7183      		std Z+1,r23
 1569 000e 6083      		st Z,r22
 634:../../../os/hal/src/hal_buffers.c **** 
 635:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1570               		.loc 1 636 0
 1571 0010 1596      		adiw r26,5
 1572 0012 2D91      		ld r18,X+
 1573 0014 3C91      		ld r19,X
 1574 0016 1697      		sbiw r26,5+1
 1575 0018 2150      		subi r18,1
 1576 001a 3109      		sbc r19,__zero_reg__
 1577 001c 1696      		adiw r26,5+1
 1578 001e 3C93      		st X,r19
 1579 0020 2E93      		st -X,r18
 1580 0022 1597      		sbiw r26,5
 637:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1581               		.loc 1 637 0
 1582 0024 1D96      		adiw r26,13
 1583 0026 8D91      		ld r24,X+
 1584 0028 9C91      		ld r25,X
 1585 002a 1E97      		sbiw r26,13+1
 1586               	.LVL105:
 1587 002c 8E0F      		add r24,r30
 1588 002e 9F1F      		adc r25,r31
 1589 0030 1896      		adiw r26,7+1
 1590 0032 9C93      		st X,r25
 1591 0034 8E93      		st -X,r24
 1592 0036 1797      		sbiw r26,7
 638:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1593               		.loc 1 638 0
 1594 0038 1B96      		adiw r26,11
 1595 003a 2D91      		ld r18,X+
 1596 003c 3C91      		ld r19,X
 1597 003e 1C97      		sbiw r26,11+1
 1598 0040 8217      		cp r24,r18
 1599 0042 9307      		cpc r25,r19
 1600 0044 00F0      		brlo .L77
 639:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1601               		.loc 1 639 0
 1602 0046 5196      		adiw r26,17
 1603 0048 8D91      		ld r24,X+
 1604 004a 9C91      		ld r25,X
 1605 004c 5297      		sbiw r26,17+1
 1606 004e 1896      		adiw r26,7+1
 1607 0050 9C93      		st X,r25
 1608 0052 8E93      		st -X,r24
 1609 0054 1797      		sbiw r26,7
 1610               	.L77:
 640:../../../os/hal/src/hal_buffers.c ****   }
 641:../../../os/hal/src/hal_buffers.c **** 
 642:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 643:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1611               		.loc 1 643 0
 1612 0056 5496      		adiw r26,19+1
 1613 0058 1C92      		st X,__zero_reg__
 1614 005a 1E92      		st -X,__zero_reg__
 1615 005c 5397      		sbiw r26,19
 644:../../../os/hal/src/hal_buffers.c **** 
 645:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 646:../../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1616               		.loc 1 646 0
 1617 005e 5796      		adiw r26,23
 1618 0060 ED91      		ld r30,X+
 1619 0062 FC91      		ld r31,X
 1620 0064 5897      		sbiw r26,23+1
 1621 0066 3097      		sbiw r30,0
 1622 0068 01F0      		breq .L78
 1623 006a CD01      		movw r24,r26
 647:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1624               		.loc 1 647 0
 1625 006c 0995      		icall
 1626               	.LVL106:
 1627               	.L78:
 1628               	.LBE318:
 1629               	.LBE317:
 1630               	.LBB319:
 1631               	.LBB320:
 1632               	.LBB321:
 1633               	.LBB322:
 1634               	.LBB323:
 1635               		.loc 4 447 0
 1636               	/* #APP */
 1637               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1638 006e 7894      		sei
 1639               	 ;  0 "" 2
 1640               	/* #NOAPP */
 1641 0070 0895      		ret
 1642               	.LBE323:
 1643               	.LBE322:
 1644               	.LBE321:
 1645               	.LBE320:
 1646               	.LBE319:
 1647               		.cfi_endproc
 1648               	.LFE196:
 1650               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1651               	.global	obqPostFullBufferS
 1653               	obqPostFullBufferS:
 1654               	.LFB197:
 626:../../../os/hal/src/hal_buffers.c **** 
 1655               		.loc 1 626 0
 1656               		.cfi_startproc
 1657               	.LVL107:
 1658               	/* prologue: function */
 1659               	/* frame size = 0 */
 1660               	/* stack size = 0 */
 1661               	.L__stack_usage = 0
 1662 0000 DC01      		movw r26,r24
 633:../../../os/hal/src/hal_buffers.c **** 
 1663               		.loc 1 633 0
 1664 0002 1796      		adiw r26,7
 1665 0004 ED91      		ld r30,X+
 1666 0006 FC91      		ld r31,X
 1667 0008 1897      		sbiw r26,7+1
 1668 000a 7183      		std Z+1,r23
 1669 000c 6083      		st Z,r22
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1670               		.loc 1 636 0
 1671 000e 1596      		adiw r26,5
 1672 0010 2D91      		ld r18,X+
 1673 0012 3C91      		ld r19,X
 1674 0014 1697      		sbiw r26,5+1
 1675 0016 2150      		subi r18,1
 1676 0018 3109      		sbc r19,__zero_reg__
 1677 001a 1696      		adiw r26,5+1
 1678 001c 3C93      		st X,r19
 1679 001e 2E93      		st -X,r18
 1680 0020 1597      		sbiw r26,5
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1681               		.loc 1 637 0
 1682 0022 1D96      		adiw r26,13
 1683 0024 8D91      		ld r24,X+
 1684 0026 9C91      		ld r25,X
 1685 0028 1E97      		sbiw r26,13+1
 1686               	.LVL108:
 1687 002a 8E0F      		add r24,r30
 1688 002c 9F1F      		adc r25,r31
 1689 002e 1896      		adiw r26,7+1
 1690 0030 9C93      		st X,r25
 1691 0032 8E93      		st -X,r24
 1692 0034 1797      		sbiw r26,7
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1693               		.loc 1 638 0
 1694 0036 1B96      		adiw r26,11
 1695 0038 2D91      		ld r18,X+
 1696 003a 3C91      		ld r19,X
 1697 003c 1C97      		sbiw r26,11+1
 1698 003e 8217      		cp r24,r18
 1699 0040 9307      		cpc r25,r19
 1700 0042 00F0      		brlo .L83
 639:../../../os/hal/src/hal_buffers.c ****   }
 1701               		.loc 1 639 0
 1702 0044 5196      		adiw r26,17
 1703 0046 8D91      		ld r24,X+
 1704 0048 9C91      		ld r25,X
 1705 004a 5297      		sbiw r26,17+1
 1706 004c 1896      		adiw r26,7+1
 1707 004e 9C93      		st X,r25
 1708 0050 8E93      		st -X,r24
 1709 0052 1797      		sbiw r26,7
 1710               	.L83:
 643:../../../os/hal/src/hal_buffers.c **** 
 1711               		.loc 1 643 0
 1712 0054 5496      		adiw r26,19+1
 1713 0056 1C92      		st X,__zero_reg__
 1714 0058 1E92      		st -X,__zero_reg__
 1715 005a 5397      		sbiw r26,19
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1716               		.loc 1 646 0
 1717 005c 5796      		adiw r26,23
 1718 005e ED91      		ld r30,X+
 1719 0060 FC91      		ld r31,X
 1720 0062 5897      		sbiw r26,23+1
 1721 0064 3097      		sbiw r30,0
 1722 0066 01F0      		breq .L82
 1723               		.loc 1 647 0
 1724 0068 CD01      		movw r24,r26
 1725 006a 0994      		ijmp
 1726               	.LVL109:
 1727               	.L82:
 1728 006c 0895      		ret
 1729               		.cfi_endproc
 1730               	.LFE197:
 1732               		.section	.text.obqPutTimeout,"ax",@progbits
 1733               	.global	obqPutTimeout
 1735               	obqPutTimeout:
 1736               	.LFB198:
 648:../../../os/hal/src/hal_buffers.c ****   }
 649:../../../os/hal/src/hal_buffers.c **** }
 650:../../../os/hal/src/hal_buffers.c **** 
 651:../../../os/hal/src/hal_buffers.c **** /**
 652:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 653:../../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 654:../../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 655:../../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 656:../../../os/hal/src/hal_buffers.c ****  *
 657:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 658:../../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 659:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 660:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 661:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 662:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 663:../../../os/hal/src/hal_buffers.c ****  *                      .
 664:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 665:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 666:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 667:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 668:../../../os/hal/src/hal_buffers.c ****  *
 669:../../../os/hal/src/hal_buffers.c ****  * @api
 670:../../../os/hal/src/hal_buffers.c ****  */
 671:../../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 672:../../../os/hal/src/hal_buffers.c ****                     sysinterval_t timeout) {
 1737               		.loc 1 672 0
 1738               		.cfi_startproc
 1739               	.LVL110:
 1740 0000 1F93      		push r17
 1741               	.LCFI36:
 1742               		.cfi_def_cfa_offset 3
 1743               		.cfi_offset 17, -2
 1744 0002 CF93      		push r28
 1745               	.LCFI37:
 1746               		.cfi_def_cfa_offset 4
 1747               		.cfi_offset 28, -3
 1748 0004 DF93      		push r29
 1749               	.LCFI38:
 1750               		.cfi_def_cfa_offset 5
 1751               		.cfi_offset 29, -4
 1752               	/* prologue: function */
 1753               	/* frame size = 0 */
 1754               	/* stack size = 3 */
 1755               	.L__stack_usage = 3
 1756 0006 EC01      		movw r28,r24
 1757 0008 162F      		mov r17,r22
 1758               	.LBB324:
 1759               	.LBB325:
 1760               	.LBB326:
 1761               	.LBB327:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1762               		.loc 4 437 0
 1763               	/* #APP */
 1764               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1765 000a F894      		cli
 1766               	 ;  0 "" 2
 1767               	/* #NOAPP */
 1768               	.LBE327:
 1769               	.LBE326:
 1770               	.LBE325:
 1771               	.LBE324:
 673:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 674:../../../os/hal/src/hal_buffers.c **** 
 675:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 676:../../../os/hal/src/hal_buffers.c **** 
 677:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 678:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1772               		.loc 1 678 0
 1773 000c EB89      		ldd r30,Y+19
 1774 000e FC89      		ldd r31,Y+20
 1775 0010 3097      		sbiw r30,0
 1776 0012 01F0      		breq .L96
 1777               	.LVL111:
 1778               	.L86:
 679:../../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 680:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 681:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 682:../../../os/hal/src/hal_buffers.c ****       return msg;
 683:../../../os/hal/src/hal_buffers.c ****     }
 684:../../../os/hal/src/hal_buffers.c ****   }
 685:../../../os/hal/src/hal_buffers.c **** 
 686:../../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 687:../../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1779               		.loc 1 687 0
 1780 0014 1083      		st Z,r17
 688:../../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1781               		.loc 1 688 0
 1782 0016 8B89      		ldd r24,Y+19
 1783 0018 9C89      		ldd r25,Y+20
 1784 001a 0196      		adiw r24,1
 1785 001c 9C8B      		std Y+20,r25
 1786 001e 8B8B      		std Y+19,r24
 689:../../../os/hal/src/hal_buffers.c **** 
 690:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 691:../../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 692:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1787               		.loc 1 692 0
 1788 0020 2D89      		ldd r18,Y+21
 1789 0022 3E89      		ldd r19,Y+22
 1790 0024 8217      		cp r24,r18
 1791 0026 9307      		cpc r25,r19
 1792 0028 00F0      		brlo .L90
 1793               	.LVL112:
 1794               	.LBB328:
 1795               	.LBB329:
 633:../../../os/hal/src/hal_buffers.c **** 
 1796               		.loc 1 633 0
 1797 002a EF81      		ldd r30,Y+7
 1798 002c F885      		ldd r31,Y+8
 1799 002e 2D85      		ldd r18,Y+13
 1800 0030 3E85      		ldd r19,Y+14
 1801 0032 2250      		subi r18,2
 1802 0034 3109      		sbc r19,__zero_reg__
 1803               	.LVL113:
 1804 0036 3183      		std Z+1,r19
 1805 0038 2083      		st Z,r18
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1806               		.loc 1 636 0
 1807 003a 2D81      		ldd r18,Y+5
 1808 003c 3E81      		ldd r19,Y+6
 1809               	.LVL114:
 1810 003e 2150      		subi r18,1
 1811 0040 3109      		sbc r19,__zero_reg__
 1812 0042 3E83      		std Y+6,r19
 1813 0044 2D83      		std Y+5,r18
 1814               	.LVL115:
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1815               		.loc 1 637 0
 1816 0046 8D85      		ldd r24,Y+13
 1817 0048 9E85      		ldd r25,Y+14
 1818 004a 8E0F      		add r24,r30
 1819 004c 9F1F      		adc r25,r31
 1820 004e 9887      		std Y+8,r25
 1821 0050 8F83      		std Y+7,r24
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1822               		.loc 1 638 0
 1823 0052 2B85      		ldd r18,Y+11
 1824 0054 3C85      		ldd r19,Y+12
 1825 0056 8217      		cp r24,r18
 1826 0058 9307      		cpc r25,r19
 1827 005a 00F0      		brlo .L91
 639:../../../os/hal/src/hal_buffers.c ****   }
 1828               		.loc 1 639 0
 1829 005c 8989      		ldd r24,Y+17
 1830 005e 9A89      		ldd r25,Y+18
 1831 0060 9887      		std Y+8,r25
 1832 0062 8F83      		std Y+7,r24
 1833               	.L91:
 643:../../../os/hal/src/hal_buffers.c **** 
 1834               		.loc 1 643 0
 1835 0064 1C8A      		std Y+20,__zero_reg__
 1836 0066 1B8A      		std Y+19,__zero_reg__
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1837               		.loc 1 646 0
 1838 0068 EF89      		ldd r30,Y+23
 1839 006a F88D      		ldd r31,Y+24
 1840 006c 3097      		sbiw r30,0
 1841 006e 01F0      		breq .L90
 647:../../../os/hal/src/hal_buffers.c ****   }
 1842               		.loc 1 647 0
 1843 0070 CE01      		movw r24,r28
 1844 0072 0995      		icall
 1845               	.LVL116:
 1846               	.L90:
 1847               	.LBE329:
 1848               	.LBE328:
 1849               	.LBB330:
 1850               	.LBB331:
 1851               	.LBB332:
 1852               	.LBB333:
 1853               	.LBB334:
 1854               		.loc 4 447 0
 1855               	/* #APP */
 1856               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1857 0074 7894      		sei
 1858               	 ;  0 "" 2
 1859               	/* #NOAPP */
 1860               	.LBE334:
 1861               	.LBE333:
 1862               	.LBE332:
 1863               	.LBE331:
 1864               	.LBE330:
 693:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 694:../../../os/hal/src/hal_buffers.c ****   }
 695:../../../os/hal/src/hal_buffers.c **** 
 696:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 697:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1865               		.loc 1 697 0
 1866 0076 80E0      		ldi r24,0
 1867 0078 90E0      		ldi r25,0
 1868               	.L88:
 1869               	/* epilogue start */
 698:../../../os/hal/src/hal_buffers.c **** }
 1870               		.loc 1 698 0
 1871 007a DF91      		pop r29
 1872 007c CF91      		pop r28
 1873               	.LVL117:
 1874 007e 1F91      		pop r17
 1875               	.LVL118:
 1876 0080 0895      		ret
 1877               	.LVL119:
 1878               	.L96:
 679:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1879               		.loc 1 679 0
 1880 0082 BA01      		movw r22,r20
 1881 0084 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1882               	.LVL120:
 680:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1883               		.loc 1 680 0
 1884 0088 0097      		sbiw r24,0
 1885 008a 01F4      		brne .L87
 1886 008c EB89      		ldd r30,Y+19
 1887 008e FC89      		ldd r31,Y+20
 1888 0090 00C0      		rjmp .L86
 1889               	.L87:
 1890               	.LBB335:
 1891               	.LBB336:
 1892               	.LBB337:
 1893               	.LBB338:
 1894               	.LBB339:
 1895               		.loc 4 447 0
 1896               	/* #APP */
 1897               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1898 0092 7894      		sei
 1899               	 ;  0 "" 2
 1900               	/* #NOAPP */
 1901               	.LBE339:
 1902               	.LBE338:
 1903               	.LBE337:
 1904               	.LBE336:
 1905               	.LBE335:
 682:../../../os/hal/src/hal_buffers.c ****     }
 1906               		.loc 1 682 0
 1907 0094 00C0      		rjmp .L88
 1908               		.cfi_endproc
 1909               	.LFE198:
 1911               		.section	.text.obqWriteTimeout,"ax",@progbits
 1912               	.global	obqWriteTimeout
 1914               	obqWriteTimeout:
 1915               	.LFB199:
 699:../../../os/hal/src/hal_buffers.c **** 
 700:../../../os/hal/src/hal_buffers.c **** /**
 701:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 702:../../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 703:../../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 704:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 705:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 706:../../../os/hal/src/hal_buffers.c ****  *
 707:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 708:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 709:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 710:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 711:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 712:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 713:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 714:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 715:../../../os/hal/src/hal_buffers.c ****  *                      .
 716:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 717:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 718:../../../os/hal/src/hal_buffers.c ****  *
 719:../../../os/hal/src/hal_buffers.c ****  * @api
 720:../../../os/hal/src/hal_buffers.c ****  */
 721:../../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 722:../../../os/hal/src/hal_buffers.c ****                        size_t n, sysinterval_t timeout) {
 1916               		.loc 1 722 0
 1917               		.cfi_startproc
 1918               	.LVL121:
 1919 0000 8F92      		push r8
 1920               	.LCFI39:
 1921               		.cfi_def_cfa_offset 3
 1922               		.cfi_offset 8, -2
 1923 0002 9F92      		push r9
 1924               	.LCFI40:
 1925               		.cfi_def_cfa_offset 4
 1926               		.cfi_offset 9, -3
 1927 0004 AF92      		push r10
 1928               	.LCFI41:
 1929               		.cfi_def_cfa_offset 5
 1930               		.cfi_offset 10, -4
 1931 0006 BF92      		push r11
 1932               	.LCFI42:
 1933               		.cfi_def_cfa_offset 6
 1934               		.cfi_offset 11, -5
 1935 0008 CF92      		push r12
 1936               	.LCFI43:
 1937               		.cfi_def_cfa_offset 7
 1938               		.cfi_offset 12, -6
 1939 000a DF92      		push r13
 1940               	.LCFI44:
 1941               		.cfi_def_cfa_offset 8
 1942               		.cfi_offset 13, -7
 1943 000c EF92      		push r14
 1944               	.LCFI45:
 1945               		.cfi_def_cfa_offset 9
 1946               		.cfi_offset 14, -8
 1947 000e FF92      		push r15
 1948               	.LCFI46:
 1949               		.cfi_def_cfa_offset 10
 1950               		.cfi_offset 15, -9
 1951 0010 0F93      		push r16
 1952               	.LCFI47:
 1953               		.cfi_def_cfa_offset 11
 1954               		.cfi_offset 16, -10
 1955 0012 1F93      		push r17
 1956               	.LCFI48:
 1957               		.cfi_def_cfa_offset 12
 1958               		.cfi_offset 17, -11
 1959 0014 CF93      		push r28
 1960               	.LCFI49:
 1961               		.cfi_def_cfa_offset 13
 1962               		.cfi_offset 28, -12
 1963 0016 DF93      		push r29
 1964               	.LCFI50:
 1965               		.cfi_def_cfa_offset 14
 1966               		.cfi_offset 29, -13
 1967               	/* prologue: function */
 1968               	/* frame size = 0 */
 1969               	/* stack size = 12 */
 1970               	.L__stack_usage = 12
 1971 0018 EC01      		movw r28,r24
 1972 001a 6B01      		movw r12,r22
 1973 001c 5A01      		movw r10,r20
 1974 001e 4901      		movw r8,r18
 1975               	.LVL122:
 1976               	.LBB340:
 1977               	.LBB341:
 1978               	.LBB342:
 1979               	.LBB343:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1980               		.loc 4 437 0
 1981               	/* #APP */
 1982               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1983 0020 F894      		cli
 1984               	 ;  0 "" 2
 1985               	/* #NOAPP */
 1986               	.LBE343:
 1987               	.LBE342:
 1988               	.LBE341:
 1989               	.LBE340:
 723:../../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 1990               		.loc 1 723 0
 1991 0022 E12C      		mov r14,__zero_reg__
 1992 0024 F12C      		mov r15,__zero_reg__
 1993 0026 00C0      		rjmp .L108
 1994               	.LVL123:
 1995               	.L113:
 1996               	.LBB344:
 724:../../../os/hal/src/hal_buffers.c **** 
 725:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 726:../../../os/hal/src/hal_buffers.c **** 
 727:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 728:../../../os/hal/src/hal_buffers.c **** 
 729:../../../os/hal/src/hal_buffers.c ****   while (true) {
 730:../../../os/hal/src/hal_buffers.c ****     size_t size;
 731:../../../os/hal/src/hal_buffers.c **** 
 732:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 733:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 734:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 735:../../../os/hal/src/hal_buffers.c **** 
 736:../../../os/hal/src/hal_buffers.c ****       /* Getting an empty buffer using the specified timeout.*/
 737:../../../os/hal/src/hal_buffers.c ****       msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 738:../../../os/hal/src/hal_buffers.c **** 
 739:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 740:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 741:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 742:../../../os/hal/src/hal_buffers.c ****         return w;
 743:../../../os/hal/src/hal_buffers.c ****       }
 744:../../../os/hal/src/hal_buffers.c ****     }
 745:../../../os/hal/src/hal_buffers.c **** 
 746:../../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 747:../../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 748:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 749:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 750:../../../os/hal/src/hal_buffers.c ****     }
 751:../../../os/hal/src/hal_buffers.c **** 
 752:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 753:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 754:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 755:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 756:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, 64U);
 1997               		.loc 1 756 0
 1998 0028 20E4      		ldi r18,lo8(64)
 1999 002a F601      		movw r30,r12
 2000 002c DC01      		movw r26,r24
 2001               		0:
 2002 002e 0190      		ld r0,Z+
 2003 0030 0D92      		st X+,r0
 2004 0032 2A95      		dec r18
 2005 0034 01F4      		brne 0b
 757:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 2006               		.loc 1 757 0
 2007 0036 20E4      		ldi r18,64
 2008 0038 C20E      		add r12,r18
 2009 003a D11C      		adc r13,__zero_reg__
 2010               	.LVL124:
 758:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += 64U;
 2011               		.loc 1 758 0
 2012 003c 8B89      		ldd r24,Y+19
 2013 003e 9C89      		ldd r25,Y+20
 2014 0040 805C      		subi r24,-64
 2015 0042 9F4F      		sbci r25,-1
 2016 0044 9C8B      		std Y+20,r25
 2017 0046 8B8B      		std Y+19,r24
 759:../../../os/hal/src/hal_buffers.c ****       w         += 64U;
 2018               		.loc 1 759 0
 2019 0048 20E4      		ldi r18,64
 2020 004a E20E      		add r14,r18
 2021 004c F11C      		adc r15,__zero_reg__
 2022               	.LVL125:
 2023               	.L103:
 760:../../../os/hal/src/hal_buffers.c ****     }
 761:../../../os/hal/src/hal_buffers.c ****     else {
 762:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 763:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 764:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 765:../../../os/hal/src/hal_buffers.c ****       w         += size;
 766:../../../os/hal/src/hal_buffers.c ****     }
 767:../../../os/hal/src/hal_buffers.c **** 
 768:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 769:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 2024               		.loc 1 769 0
 2025 004e 2D89      		ldd r18,Y+21
 2026 0050 3E89      		ldd r19,Y+22
 2027 0052 8217      		cp r24,r18
 2028 0054 9307      		cpc r25,r19
 2029 0056 00F0      		brlo .L105
 2030               	.LVL126:
 2031               	.LBB345:
 2032               	.LBB346:
 633:../../../os/hal/src/hal_buffers.c **** 
 2033               		.loc 1 633 0
 2034 0058 EF81      		ldd r30,Y+7
 2035 005a F885      		ldd r31,Y+8
 2036 005c 2D85      		ldd r18,Y+13
 2037 005e 3E85      		ldd r19,Y+14
 2038 0060 2250      		subi r18,2
 2039 0062 3109      		sbc r19,__zero_reg__
 2040               	.LVL127:
 2041 0064 3183      		std Z+1,r19
 2042 0066 2083      		st Z,r18
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2043               		.loc 1 636 0
 2044 0068 2D81      		ldd r18,Y+5
 2045 006a 3E81      		ldd r19,Y+6
 2046               	.LVL128:
 2047 006c 2150      		subi r18,1
 2048 006e 3109      		sbc r19,__zero_reg__
 2049 0070 3E83      		std Y+6,r19
 2050 0072 2D83      		std Y+5,r18
 2051               	.LVL129:
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2052               		.loc 1 637 0
 2053 0074 8D85      		ldd r24,Y+13
 2054 0076 9E85      		ldd r25,Y+14
 2055 0078 8E0F      		add r24,r30
 2056 007a 9F1F      		adc r25,r31
 2057 007c 9887      		std Y+8,r25
 2058 007e 8F83      		std Y+7,r24
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2059               		.loc 1 638 0
 2060 0080 2B85      		ldd r18,Y+11
 2061 0082 3C85      		ldd r19,Y+12
 2062 0084 8217      		cp r24,r18
 2063 0086 9307      		cpc r25,r19
 2064 0088 00F0      		brlo .L106
 639:../../../os/hal/src/hal_buffers.c ****   }
 2065               		.loc 1 639 0
 2066 008a 8989      		ldd r24,Y+17
 2067 008c 9A89      		ldd r25,Y+18
 2068 008e 9887      		std Y+8,r25
 2069 0090 8F83      		std Y+7,r24
 2070               	.L106:
 643:../../../os/hal/src/hal_buffers.c **** 
 2071               		.loc 1 643 0
 2072 0092 1C8A      		std Y+20,__zero_reg__
 2073 0094 1B8A      		std Y+19,__zero_reg__
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2074               		.loc 1 646 0
 2075 0096 EF89      		ldd r30,Y+23
 2076 0098 F88D      		ldd r31,Y+24
 2077 009a 3097      		sbiw r30,0
 2078 009c 01F0      		breq .L105
 647:../../../os/hal/src/hal_buffers.c ****   }
 2079               		.loc 1 647 0
 2080 009e CE01      		movw r24,r28
 2081 00a0 0995      		icall
 2082               	.LVL130:
 2083               	.L105:
 2084               	.LBE346:
 2085               	.LBE345:
 2086               	.LBB347:
 2087               	.LBB348:
 2088               	.LBB349:
 2089               	.LBB350:
 2090               	.LBB351:
 2091               		.loc 4 447 0
 2092               	/* #APP */
 2093               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2094 00a2 7894      		sei
 2095               	 ;  0 "" 2
 2096               	/* #NOAPP */
 2097               	.LBE351:
 2098               	.LBE350:
 2099               	.LBE349:
 2100               	.LBE348:
 2101               	.LBE347:
 770:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 771:../../../os/hal/src/hal_buffers.c ****     }
 772:../../../os/hal/src/hal_buffers.c **** 
 773:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 774:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 775:../../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 2102               		.loc 1 775 0
 2103 00a4 EA14      		cp r14,r10
 2104 00a6 FB04      		cpc r15,r11
 2105 00a8 00F4      		brsh .L100
 2106               	.LBB352:
 2107               	.LBB353:
 2108               	.LBB354:
 2109               	.LBB355:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2110               		.loc 4 437 0
 2111               	/* #APP */
 2112               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2113 00aa F894      		cli
 2114               	 ;  0 "" 2
 2115               	.LVL131:
 2116               	/* #NOAPP */
 2117               	.L108:
 2118               	.LBE355:
 2119               	.LBE354:
 2120               	.LBE353:
 2121               	.LBE352:
 733:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2122               		.loc 1 733 0
 2123 00ac 8B89      		ldd r24,Y+19
 2124 00ae 9C89      		ldd r25,Y+20
 2125 00b0 0097      		sbiw r24,0
 2126 00b2 01F0      		breq .L112
 2127               	.L98:
 747:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2128               		.loc 1 747 0
 2129 00b4 0D89      		ldd r16,Y+21
 2130 00b6 1E89      		ldd r17,Y+22
 2131               	.LVL132:
 748:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 2132               		.loc 1 748 0
 2133 00b8 9501      		movw r18,r10
 2134 00ba 2E19      		sub r18,r14
 2135 00bc 3F09      		sbc r19,r15
 2136 00be 081B      		sub r16,r24
 2137 00c0 190B      		sbc r17,r25
 2138               	.LVL133:
 2139 00c2 2017      		cp r18,r16
 2140 00c4 3107      		cpc r19,r17
 2141 00c6 00F4      		brsh .L101
 2142 00c8 8901      		movw r16,r18
 2143               	.LVL134:
 2144               	.L101:
 754:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2145               		.loc 1 754 0
 2146 00ca 0134      		cpi r16,65
 2147 00cc 1105      		cpc r17,__zero_reg__
 2148 00ce 00F0      		brlo .+2
 2149 00d0 00C0      		rjmp .L113
 762:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 2150               		.loc 1 762 0
 2151 00d2 A801      		movw r20,r16
 2152 00d4 B601      		movw r22,r12
 2153 00d6 0E94 0000 		call memcpy
 2154               	.LVL135:
 763:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2155               		.loc 1 763 0
 2156 00da C00E      		add r12,r16
 2157 00dc D11E      		adc r13,r17
 2158               	.LVL136:
 764:../../../os/hal/src/hal_buffers.c ****       w         += size;
 2159               		.loc 1 764 0
 2160 00de 8B89      		ldd r24,Y+19
 2161 00e0 9C89      		ldd r25,Y+20
 2162 00e2 800F      		add r24,r16
 2163 00e4 911F      		adc r25,r17
 2164 00e6 9C8B      		std Y+20,r25
 2165 00e8 8B8B      		std Y+19,r24
 765:../../../os/hal/src/hal_buffers.c ****     }
 2166               		.loc 1 765 0
 2167 00ea E00E      		add r14,r16
 2168 00ec F11E      		adc r15,r17
 2169               	.LVL137:
 2170 00ee 00C0      		rjmp .L103
 2171               	.LVL138:
 2172               	.L112:
 2173               	.LBB356:
 737:../../../os/hal/src/hal_buffers.c **** 
 2174               		.loc 1 737 0
 2175 00f0 B401      		movw r22,r8
 2176 00f2 CE01      		movw r24,r28
 2177 00f4 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2178               	.LVL139:
 740:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2179               		.loc 1 740 0
 2180 00f8 892B      		or r24,r25
 2181 00fa 01F4      		brne .L99
 2182 00fc 8B89      		ldd r24,Y+19
 2183 00fe 9C89      		ldd r25,Y+20
 2184               	.LVL140:
 2185 0100 00C0      		rjmp .L98
 2186               	.LVL141:
 2187               	.L99:
 2188               	.LBB357:
 2189               	.LBB358:
 2190               	.LBB359:
 2191               	.LBB360:
 2192               	.LBB361:
 2193               		.loc 4 447 0
 2194               	/* #APP */
 2195               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2196 0102 7894      		sei
 2197               	 ;  0 "" 2
 2198               	.LVL142:
 2199               	/* #NOAPP */
 2200               	.L100:
 2201               	.LBE361:
 2202               	.LBE360:
 2203               	.LBE359:
 2204               	.LBE358:
 2205               	.LBE357:
 2206               	.LBE356:
 2207               	.LBE344:
 776:../../../os/hal/src/hal_buffers.c ****       return w;
 777:../../../os/hal/src/hal_buffers.c ****     }
 778:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 779:../../../os/hal/src/hal_buffers.c ****   }
 780:../../../os/hal/src/hal_buffers.c **** }
 2208               		.loc 1 780 0
 2209 0104 C701      		movw r24,r14
 2210               	/* epilogue start */
 2211 0106 DF91      		pop r29
 2212 0108 CF91      		pop r28
 2213               	.LVL143:
 2214 010a 1F91      		pop r17
 2215 010c 0F91      		pop r16
 2216 010e FF90      		pop r15
 2217 0110 EF90      		pop r14
 2218               	.LVL144:
 2219 0112 DF90      		pop r13
 2220 0114 CF90      		pop r12
 2221               	.LVL145:
 2222 0116 BF90      		pop r11
 2223 0118 AF90      		pop r10
 2224               	.LVL146:
 2225 011a 9F90      		pop r9
 2226 011c 8F90      		pop r8
 2227               	.LVL147:
 2228 011e 0895      		ret
 2229               		.cfi_endproc
 2230               	.LFE199:
 2232               		.section	.text.obqTryFlushI,"ax",@progbits
 2233               	.global	obqTryFlushI
 2235               	obqTryFlushI:
 2236               	.LFB200:
 781:../../../os/hal/src/hal_buffers.c **** 
 782:../../../os/hal/src/hal_buffers.c **** /**
 783:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 784:../../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 785:../../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 786:../../../os/hal/src/hal_buffers.c ****  *          returned instead.
 787:../../../os/hal/src/hal_buffers.c ****  *
 788:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 789:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 790:../../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 791:../../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 792:../../../os/hal/src/hal_buffers.c ****  *
 793:../../../os/hal/src/hal_buffers.c ****  * @iclass
 794:../../../os/hal/src/hal_buffers.c ****  */
 795:../../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2237               		.loc 1 795 0
 2238               		.cfi_startproc
 2239               	.LVL148:
 2240               	/* prologue: function */
 2241               	/* frame size = 0 */
 2242               	/* stack size = 0 */
 2243               	.L__stack_usage = 0
 2244 0000 FC01      		movw r30,r24
 796:../../../os/hal/src/hal_buffers.c **** 
 797:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 798:../../../os/hal/src/hal_buffers.c **** 
 799:../../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 800:../../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 801:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2245               		.loc 1 801 0
 2246 0002 A781      		ldd r26,Z+7
 2247 0004 B085      		ldd r27,Z+8
 2248 0006 8185      		ldd r24,Z+9
 2249 0008 9285      		ldd r25,Z+10
 2250               	.LVL149:
 2251 000a A817      		cp r26,r24
 2252 000c B907      		cpc r27,r25
 2253 000e 01F0      		breq .L123
 2254               	.L122:
 802:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 803:../../../os/hal/src/hal_buffers.c **** 
 804:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 805:../../../os/hal/src/hal_buffers.c **** 
 806:../../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 807:../../../os/hal/src/hal_buffers.c ****       *((size_t *)obqp->bwrptr) = size;
 808:../../../os/hal/src/hal_buffers.c **** 
 809:../../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 810:../../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 811:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 812:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 813:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 814:../../../os/hal/src/hal_buffers.c ****       }
 815:../../../os/hal/src/hal_buffers.c **** 
 816:../../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 817:../../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 818:../../../os/hal/src/hal_buffers.c **** 
 819:../../../os/hal/src/hal_buffers.c ****       return true;
 820:../../../os/hal/src/hal_buffers.c ****     }
 821:../../../os/hal/src/hal_buffers.c ****   }
 822:../../../os/hal/src/hal_buffers.c ****   return false;
 2255               		.loc 1 822 0
 2256 0010 80E0      		ldi r24,0
 823:../../../os/hal/src/hal_buffers.c **** }
 2257               		.loc 1 823 0
 2258 0012 0895      		ret
 2259               	.L123:
 801:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2260               		.loc 1 801 0 discriminator 1
 2261 0014 8581      		ldd r24,Z+5
 2262 0016 9681      		ldd r25,Z+6
 2263 0018 892B      		or r24,r25
 2264 001a 01F0      		breq .L122
 801:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2265               		.loc 1 801 0 is_stmt 0
 2266 001c 8389      		ldd r24,Z+19
 2267 001e 9489      		ldd r25,Z+20
 2268 0020 0097      		sbiw r24,0
 2269 0022 01F0      		breq .L122
 2270               	.LBB362:
 802:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2271               		.loc 1 802 0 is_stmt 1
 2272 0024 0297      		sbiw r24,2
 2273 0026 8A1B      		sub r24,r26
 2274 0028 9B0B      		sbc r25,r27
 2275               	.LVL150:
 804:../../../os/hal/src/hal_buffers.c **** 
 2276               		.loc 1 804 0
 2277 002a 01F0      		breq .L122
 807:../../../os/hal/src/hal_buffers.c **** 
 2278               		.loc 1 807 0
 2279 002c 1196      		adiw r26,1
 2280 002e 9C93      		st X,r25
 2281 0030 8E93      		st -X,r24
 810:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2282               		.loc 1 810 0
 2283 0032 8581      		ldd r24,Z+5
 2284 0034 9681      		ldd r25,Z+6
 2285               	.LVL151:
 2286 0036 0197      		sbiw r24,1
 2287 0038 9683      		std Z+6,r25
 2288 003a 8583      		std Z+5,r24
 2289               	.LVL152:
 811:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2290               		.loc 1 811 0
 2291 003c 8585      		ldd r24,Z+13
 2292 003e 9685      		ldd r25,Z+14
 2293 0040 A80F      		add r26,r24
 2294 0042 B91F      		adc r27,r25
 2295               	.LVL153:
 2296 0044 B087      		std Z+8,r27
 2297 0046 A783      		std Z+7,r26
 2298               	.LVL154:
 812:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2299               		.loc 1 812 0
 2300 0048 8385      		ldd r24,Z+11
 2301 004a 9485      		ldd r25,Z+12
 2302 004c A817      		cp r26,r24
 2303 004e B907      		cpc r27,r25
 2304 0050 00F0      		brlo .L117
 813:../../../os/hal/src/hal_buffers.c ****       }
 2305               		.loc 1 813 0
 2306 0052 8189      		ldd r24,Z+17
 2307 0054 9289      		ldd r25,Z+18
 2308 0056 9087      		std Z+8,r25
 2309 0058 8783      		std Z+7,r24
 2310               	.L117:
 817:../../../os/hal/src/hal_buffers.c **** 
 2311               		.loc 1 817 0
 2312 005a 148A      		std Z+20,__zero_reg__
 2313 005c 138A      		std Z+19,__zero_reg__
 819:../../../os/hal/src/hal_buffers.c ****     }
 2314               		.loc 1 819 0
 2315 005e 81E0      		ldi r24,lo8(1)
 2316 0060 0895      		ret
 2317               	.LBE362:
 2318               		.cfi_endproc
 2319               	.LFE200:
 2321               		.section	.text.obqFlush,"ax",@progbits
 2322               	.global	obqFlush
 2324               	obqFlush:
 2325               	.LFB201:
 824:../../../os/hal/src/hal_buffers.c **** 
 825:../../../os/hal/src/hal_buffers.c **** /**
 826:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 827:../../../os/hal/src/hal_buffers.c ****  *
 828:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 829:../../../os/hal/src/hal_buffers.c ****  *
 830:../../../os/hal/src/hal_buffers.c ****  * @api
 831:../../../os/hal/src/hal_buffers.c ****  */
 832:../../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2326               		.loc 1 832 0
 2327               		.cfi_startproc
 2328               	.LVL155:
 2329               	/* prologue: function */
 2330               	/* frame size = 0 */
 2331               	/* stack size = 0 */
 2332               	.L__stack_usage = 0
 2333 0000 DC01      		movw r26,r24
 2334               	.LBB363:
 2335               	.LBB364:
 2336               	.LBB365:
 2337               	.LBB366:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2338               		.loc 4 437 0
 2339               	/* #APP */
 2340               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2341 0002 F894      		cli
 2342               	 ;  0 "" 2
 2343               	/* #NOAPP */
 2344               	.LBE366:
 2345               	.LBE365:
 2346               	.LBE364:
 2347               	.LBE363:
 833:../../../os/hal/src/hal_buffers.c **** 
 834:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 835:../../../os/hal/src/hal_buffers.c **** 
 836:../../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 837:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2348               		.loc 1 837 0
 2349 0004 5396      		adiw r26,19
 2350 0006 8D91      		ld r24,X+
 2351 0008 9C91      		ld r25,X
 2352 000a 5497      		sbiw r26,19+1
 2353               	.LVL156:
 2354 000c 0097      		sbiw r24,0
 2355 000e 01F0      		breq .L126
 2356               	.LBB367:
 838:../../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2357               		.loc 1 838 0
 2358 0010 1796      		adiw r26,7
 2359 0012 ED91      		ld r30,X+
 2360 0014 FC91      		ld r31,X
 2361 0016 1897      		sbiw r26,7+1
 2362 0018 0297      		sbiw r24,2
 2363 001a 8E1B      		sub r24,r30
 2364 001c 9F0B      		sbc r25,r31
 2365               	.LVL157:
 839:../../../os/hal/src/hal_buffers.c **** 
 840:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2366               		.loc 1 840 0
 2367 001e 01F0      		breq .L126
 2368               	.LVL158:
 2369               	.LBB368:
 2370               	.LBB369:
 633:../../../os/hal/src/hal_buffers.c **** 
 2371               		.loc 1 633 0
 2372 0020 9183      		std Z+1,r25
 2373 0022 8083      		st Z,r24
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2374               		.loc 1 636 0
 2375 0024 1596      		adiw r26,5
 2376 0026 8D91      		ld r24,X+
 2377 0028 9C91      		ld r25,X
 2378 002a 1697      		sbiw r26,5+1
 2379               	.LVL159:
 2380 002c 0197      		sbiw r24,1
 2381 002e 1696      		adiw r26,5+1
 2382 0030 9C93      		st X,r25
 2383 0032 8E93      		st -X,r24
 2384 0034 1597      		sbiw r26,5
 2385               	.LVL160:
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2386               		.loc 1 637 0
 2387 0036 1D96      		adiw r26,13
 2388 0038 8D91      		ld r24,X+
 2389 003a 9C91      		ld r25,X
 2390 003c 1E97      		sbiw r26,13+1
 2391 003e E80F      		add r30,r24
 2392 0040 F91F      		adc r31,r25
 2393               	.LVL161:
 2394 0042 1896      		adiw r26,7+1
 2395 0044 FC93      		st X,r31
 2396 0046 EE93      		st -X,r30
 2397 0048 1797      		sbiw r26,7
 2398               	.LVL162:
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2399               		.loc 1 638 0
 2400 004a 1B96      		adiw r26,11
 2401 004c 8D91      		ld r24,X+
 2402 004e 9C91      		ld r25,X
 2403 0050 1C97      		sbiw r26,11+1
 2404 0052 E817      		cp r30,r24
 2405 0054 F907      		cpc r31,r25
 2406 0056 00F0      		brlo .L128
 639:../../../os/hal/src/hal_buffers.c ****   }
 2407               		.loc 1 639 0
 2408 0058 5196      		adiw r26,17
 2409 005a 8D91      		ld r24,X+
 2410 005c 9C91      		ld r25,X
 2411 005e 5297      		sbiw r26,17+1
 2412 0060 1896      		adiw r26,7+1
 2413 0062 9C93      		st X,r25
 2414 0064 8E93      		st -X,r24
 2415 0066 1797      		sbiw r26,7
 2416               	.L128:
 643:../../../os/hal/src/hal_buffers.c **** 
 2417               		.loc 1 643 0
 2418 0068 5496      		adiw r26,19+1
 2419 006a 1C92      		st X,__zero_reg__
 2420 006c 1E92      		st -X,__zero_reg__
 2421 006e 5397      		sbiw r26,19
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2422               		.loc 1 646 0
 2423 0070 5796      		adiw r26,23
 2424 0072 ED91      		ld r30,X+
 2425 0074 FC91      		ld r31,X
 2426 0076 5897      		sbiw r26,23+1
 2427 0078 3097      		sbiw r30,0
 2428 007a 01F0      		breq .L126
 2429 007c CD01      		movw r24,r26
 647:../../../os/hal/src/hal_buffers.c ****   }
 2430               		.loc 1 647 0
 2431 007e 0995      		icall
 2432               	.LVL163:
 2433               	.L126:
 2434               	.LBE369:
 2435               	.LBE368:
 2436               	.LBE367:
 2437               	.LBB370:
 2438               	.LBB371:
 2439               	.LBB372:
 2440               	.LBB373:
 2441               	.LBB374:
 2442               		.loc 4 447 0
 2443               	/* #APP */
 2444               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2445 0080 7894      		sei
 2446               	 ;  0 "" 2
 2447               	/* #NOAPP */
 2448 0082 0895      		ret
 2449               	.LBE374:
 2450               	.LBE373:
 2451               	.LBE372:
 2452               	.LBE371:
 2453               	.LBE370:
 2454               		.cfi_endproc
 2455               	.LFE201:
 2457               		.text
 2458               	.Letext0:
 2459               		.file 5 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 2460               		.file 6 "/usr/lib/avr/include/stdint.h"
 2461               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2462               		.file 8 "../../../os/rt/include/chsystypes.h"
 2463               		.file 9 "../../../os/rt/include/chtime.h"
 2464               		.file 10 "../../../os/rt/include/chsem.h"
 2465               		.file 11 "../../../os/rt/include/chmtx.h"
 2466               		.file 12 "../../../os/hal/include/hal_buffers.h"
 2467               		.file 13 "../../../os/rt/include/chsys.h"
 2468               		.file 14 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/cc5KfXbV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5KfXbV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5KfXbV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5KfXbV.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5KfXbV.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5KfXbV.s:13     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/cc5KfXbV.s:131    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/cc5KfXbV.s:177    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/cc5KfXbV.s:218    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/cc5KfXbV.s:279    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/cc5KfXbV.s:390    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/cc5KfXbV.s:441    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/cc5KfXbV.s:554    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/cc5KfXbV.s:632    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/cc5KfXbV.s:801    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/cc5KfXbV.s:1110   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/cc5KfXbV.s:1226   .text.obqResetI:0000000000000000 obqResetI
     /tmp/cc5KfXbV.s:1273   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/cc5KfXbV.s:1321   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/cc5KfXbV.s:1376   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/cc5KfXbV.s:1486   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/cc5KfXbV.s:1536   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/cc5KfXbV.s:1653   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/cc5KfXbV.s:1735   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/cc5KfXbV.s:1914   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/cc5KfXbV.s:2235   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/cc5KfXbV.s:2324   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
