   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 4D61 7374 		.string	"MasterSendI2C"
  12      6572 5365 
  12      6E64 4932 
  12      4300 
  13               	.LC1:
  14 000e 696E 6963 		.string	"iniciando processo de envio do master\r\n"
  14      6961 6E64 
  14      6F20 7072 
  14      6F63 6573 
  14      736F 2064 
  15               	.LC2:
  16 0036 6465 6275 		.string	"debug = %d\r\n"
  16      6720 3D20 
  16      2564 0D0A 
  16      00
  17               	.LC3:
  18 0043 6275 6666 		.string	"buffer %d "
  18      6572 2025 
  18      6420 00
  19               	.LC4:
  20 004e 6669 6E61 		.string	"final da execucao da thread\r\n"
  20      6C20 6461 
  20      2065 7865 
  20      6375 6361 
  20      6F20 6461 
  21               		.section	.text.Thread1,"ax",@progbits
  23               	Thread1:
  24               	.LFB185:
  25               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the Lice/os/hal/lib/streams/chprintf.se is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #include "chprintf.h"
  21:main.c        **** 
  22:main.c        **** #include <stdio.h>
  23:main.c        **** 
  24:main.c        **** #include <string.h>
  25:main.c        **** #include <stdlib.h>
  26:main.c        **** 
  27:main.c        **** 
  28:main.c        **** #include "hal_i2c.h"
  29:main.c        **** //#include "hal_i2cslave.h"
  30:main.c        **** /*
  31:main.c        ****  * LED blinker thread, times are in milliseconds.
  32:main.c        ****  */
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  36:main.c        **** static THD_FUNCTION(Thread1, arg) {
  26               		.loc 1 36 0
  27               		.cfi_startproc
  28               	.LVL0:
  29 0000 CF93      		push r28
  30               	.LCFI0:
  31               		.cfi_def_cfa_offset 3
  32               		.cfi_offset 28, -2
  33 0002 DF93      		push r29
  34               	.LCFI1:
  35               		.cfi_def_cfa_offset 4
  36               		.cfi_offset 29, -3
  37 0004 CDB7      		in r28,__SP_L__
  38 0006 DEB7      		in r29,__SP_H__
  39               	.LCFI2:
  40               		.cfi_def_cfa_register 28
  41 0008 2A97      		sbiw r28,10
  42               	.LCFI3:
  43               		.cfi_def_cfa_offset 14
  44 000a 0FB6      		in __tmp_reg__,__SREG__
  45 000c F894      		cli
  46 000e DEBF      		out __SP_H__,r29
  47 0010 0FBE      		out __SREG__,__tmp_reg__
  48 0012 CDBF      		out __SP_L__,r28
  49               	/* prologue: function */
  50               	/* frame size = 10 */
  51               	/* stack size = 12 */
  52               	.L__stack_usage = 12
  53               	.LVL1:
  54               	.LBB6:
  37:main.c        ****   i2caddr_t slaveaddr=5;
  38:main.c        ****   size_t txbytes=5;
  39:main.c        ****   size_t rxbytes=5;
  40:main.c        ****   uint8_t rxbuf[rxbytes];
  41:main.c        ****   uint8_t txbuffer[txbytes];
  42:main.c        ****   sysinterval_t TIMEOUT=500;
  43:main.c        ****   msg_t debug;
  44:main.c        ****   for (int n = 0; n < txbytes ;n++){
  45:main.c        ****     txbuffer[n]=n+1;
  55               		.loc 1 45 0
  56 0014 81E0      		ldi r24,lo8(1)
  57               	.LVL2:
  58 0016 8983      		std Y+1,r24
  59               	.LVL3:
  60 0018 82E0      		ldi r24,lo8(2)
  61 001a 8A83      		std Y+2,r24
  62               	.LVL4:
  63 001c 83E0      		ldi r24,lo8(3)
  64 001e 8B83      		std Y+3,r24
  65               	.LVL5:
  66 0020 84E0      		ldi r24,lo8(4)
  67 0022 8C83      		std Y+4,r24
  68               	.LVL6:
  69 0024 85E0      		ldi r24,lo8(5)
  70 0026 8D83      		std Y+5,r24
  71               	.LVL7:
  72               	.LBE6:
  73               	.LBB7:
  74               	.LBB8:
  75               		.file 2 "../../../os/rt/include/chregistry.h"
   1:../../../os/rt/include/chregistry.h **** /*
   2:../../../os/rt/include/chregistry.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chregistry.h **** 
   4:../../../os/rt/include/chregistry.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chregistry.h **** 
   6:../../../os/rt/include/chregistry.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chregistry.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chregistry.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chregistry.h ****     (at your option) any later version.
  10:../../../os/rt/include/chregistry.h **** 
  11:../../../os/rt/include/chregistry.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chregistry.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chregistry.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chregistry.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chregistry.h **** 
  16:../../../os/rt/include/chregistry.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chregistry.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chregistry.h **** */
  19:../../../os/rt/include/chregistry.h **** 
  20:../../../os/rt/include/chregistry.h **** /**
  21:../../../os/rt/include/chregistry.h ****  * @file    chregistry.h
  22:../../../os/rt/include/chregistry.h ****  * @brief   Threads registry macros and structures.
  23:../../../os/rt/include/chregistry.h ****  *
  24:../../../os/rt/include/chregistry.h ****  * @addtogroup registry
  25:../../../os/rt/include/chregistry.h ****  * @{
  26:../../../os/rt/include/chregistry.h ****  */
  27:../../../os/rt/include/chregistry.h **** 
  28:../../../os/rt/include/chregistry.h **** #ifndef CHREGISTRY_H
  29:../../../os/rt/include/chregistry.h **** #define CHREGISTRY_H
  30:../../../os/rt/include/chregistry.h **** 
  31:../../../os/rt/include/chregistry.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chregistry.h **** 
  33:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  34:../../../os/rt/include/chregistry.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  36:../../../os/rt/include/chregistry.h **** 
  37:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  38:../../../os/rt/include/chregistry.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  40:../../../os/rt/include/chregistry.h **** 
  41:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  42:../../../os/rt/include/chregistry.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  44:../../../os/rt/include/chregistry.h **** 
  45:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  46:../../../os/rt/include/chregistry.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  48:../../../os/rt/include/chregistry.h **** 
  49:../../../os/rt/include/chregistry.h **** /**
  50:../../../os/rt/include/chregistry.h ****  * @brief   ChibiOS/RT memory signature record.
  51:../../../os/rt/include/chregistry.h ****  */
  52:../../../os/rt/include/chregistry.h **** typedef struct {
  53:../../../os/rt/include/chregistry.h ****   char      identifier[4];          /**< @brief Always set to "main".       */
  54:../../../os/rt/include/chregistry.h ****   uint8_t   zero;                   /**< @brief Must be zero.               */
  55:../../../os/rt/include/chregistry.h ****   uint8_t   size;                   /**< @brief Size of this structure.     */
  56:../../../os/rt/include/chregistry.h ****   uint16_t  version;                /**< @brief Encoded ChibiOS/RT version. */
  57:../../../os/rt/include/chregistry.h ****   uint8_t   ptrsize;                /**< @brief Size of a pointer.          */
  58:../../../os/rt/include/chregistry.h ****   uint8_t   timesize;               /**< @brief Size of a @p systime_t.     */
  59:../../../os/rt/include/chregistry.h ****   uint8_t   threadsize;             /**< @brief Size of a @p thread_t.      */
  60:../../../os/rt/include/chregistry.h ****   uint8_t   off_prio;               /**< @brief Offset of @p prio field.    */
  61:../../../os/rt/include/chregistry.h ****   uint8_t   off_ctx;                /**< @brief Offset of @p ctx field.     */
  62:../../../os/rt/include/chregistry.h ****   uint8_t   off_newer;              /**< @brief Offset of @p newer field.   */
  63:../../../os/rt/include/chregistry.h ****   uint8_t   off_older;              /**< @brief Offset of @p older field.   */
  64:../../../os/rt/include/chregistry.h ****   uint8_t   off_name;               /**< @brief Offset of @p name field.    */
  65:../../../os/rt/include/chregistry.h ****   uint8_t   off_stklimit;           /**< @brief Offset of @p stklimit field.*/
  66:../../../os/rt/include/chregistry.h ****   uint8_t   off_state;              /**< @brief Offset of @p state field.   */
  67:../../../os/rt/include/chregistry.h ****   uint8_t   off_flags;              /**< @brief Offset of @p flags field.   */
  68:../../../os/rt/include/chregistry.h ****   uint8_t   off_refs;               /**< @brief Offset of @p refs field.    */
  69:../../../os/rt/include/chregistry.h ****   uint8_t   off_preempt;            /**< @brief Offset of @p preempt field. */
  70:../../../os/rt/include/chregistry.h ****   uint8_t   off_time;               /**< @brief Offset of @p time field.    */
  71:../../../os/rt/include/chregistry.h **** } chdebug_t;
  72:../../../os/rt/include/chregistry.h **** 
  73:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  74:../../../os/rt/include/chregistry.h **** /* Module macros.                                                            */
  75:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  76:../../../os/rt/include/chregistry.h **** 
  77:../../../os/rt/include/chregistry.h **** /**
  78:../../../os/rt/include/chregistry.h ****  * @brief   Removes a thread from the registry list.
  79:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  80:../../../os/rt/include/chregistry.h ****  *
  81:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to remove from the registry
  82:../../../os/rt/include/chregistry.h ****  */
  83:../../../os/rt/include/chregistry.h **** #define REG_REMOVE(tp) {                                                    \
  84:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp)->newer;                                         \
  85:../../../os/rt/include/chregistry.h ****   (tp)->newer->older = (tp)->older;                                         \
  86:../../../os/rt/include/chregistry.h **** }
  87:../../../os/rt/include/chregistry.h **** 
  88:../../../os/rt/include/chregistry.h **** /**
  89:../../../os/rt/include/chregistry.h ****  * @brief   Adds a thread to the registry list.
  90:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  91:../../../os/rt/include/chregistry.h ****  *
  92:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to add to the registry
  93:../../../os/rt/include/chregistry.h ****  */
  94:../../../os/rt/include/chregistry.h **** #define REG_INSERT(tp) {                                                    \
  95:../../../os/rt/include/chregistry.h ****   (tp)->newer = (thread_t *)&ch.rlist;                                      \
  96:../../../os/rt/include/chregistry.h ****   (tp)->older = ch.rlist.older;                                           \
  97:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp);                                                \
  98:../../../os/rt/include/chregistry.h ****   ch.rlist.older = (tp);                                                  \
  99:../../../os/rt/include/chregistry.h **** }
 100:../../../os/rt/include/chregistry.h **** 
 101:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 102:../../../os/rt/include/chregistry.h **** /* External declarations.                                                    */
 103:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 104:../../../os/rt/include/chregistry.h **** 
 105:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 106:../../../os/rt/include/chregistry.h **** extern "C" {
 107:../../../os/rt/include/chregistry.h **** #endif
 108:../../../os/rt/include/chregistry.h ****   extern ROMCONST chdebug_t ch_debug;
 109:../../../os/rt/include/chregistry.h ****   thread_t *chRegFirstThread(void);
 110:../../../os/rt/include/chregistry.h ****   thread_t *chRegNextThread(thread_t *tp);
 111:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByName(const char *name);
 112:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByPointer(thread_t *tp);
 113:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa);
 114:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 115:../../../os/rt/include/chregistry.h **** }
 116:../../../os/rt/include/chregistry.h **** #endif
 117:../../../os/rt/include/chregistry.h **** 
 118:../../../os/rt/include/chregistry.h **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 119:../../../os/rt/include/chregistry.h **** 
 120:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 121:../../../os/rt/include/chregistry.h **** /* Module inline functions.                                                  */
 122:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 123:../../../os/rt/include/chregistry.h **** 
 124:../../../os/rt/include/chregistry.h **** /**
 125:../../../os/rt/include/chregistry.h ****  * @brief   Sets the current thread name.
 126:../../../os/rt/include/chregistry.h ****  * @pre     This function only stores the pointer to the name if the option
 127:../../../os/rt/include/chregistry.h ****  *          @p CH_CFG_USE_REGISTRY is enabled else no action is performed.
 128:../../../os/rt/include/chregistry.h ****  *
 129:../../../os/rt/include/chregistry.h ****  * @param[in] name      thread name as a zero terminated string
 130:../../../os/rt/include/chregistry.h ****  *
 131:../../../os/rt/include/chregistry.h ****  * @api
 132:../../../os/rt/include/chregistry.h ****  */
 133:../../../os/rt/include/chregistry.h **** static inline void chRegSetThreadName(const char *name) {
 134:../../../os/rt/include/chregistry.h **** 
 135:../../../os/rt/include/chregistry.h **** #if CH_CFG_USE_REGISTRY == TRUE
 136:../../../os/rt/include/chregistry.h ****   ch.rlist.current->name = name;
  76               		.loc 2 136 0
  77 0028 E091 0000 		lds r30,ch+11
  78 002c F091 0000 		lds r31,ch+11+1
  79 0030 80E0      		ldi r24,lo8(.LC0)
  80 0032 90E0      		ldi r25,hi8(.LC0)
  81 0034 9487      		std Z+12,r25
  82 0036 8387      		std Z+11,r24
  83 0038 CE01      		movw r24,r28
  84 003a 0696      		adiw r24,6
  85 003c 3C01      		movw r6,r24
  86               	.LBE8:
  87               	.LBE7:
  46:main.c        ****   }
  47:main.c        **** 
  48:main.c        ****   (void)arg;
  49:main.c        ****   chRegSetThreadName("MasterSendI2C");
  50:main.c        ****   while (true) {
  51:main.c        ****     palTogglePad(IOPORT2, PORTB_LED1);
  52:main.c        ****     chprintf((BaseSequentialStream *) &SD1, "iniciando processo de envio do master\r\n");  
  88               		.loc 1 52 0
  89 003e 20E0      		ldi r18,lo8(.LC1)
  90 0040 422E      		mov r4,r18
  91 0042 20E0      		ldi r18,hi8(.LC1)
  92 0044 522E      		mov r5,r18
  93 0046 30E0      		ldi r19,lo8(SD1)
  94 0048 A32E      		mov r10,r19
  95 004a 30E0      		ldi r19,hi8(SD1)
  96 004c B32E      		mov r11,r19
  53:main.c        ****     chThdSleepMilliseconds(500);
  54:main.c        ****     debug=i2cMasterTransmitTimeout(&I2CD1, slaveaddr, txbuffer, txbytes, rxbuf, rxbytes, TIMEOUT); 
  55:main.c        ****     //chThdSleepMilliseconds(2000); //estudar valor real e ver se deve ser empirico esse resultado
  56:main.c        ****     chprintf((BaseSequentialStream *) &SD1, "debug = %d\r\n",debug);
  97               		.loc 1 56 0
  98 004e 40E0      		ldi r20,lo8(.LC2)
  99 0050 242E      		mov r2,r20
 100 0052 40E0      		ldi r20,hi8(.LC2)
 101 0054 342E      		mov r3,r20
 102               	.LBB9:
  57:main.c        ****     for (int n = 0; n < txbytes ;n++){
  58:main.c        ****     chprintf( (BaseSequentialStream *) &SD1, "buffer %d ",txbuffer[n]);
 103               		.loc 1 58 0
 104 0056 50E0      		ldi r21,lo8(.LC3)
 105 0058 852E      		mov r8,r21
 106 005a 50E0      		ldi r21,hi8(.LC3)
 107 005c 952E      		mov r9,r21
 108               	.L3:
 109               	.LBE9:
  51:main.c        ****     chprintf((BaseSequentialStream *) &SD1, "iniciando processo de envio do master\r\n");  
 110               		.loc 1 51 0
 111 005e 85B1      		in r24,0x5
 112 0060 90E2      		ldi r25,lo8(32)
 113 0062 8927      		eor r24,r25
 114 0064 85B9      		out 0x5,r24
  52:main.c        ****     chThdSleepMilliseconds(500);
 115               		.loc 1 52 0
 116 0066 5F92      		push r5
 117 0068 4F92      		push r4
 118 006a BF92      		push r11
 119 006c AF92      		push r10
 120 006e 0E94 0000 		call chprintf
 121               	.LVL8:
  53:main.c        ****     debug=i2cMasterTransmitTimeout(&I2CD1, slaveaddr, txbuffer, txbytes, rxbuf, rxbytes, TIMEOUT); 
 122               		.loc 1 53 0
 123 0072 84E8      		ldi r24,lo8(-124)
 124 0074 9EE1      		ldi r25,lo8(30)
 125 0076 0E94 0000 		call chThdSleep
 126               	.LVL9:
  54:main.c        ****     //chThdSleepMilliseconds(2000); //estudar valor real e ver se deve ser empirico esse resultado
 127               		.loc 1 54 0
 128 007a 84EF      		ldi r24,lo8(-12)
 129 007c C82E      		mov r12,r24
 130 007e DD24      		clr r13
 131 0080 D394      		inc r13
 132 0082 95E0      		ldi r25,lo8(5)
 133 0084 E92E      		mov r14,r25
 134 0086 F12C      		mov r15,__zero_reg__
 135 0088 8301      		movw r16,r6
 136 008a 25E0      		ldi r18,lo8(5)
 137 008c 30E0      		ldi r19,0
 138 008e AE01      		movw r20,r28
 139 0090 4F5F      		subi r20,-1
 140 0092 5F4F      		sbci r21,-1
 141 0094 65E0      		ldi r22,lo8(5)
 142 0096 80E0      		ldi r24,lo8(I2CD1)
 143 0098 90E0      		ldi r25,hi8(I2CD1)
 144 009a 0E94 0000 		call i2cMasterTransmitTimeout
 145               	.LVL10:
  56:main.c        ****     for (int n = 0; n < txbytes ;n++){
 146               		.loc 1 56 0
 147 009e 9F93      		push r25
 148 00a0 8F93      		push r24
 149 00a2 3F92      		push r3
 150 00a4 2F92      		push r2
 151 00a6 BF92      		push r11
 152 00a8 AF92      		push r10
 153 00aa 0E94 0000 		call chprintf
 154               	.LVL11:
 155 00ae 8E01      		movw r16,r28
 156 00b0 0F5F      		subi r16,-1
 157 00b2 1F4F      		sbci r17,-1
 158 00b4 0FB6      		in __tmp_reg__,__SREG__
 159 00b6 F894      		cli
 160 00b8 DEBF      		out __SP_H__,r29
 161 00ba 0FBE      		out __SREG__,__tmp_reg__
 162 00bc CDBF      		out __SP_L__,r28
 163               	.LVL12:
 164               	.L2:
 165               	.LBB10:
 166               		.loc 1 58 0 discriminator 3
 167 00be F801      		movw r30,r16
 168 00c0 8191      		ld r24,Z+
 169 00c2 8F01      		movw r16,r30
 170 00c4 1F92      		push __zero_reg__
 171 00c6 8F93      		push r24
 172 00c8 9F92      		push r9
 173 00ca 8F92      		push r8
 174 00cc BF92      		push r11
 175 00ce AF92      		push r10
 176 00d0 0E94 0000 		call chprintf
 177               	.LVL13:
  57:main.c        ****     chprintf( (BaseSequentialStream *) &SD1, "buffer %d ",txbuffer[n]);
 178               		.loc 1 57 0 discriminator 3
 179 00d4 0F90      		pop __tmp_reg__
 180 00d6 0F90      		pop __tmp_reg__
 181 00d8 0F90      		pop __tmp_reg__
 182 00da 0F90      		pop __tmp_reg__
 183 00dc 0F90      		pop __tmp_reg__
 184 00de 0F90      		pop __tmp_reg__
 185 00e0 0615      		cp r16,r6
 186 00e2 1705      		cpc r17,r7
 187 00e4 01F4      		brne .L2
 188               	.LBE10:
  59:main.c        ****       }
  60:main.c        ****     
  61:main.c        ****     //conversão do valor de debug
  62:main.c        ****     chprintf((BaseSequentialStream *) &SD1, "final da execucao da thread\r\n");
 189               		.loc 1 62 0
 190 00e6 80E0      		ldi r24,lo8(.LC4)
 191 00e8 90E0      		ldi r25,hi8(.LC4)
 192 00ea 9F93      		push r25
 193 00ec 8F93      		push r24
 194 00ee 80E0      		ldi r24,lo8(SD1)
 195 00f0 90E0      		ldi r25,hi8(SD1)
 196 00f2 9F93      		push r25
 197 00f4 8F93      		push r24
 198 00f6 0E94 0000 		call chprintf
 199               	.LVL14:
  63:main.c        ****       }
 200               		.loc 1 63 0
 201 00fa 0F90      		pop __tmp_reg__
 202 00fc 0F90      		pop __tmp_reg__
 203 00fe 0F90      		pop __tmp_reg__
 204 0100 0F90      		pop __tmp_reg__
 205 0102 00C0      		rjmp .L3
 206               		.cfi_endproc
 207               	.LFE185:
 209               		.section	.rodata.str1.1
 210               	.LC5:
 211 006c 4C65 7220 		.string	"Ler configuracoes do I2C do teclado\r\n"
 211      636F 6E66 
 211      6967 7572 
 211      6163 6F65 
 211      7320 646F 
 212               		.section	.text.startup.main,"ax",@progbits
 213               	.global	main
 215               	main:
 216               	.LFB186:
  64:main.c        **** }
  65:main.c        **** 
  66:main.c        **** 
  67:main.c        **** 
  68:main.c        **** /*
  69:main.c        ****  * Application entry point.
  70:main.c        ****  */
  71:main.c        **** int main(void) {
 217               		.loc 1 71 0
 218               		.cfi_startproc
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 0 */
 222               	.L__stack_usage = 0
  72:main.c        **** 
  73:main.c        ****   /*
  74:main.c        ****    * System initializations.
  75:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
  76:main.c        ****    *   and performs the board-specific initializations.
  77:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
  78:main.c        ****    *   RTOS is active.
  79:main.c        ****    */
  80:main.c        ****   halInit();
 223               		.loc 1 80 0
 224 0000 0E94 0000 		call halInit
 225               	.LVL15:
  81:main.c        ****   chSysInit();
 226               		.loc 1 81 0
 227 0004 0E94 0000 		call chSysInit
 228               	.LVL16:
  82:main.c        ****   i2cInit();  
 229               		.loc 1 82 0
 230 0008 0E94 0000 		call i2cInit
 231               	.LVL17:
  83:main.c        ****   /*
  84:main.c        ****    * Activates the serial driv/os/hal/lib/streams/chprintf.er 1 using the driver default configurat
  85:main.c        ****    */
  86:main.c        ****   sdStart(&SD1, NULL);
 232               		.loc 1 86 0
 233 000c 60E0      		ldi r22,0
 234 000e 70E0      		ldi r23,0
 235 0010 80E0      		ldi r24,lo8(SD1)
 236 0012 90E0      		ldi r25,hi8(SD1)
 237 0014 0E94 0000 		call sdStart
 238               	.LVL18:
  87:main.c        ****    
  88:main.c        ****   
  89:main.c        **** 
  90:main.c        **** 
  91:main.c        **** 
  92:main.c        ****   /*chnWrite
  93:main.c        ****    * Starts the MasterSendI2C thread
  94:main.c        ****    */
  95:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 239               		.loc 1 95 0
 240 0018 00E0      		ldi r16,0
 241 001a 10E0      		ldi r17,0
 242 001c 20E0      		ldi r18,lo8(gs(Thread1))
 243 001e 30E0      		ldi r19,hi8(gs(Thread1))
 244 0020 40E8      		ldi r20,lo8(-128)
 245 0022 61E8      		ldi r22,lo8(-127)
 246 0024 70E0      		ldi r23,0
 247 0026 80E0      		ldi r24,lo8(waThread1)
 248 0028 90E0      		ldi r25,hi8(waThread1)
 249 002a 0E94 0000 		call chThdCreateStatic
 250               	.LVL19:
  96:main.c        ****   
  97:main.c        ****   
  98:main.c        **** 
  99:main.c        **** 
 100:main.c        ****   chnWrite(&SD1, (const uint8_t *)"Ler configuracoes do I2C do teclado\r\n", 14);
 251               		.loc 1 100 0
 252 002e E091 0000 		lds r30,SD1
 253 0032 F091 0000 		lds r31,SD1+1
 254 0036 0280      		ldd __tmp_reg__,Z+2
 255 0038 F381      		ldd r31,Z+3
 256 003a E02D      		mov r30,__tmp_reg__
 257 003c 4EE0      		ldi r20,lo8(14)
 258 003e 50E0      		ldi r21,0
 259 0040 60E0      		ldi r22,lo8(.LC5)
 260 0042 70E0      		ldi r23,hi8(.LC5)
 261 0044 80E0      		ldi r24,lo8(SD1)
 262 0046 90E0      		ldi r25,hi8(SD1)
 263 0048 0995      		icall
 264               	.LVL20:
 265               	.L7:
 101:main.c        **** 
 102:main.c        ****   while (TRUE) {
 103:main.c        ****     chThdSleepMilliseconds(1000);  
 266               		.loc 1 103 0 discriminator 1
 267 004a 88E0      		ldi r24,lo8(8)
 268 004c 9DE3      		ldi r25,lo8(61)
 269 004e 0E94 0000 		call chThdSleep
 270               	.LVL21:
 271 0052 00C0      		rjmp .L7
 272               		.cfi_endproc
 273               	.LFE186:
 275               		.section	.bss.waThread1,"aw",@nobits
 278               	waThread1:
 279 0000 0000 0000 		.zero	129
 279      0000 0000 
 279      0000 0000 
 279      0000 0000 
 279      0000 0000 
 280               		.text
 281               	.Letext0:
 282               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 283               		.file 4 "/usr/lib/avr/include/stdint.h"
 284               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 285               		.file 6 "../../../os/rt/include/chsystypes.h"
 286               		.file 7 "../../../os/rt/include/chschd.h"
 287               		.file 8 "../../../os/rt/include/chtime.h"
 288               		.file 9 "../../../os/common/ports/AVR/chcore.h"
 289               		.file 10 "../../../os/rt/include/chsem.h"
 290               		.file 11 "../../../os/rt/include/chmtx.h"
 291               		.file 12 "../../../os/rt/include/chevents.h"
 292               		.file 13 "../../../os/hal/include/hal_streams.h"
 293               		.file 14 "../../../os/hal/include/hal_queues.h"
 294               		.file 15 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 295               		.file 16 "../../../os/hal/include/hal_i2c.h"
 296               		.file 17 "../../../os/hal/ports/AVR/MEGA/LLD/I2Cv1/hal_i2c_lld.h"
 297               		.file 18 "../../../os/hal/include/hal_serial.h"
 298               		.file 19 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 299               		.file 20 "../../../os/hal/lib/streams/chprintf.h"
 300               		.file 21 "../../../os/rt/include/chthreads.h"
 301               		.file 22 "../../../os/hal/include/hal.h"
 302               		.file 23 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBVPdkg.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBVPdkg.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBVPdkg.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBVPdkg.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBVPdkg.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBVPdkg.s:23     .text.Thread1:0000000000000000 Thread1
     /tmp/ccBVPdkg.s:215    .text.startup.main:0000000000000000 main
     /tmp/ccBVPdkg.s:278    .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
ch
SD1
chprintf
chThdSleep
I2CD1
i2cMasterTransmitTimeout
halInit
chSysInit
i2cInit
sdStart
chThdCreateStatic
__do_copy_data
__do_clear_bss
