   1               		.file	"chmemcore.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._core_init,"ax",@progbits
  11               	.global	_core_init
  13               	_core_init:
  14               	.LFB148:
  15               		.file 1 "../../../os/common/oslib/src/chmemcore.c"
   1:../../../os/common/oslib/src/chmemcore.c **** /*
   2:../../../os/common/oslib/src/chmemcore.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/oslib/src/chmemcore.c **** 
   4:../../../os/common/oslib/src/chmemcore.c ****     This file is part of ChibiOS.
   5:../../../os/common/oslib/src/chmemcore.c **** 
   6:../../../os/common/oslib/src/chmemcore.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/oslib/src/chmemcore.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/oslib/src/chmemcore.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/oslib/src/chmemcore.c ****     (at your option) any later version.
  10:../../../os/common/oslib/src/chmemcore.c **** 
  11:../../../os/common/oslib/src/chmemcore.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/oslib/src/chmemcore.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/oslib/src/chmemcore.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/oslib/src/chmemcore.c ****     GNU General Public License for more details.
  15:../../../os/common/oslib/src/chmemcore.c **** 
  16:../../../os/common/oslib/src/chmemcore.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/oslib/src/chmemcore.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/oslib/src/chmemcore.c **** */
  19:../../../os/common/oslib/src/chmemcore.c **** 
  20:../../../os/common/oslib/src/chmemcore.c **** /**
  21:../../../os/common/oslib/src/chmemcore.c ****  * @file    chmemcore.c
  22:../../../os/common/oslib/src/chmemcore.c ****  * @brief   Core memory manager code.
  23:../../../os/common/oslib/src/chmemcore.c ****  *
  24:../../../os/common/oslib/src/chmemcore.c ****  * @addtogroup memcore
  25:../../../os/common/oslib/src/chmemcore.c ****  * @details Core Memory Manager related APIs and services.
  26:../../../os/common/oslib/src/chmemcore.c ****  *          <h2>Operation mode</h2>
  27:../../../os/common/oslib/src/chmemcore.c ****  *          The core memory manager is a simplified allocator that only
  28:../../../os/common/oslib/src/chmemcore.c ****  *          allows to allocate memory blocks without the possibility to
  29:../../../os/common/oslib/src/chmemcore.c ****  *          free them.<br>
  30:../../../os/common/oslib/src/chmemcore.c ****  *          This allocator is meant as a memory blocks provider for the
  31:../../../os/common/oslib/src/chmemcore.c ****  *          other allocators such as:
  32:../../../os/common/oslib/src/chmemcore.c ****  *          - C-Runtime allocator (through a compiler specific adapter module).
  33:../../../os/common/oslib/src/chmemcore.c ****  *          - Heap allocator (see @ref heaps).
  34:../../../os/common/oslib/src/chmemcore.c ****  *          - Memory pools allocator (see @ref pools).
  35:../../../os/common/oslib/src/chmemcore.c ****  *          .
  36:../../../os/common/oslib/src/chmemcore.c ****  *          By having a centralized memory provider the various allocators
  37:../../../os/common/oslib/src/chmemcore.c ****  *          can coexist and share the main memory.<br>
  38:../../../os/common/oslib/src/chmemcore.c ****  *          This allocator, alone, is also useful for very simple
  39:../../../os/common/oslib/src/chmemcore.c ****  *          applications that just require a simple way to get memory
  40:../../../os/common/oslib/src/chmemcore.c ****  *          blocks.
  41:../../../os/common/oslib/src/chmemcore.c ****  * @pre     In order to use the core memory manager APIs the @p CH_CFG_USE_MEMCORE
  42:../../../os/common/oslib/src/chmemcore.c ****  *          option must be enabled in @p chconf.h.
  43:../../../os/common/oslib/src/chmemcore.c ****  * @note    Compatible with RT and NIL.
  44:../../../os/common/oslib/src/chmemcore.c ****  * @{
  45:../../../os/common/oslib/src/chmemcore.c ****  */
  46:../../../os/common/oslib/src/chmemcore.c **** 
  47:../../../os/common/oslib/src/chmemcore.c **** #include "ch.h"
  48:../../../os/common/oslib/src/chmemcore.c **** 
  49:../../../os/common/oslib/src/chmemcore.c **** #if (CH_CFG_USE_MEMCORE == TRUE) || defined(__DOXYGEN__)
  50:../../../os/common/oslib/src/chmemcore.c **** 
  51:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  52:../../../os/common/oslib/src/chmemcore.c **** /* Module exported variables.                                                */
  53:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  54:../../../os/common/oslib/src/chmemcore.c **** 
  55:../../../os/common/oslib/src/chmemcore.c **** /**
  56:../../../os/common/oslib/src/chmemcore.c ****  * @brief   Memory core descriptor.
  57:../../../os/common/oslib/src/chmemcore.c ****  */
  58:../../../os/common/oslib/src/chmemcore.c **** memcore_t ch_memcore;
  59:../../../os/common/oslib/src/chmemcore.c **** 
  60:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  61:../../../os/common/oslib/src/chmemcore.c **** /* Module local types.                                                       */
  62:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  63:../../../os/common/oslib/src/chmemcore.c **** 
  64:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  65:../../../os/common/oslib/src/chmemcore.c **** /* Module local variables.                                                   */
  66:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  67:../../../os/common/oslib/src/chmemcore.c **** 
  68:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  69:../../../os/common/oslib/src/chmemcore.c **** /* Module local functions.                                                   */
  70:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  71:../../../os/common/oslib/src/chmemcore.c **** 
  72:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  73:../../../os/common/oslib/src/chmemcore.c **** /* Module exported functions.                                                */
  74:../../../os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  75:../../../os/common/oslib/src/chmemcore.c **** 
  76:../../../os/common/oslib/src/chmemcore.c **** /**
  77:../../../os/common/oslib/src/chmemcore.c ****  * @brief   Low level memory manager initialization.
  78:../../../os/common/oslib/src/chmemcore.c ****  *
  79:../../../os/common/oslib/src/chmemcore.c ****  * @notapi
  80:../../../os/common/oslib/src/chmemcore.c ****  */
  81:../../../os/common/oslib/src/chmemcore.c **** void _core_init(void) {
  16               		.loc 1 81 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  82:../../../os/common/oslib/src/chmemcore.c **** #if CH_CFG_MEMCORE_SIZE == 0
  83:../../../os/common/oslib/src/chmemcore.c ****   extern uint8_t __heap_base__[];
  84:../../../os/common/oslib/src/chmemcore.c ****   extern uint8_t __heap_end__[];
  85:../../../os/common/oslib/src/chmemcore.c **** 
  86:../../../os/common/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] Required cast operations.*/
  87:../../../os/common/oslib/src/chmemcore.c ****   ch_memcore.nextmem = __heap_base__;
  88:../../../os/common/oslib/src/chmemcore.c ****   ch_memcore.endmem  = __heap_end__;
  89:../../../os/common/oslib/src/chmemcore.c ****   /*lint restore*/
  90:../../../os/common/oslib/src/chmemcore.c **** #else
  91:../../../os/common/oslib/src/chmemcore.c ****   static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];
  92:../../../os/common/oslib/src/chmemcore.c **** 
  93:../../../os/common/oslib/src/chmemcore.c ****   ch_memcore.nextmem = &static_heap[0];
  22               		.loc 1 93 0
  23 0000 E0E0      		ldi r30,lo8(ch_memcore)
  24 0002 F0E0      		ldi r31,hi8(ch_memcore)
  25 0004 80E0      		ldi r24,lo8(static_heap.2780)
  26 0006 90E0      		ldi r25,hi8(static_heap.2780)
  27 0008 9183      		std Z+1,r25
  28 000a 8083      		st Z,r24
  94:../../../os/common/oslib/src/chmemcore.c ****   ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
  29               		.loc 1 94 0
  30 000c 80E0      		ldi r24,lo8(static_heap.2780+128)
  31 000e 90E0      		ldi r25,hi8(static_heap.2780+128)
  32 0010 9383      		std Z+3,r25
  33 0012 8283      		std Z+2,r24
  34 0014 0895      		ret
  35               		.cfi_endproc
  36               	.LFE148:
  38               		.section	.text.chCoreAllocAlignedWithOffsetI,"ax",@progbits
  39               	.global	chCoreAllocAlignedWithOffsetI
  41               	chCoreAllocAlignedWithOffsetI:
  42               	.LFB149:
  95:../../../os/common/oslib/src/chmemcore.c **** #endif
  96:../../../os/common/oslib/src/chmemcore.c **** }
  97:../../../os/common/oslib/src/chmemcore.c **** 
  98:../../../os/common/oslib/src/chmemcore.c **** /**
  99:../../../os/common/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block.
 100:../../../os/common/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 101:../../../os/common/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 102:../../../os/common/oslib/src/chmemcore.c ****  *          @p size bytes after.
 103:../../../os/common/oslib/src/chmemcore.c ****  *
 104:../../../os/common/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 105:../../../os/common/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 106:../../../os/common/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 107:../../../os/common/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 108:../../../os/common/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 109:../../../os/common/oslib/src/chmemcore.c ****  *
 110:../../../os/common/oslib/src/chmemcore.c ****  * @iclass
 111:../../../os/common/oslib/src/chmemcore.c ****  */
 112:../../../os/common/oslib/src/chmemcore.c **** void *chCoreAllocAlignedWithOffsetI(size_t size,
 113:../../../os/common/oslib/src/chmemcore.c ****                                     unsigned align,
 114:../../../os/common/oslib/src/chmemcore.c ****                                     size_t offset) {
  43               		.loc 1 114 0
  44               		.cfi_startproc
  45               	.LVL0:
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 0 */
  49               	.L__stack_usage = 0
 115:../../../os/common/oslib/src/chmemcore.c ****   uint8_t *p, *next;
 116:../../../os/common/oslib/src/chmemcore.c **** 
 117:../../../os/common/oslib/src/chmemcore.c ****   chDbgCheckClassI();
 118:../../../os/common/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 119:../../../os/common/oslib/src/chmemcore.c **** 
 120:../../../os/common/oslib/src/chmemcore.c ****   size = MEM_ALIGN_NEXT(size, align);
  50               		.loc 1 120 0
  51 0000 0197      		sbiw r24,1
  52               	.LVL1:
  53 0002 860F      		add r24,r22
  54 0004 971F      		adc r25,r23
  55               	.LVL2:
  56 0006 2227      		clr r18
  57 0008 3327      		clr r19
  58 000a 261B      		sub r18,r22
  59 000c 370B      		sbc r19,r23
  60               	.LVL3:
 121:../../../os/common/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  61               		.loc 1 121 0
  62 000e E091 0000 		lds r30,ch_memcore
  63 0012 F091 0000 		lds r31,ch_memcore+1
  64 0016 4E0F      		add r20,r30
  65 0018 5F1F      		adc r21,r31
  66               	.LVL4:
  67 001a 4150      		subi r20,1
  68 001c 5109      		sbc r21,__zero_reg__
  69 001e 640F      		add r22,r20
  70 0020 751F      		adc r23,r21
  71               	.LVL5:
  72 0022 6223      		and r22,r18
  73 0024 7323      		and r23,r19
  74               	.LVL6:
 122:../../../os/common/oslib/src/chmemcore.c ****   next = p + size;
  75               		.loc 1 122 0
  76 0026 8223      		and r24,r18
  77 0028 9323      		and r25,r19
  78               	.LVL7:
  79 002a 860F      		add r24,r22
  80 002c 971F      		adc r25,r23
  81               	.LVL8:
 123:../../../os/common/oslib/src/chmemcore.c **** 
 124:../../../os/common/oslib/src/chmemcore.c ****   /* Considering also the case where there is numeric overflow.*/
 125:../../../os/common/oslib/src/chmemcore.c ****   if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  82               		.loc 1 125 0
  83 002e 2091 0000 		lds r18,ch_memcore+2
  84 0032 3091 0000 		lds r19,ch_memcore+2+1
  85               	.LVL9:
  86 0036 2817      		cp r18,r24
  87 0038 3907      		cpc r19,r25
  88 003a 00F0      		brlo .L5
  89               		.loc 1 125 0 is_stmt 0 discriminator 1
  90 003c 8E17      		cp r24,r30
  91 003e 9F07      		cpc r25,r31
  92 0040 00F0      		brlo .L5
 126:../../../os/common/oslib/src/chmemcore.c ****     return NULL;
 127:../../../os/common/oslib/src/chmemcore.c ****   }
 128:../../../os/common/oslib/src/chmemcore.c **** 
 129:../../../os/common/oslib/src/chmemcore.c ****   ch_memcore.nextmem = next;
  93               		.loc 1 129 0 is_stmt 1
  94 0042 9093 0000 		sts ch_memcore+1,r25
  95 0046 8093 0000 		sts ch_memcore,r24
 130:../../../os/common/oslib/src/chmemcore.c **** 
 131:../../../os/common/oslib/src/chmemcore.c ****   return p;
  96               		.loc 1 131 0
  97 004a CB01      		movw r24,r22
  98               	.LVL10:
  99 004c 0895      		ret
 100               	.LVL11:
 101               	.L5:
 126:../../../os/common/oslib/src/chmemcore.c ****     return NULL;
 102               		.loc 1 126 0
 103 004e 80E0      		ldi r24,0
 104               	.LVL12:
 105 0050 90E0      		ldi r25,0
 132:../../../os/common/oslib/src/chmemcore.c **** }
 106               		.loc 1 132 0
 107 0052 0895      		ret
 108               		.cfi_endproc
 109               	.LFE149:
 111               		.section	.text.chCoreAllocAlignedWithOffset,"ax",@progbits
 112               	.global	chCoreAllocAlignedWithOffset
 114               	chCoreAllocAlignedWithOffset:
 115               	.LFB150:
 133:../../../os/common/oslib/src/chmemcore.c **** 
 134:../../../os/common/oslib/src/chmemcore.c **** /**
 135:../../../os/common/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block.
 136:../../../os/common/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 137:../../../os/common/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 138:../../../os/common/oslib/src/chmemcore.c ****  *          @p size bytes after.
 139:../../../os/common/oslib/src/chmemcore.c ****  *
 140:../../../os/common/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 141:../../../os/common/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 142:../../../os/common/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 143:../../../os/common/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 144:../../../os/common/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 145:../../../os/common/oslib/src/chmemcore.c ****  *
 146:../../../os/common/oslib/src/chmemcore.c ****  * @api
 147:../../../os/common/oslib/src/chmemcore.c ****  */
 148:../../../os/common/oslib/src/chmemcore.c **** void *chCoreAllocAlignedWithOffset(size_t size,
 149:../../../os/common/oslib/src/chmemcore.c ****                                    unsigned align,
 150:../../../os/common/oslib/src/chmemcore.c ****                                    size_t offset) {
 116               		.loc 1 150 0
 117               		.cfi_startproc
 118               	.LVL13:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 123               	.LBB16:
 124               	.LBB17:
 125               	.LBB18:
 126               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 127               		.loc 2 437 0
 128               	/* #APP */
 129               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 130 0000 F894      		cli
 131               	 ;  0 "" 2
 132               	.LVL14:
 133               	/* #NOAPP */
 134 0002 9B01      		movw r18,r22
 135 0004 2150      		subi r18,1
 136 0006 3109      		sbc r19,__zero_reg__
 137               	.LBE18:
 138               	.LBE17:
 139               	.LBE16:
 140               	.LBB19:
 141               	.LBB20:
 120:../../../os/common/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 142               		.loc 1 120 0
 143 0008 7195      		neg r23
 144 000a 6195      		neg r22
 145 000c 7109      		sbc r23,__zero_reg__
 146               	.LVL15:
 121:../../../os/common/oslib/src/chmemcore.c ****   next = p + size;
 147               		.loc 1 121 0
 148 000e E091 0000 		lds r30,ch_memcore
 149 0012 F091 0000 		lds r31,ch_memcore+1
 150 0016 4E0F      		add r20,r30
 151 0018 5F1F      		adc r21,r31
 152               	.LVL16:
 153 001a 420F      		add r20,r18
 154 001c 531F      		adc r21,r19
 155 001e 4623      		and r20,r22
 156 0020 5723      		and r21,r23
 157               	.LVL17:
 122:../../../os/common/oslib/src/chmemcore.c **** 
 158               		.loc 1 122 0
 159 0022 820F      		add r24,r18
 160 0024 931F      		adc r25,r19
 161               	.LVL18:
 162 0026 6823      		and r22,r24
 163 0028 7923      		and r23,r25
 164               	.LVL19:
 165 002a CA01      		movw r24,r20
 166 002c 860F      		add r24,r22
 167 002e 971F      		adc r25,r23
 168               	.LVL20:
 125:../../../os/common/oslib/src/chmemcore.c ****     return NULL;
 169               		.loc 1 125 0
 170 0030 2091 0000 		lds r18,ch_memcore+2
 171 0034 3091 0000 		lds r19,ch_memcore+2+1
 172               	.LVL21:
 173 0038 2817      		cp r18,r24
 174 003a 3907      		cpc r19,r25
 175 003c 00F0      		brlo .L10
 176 003e 8E17      		cp r24,r30
 177 0040 9F07      		cpc r25,r31
 178 0042 00F0      		brlo .L10
 129:../../../os/common/oslib/src/chmemcore.c **** 
 179               		.loc 1 129 0
 180 0044 9093 0000 		sts ch_memcore+1,r25
 181 0048 8093 0000 		sts ch_memcore,r24
 131:../../../os/common/oslib/src/chmemcore.c **** }
 182               		.loc 1 131 0
 183 004c CA01      		movw r24,r20
 184               	.LVL22:
 185               	.LBE20:
 186               	.LBE19:
 187               	.LBB22:
 188               	.LBB23:
 189               	.LBB24:
 190               	.LBB25:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 191               		.loc 2 447 0
 192               	/* #APP */
 193               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 194 004e 7894      		sei
 195               	 ;  0 "" 2
 196               	/* #NOAPP */
 197               	.LBE25:
 198               	.LBE24:
 199               	.LBE23:
 200               	.LBE22:
 151:../../../os/common/oslib/src/chmemcore.c ****   void *p;
 152:../../../os/common/oslib/src/chmemcore.c **** 
 153:../../../os/common/oslib/src/chmemcore.c ****   chSysLock();
 154:../../../os/common/oslib/src/chmemcore.c ****   p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 155:../../../os/common/oslib/src/chmemcore.c ****   chSysUnlock();
 156:../../../os/common/oslib/src/chmemcore.c **** 
 157:../../../os/common/oslib/src/chmemcore.c ****   return p;
 158:../../../os/common/oslib/src/chmemcore.c **** }
 201               		.loc 1 158 0
 202 0050 0895      		ret
 203               	.LVL23:
 204               	.L10:
 205               	.LBB29:
 206               	.LBB21:
 126:../../../os/common/oslib/src/chmemcore.c ****   }
 207               		.loc 1 126 0
 208 0052 80E0      		ldi r24,0
 209               	.LVL24:
 210 0054 90E0      		ldi r25,0
 211               	.LVL25:
 212               	.LBE21:
 213               	.LBE29:
 214               	.LBB30:
 215               	.LBB28:
 216               	.LBB27:
 217               	.LBB26:
 218               		.loc 2 447 0
 219               	/* #APP */
 220               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 221 0056 7894      		sei
 222               	 ;  0 "" 2
 223               	/* #NOAPP */
 224               	.LBE26:
 225               	.LBE27:
 226               	.LBE28:
 227               	.LBE30:
 228               		.loc 1 158 0
 229 0058 0895      		ret
 230               		.cfi_endproc
 231               	.LFE150:
 233               		.section	.text.chCoreGetStatusX,"ax",@progbits
 234               	.global	chCoreGetStatusX
 236               	chCoreGetStatusX:
 237               	.LFB151:
 159:../../../os/common/oslib/src/chmemcore.c **** 
 160:../../../os/common/oslib/src/chmemcore.c **** /**
 161:../../../os/common/oslib/src/chmemcore.c ****  * @brief   Core memory status.
 162:../../../os/common/oslib/src/chmemcore.c ****  *
 163:../../../os/common/oslib/src/chmemcore.c ****  * @return              The size, in bytes, of the free core memory.
 164:../../../os/common/oslib/src/chmemcore.c ****  *
 165:../../../os/common/oslib/src/chmemcore.c ****  * @xclass
 166:../../../os/common/oslib/src/chmemcore.c ****  */
 167:../../../os/common/oslib/src/chmemcore.c **** size_t chCoreGetStatusX(void) {
 238               		.loc 1 167 0
 239               		.cfi_startproc
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
 168:../../../os/common/oslib/src/chmemcore.c **** 
 169:../../../os/common/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] The cast is safe.*/
 170:../../../os/common/oslib/src/chmemcore.c ****   return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 244               		.loc 1 170 0
 245 0000 E0E0      		ldi r30,lo8(ch_memcore)
 246 0002 F0E0      		ldi r31,hi8(ch_memcore)
 247 0004 8281      		ldd r24,Z+2
 248 0006 9381      		ldd r25,Z+3
 249 0008 2081      		ld r18,Z
 250 000a 3181      		ldd r19,Z+1
 171:../../../os/common/oslib/src/chmemcore.c ****   /*lint -restore*/
 172:../../../os/common/oslib/src/chmemcore.c **** }
 251               		.loc 1 172 0
 252 000c 821B      		sub r24,r18
 253 000e 930B      		sbc r25,r19
 254 0010 0895      		ret
 255               		.cfi_endproc
 256               	.LFE151:
 258               		.section	.bss.static_heap.2780,"aw",@nobits
 261               	static_heap.2780:
 262 0000 0000 0000 		.zero	128
 262      0000 0000 
 262      0000 0000 
 262      0000 0000 
 262      0000 0000 
 263               		.comm	ch_memcore,4,1
 264               		.text
 265               	.Letext0:
 266               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 267               		.file 4 "/usr/lib/avr/include/stdint.h"
 268               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 269               		.file 6 "../../../os/rt/include/chsystypes.h"
 270               		.file 7 "../../../os/rt/include/chschd.h"
 271               		.file 8 "../../../os/rt/include/chtime.h"
 272               		.file 9 "../../../os/rt/include/chsem.h"
 273               		.file 10 "../../../os/rt/include/chmtx.h"
 274               		.file 11 "../../../os/common/oslib/include/chmemcore.h"
 275               		.file 12 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmemcore.c
     /tmp/cceABRhH.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceABRhH.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceABRhH.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceABRhH.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceABRhH.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceABRhH.s:13     .text._core_init:0000000000000000 _core_init
                            *COM*:0000000000000004 ch_memcore
     /tmp/cceABRhH.s:261    .bss.static_heap.2780:0000000000000000 static_heap.2780
     /tmp/cceABRhH.s:41     .text.chCoreAllocAlignedWithOffsetI:0000000000000000 chCoreAllocAlignedWithOffsetI
     /tmp/cceABRhH.s:114    .text.chCoreAllocAlignedWithOffset:0000000000000000 chCoreAllocAlignedWithOffset
     /tmp/cceABRhH.s:236    .text.chCoreGetStatusX:0000000000000000 chCoreGetStatusX

UNDEFINED SYMBOLS
__do_clear_bss
