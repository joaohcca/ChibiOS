   1               		.file	"chregistry.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chRegFirstThread,"ax",@progbits
  11               	.global	chRegFirstThread
  13               	chRegFirstThread:
  14               	.LFB148:
  15               		.file 1 "../../../os/rt/src/chregistry.c"
   1:../../../os/rt/src/chregistry.c **** /*
   2:../../../os/rt/src/chregistry.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chregistry.c **** 
   4:../../../os/rt/src/chregistry.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chregistry.c **** 
   6:../../../os/rt/src/chregistry.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chregistry.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chregistry.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chregistry.c ****     (at your option) any later version.
  10:../../../os/rt/src/chregistry.c **** 
  11:../../../os/rt/src/chregistry.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chregistry.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chregistry.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chregistry.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chregistry.c **** 
  16:../../../os/rt/src/chregistry.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chregistry.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chregistry.c **** */
  19:../../../os/rt/src/chregistry.c **** 
  20:../../../os/rt/src/chregistry.c **** /**
  21:../../../os/rt/src/chregistry.c ****  * @file    chregistry.c
  22:../../../os/rt/src/chregistry.c ****  * @brief   Threads registry code.
  23:../../../os/rt/src/chregistry.c ****  *
  24:../../../os/rt/src/chregistry.c ****  * @addtogroup registry
  25:../../../os/rt/src/chregistry.c ****  * @details Threads Registry related APIs and services.
  26:../../../os/rt/src/chregistry.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chregistry.c ****  *          The Threads Registry is a double linked list that holds all the
  28:../../../os/rt/src/chregistry.c ****  *          active threads in the system.<br>
  29:../../../os/rt/src/chregistry.c ****  *          Operations defined for the registry:
  30:../../../os/rt/src/chregistry.c ****  *          - <b>First</b>, returns the first, in creation order, active thread
  31:../../../os/rt/src/chregistry.c ****  *            in the system.
  32:../../../os/rt/src/chregistry.c ****  *          - <b>Next</b>, returns the next, in creation order, active thread
  33:../../../os/rt/src/chregistry.c ****  *            in the system.
  34:../../../os/rt/src/chregistry.c ****  *          .
  35:../../../os/rt/src/chregistry.c ****  *          The registry is meant to be mainly a debug feature, for example,
  36:../../../os/rt/src/chregistry.c ****  *          using the registry a debugger can enumerate the active threads
  37:../../../os/rt/src/chregistry.c ****  *          in any given moment or the shell can print the active threads
  38:../../../os/rt/src/chregistry.c ****  *          and their state.<br>
  39:../../../os/rt/src/chregistry.c ****  *          Another possible use is for centralized threads memory management,
  40:../../../os/rt/src/chregistry.c ****  *          terminating threads can pulse an event source and an event handler
  41:../../../os/rt/src/chregistry.c ****  *          can perform a scansion of the registry in order to recover the
  42:../../../os/rt/src/chregistry.c ****  *          memory.
  43:../../../os/rt/src/chregistry.c ****  * @pre     In order to use the threads registry the @p CH_CFG_USE_REGISTRY
  44:../../../os/rt/src/chregistry.c ****  *          option must be enabled in @p chconf.h.
  45:../../../os/rt/src/chregistry.c ****  * @{
  46:../../../os/rt/src/chregistry.c ****  */
  47:../../../os/rt/src/chregistry.c **** 
  48:../../../os/rt/src/chregistry.c **** #include <string.h>
  49:../../../os/rt/src/chregistry.c **** 
  50:../../../os/rt/src/chregistry.c **** #include "ch.h"
  51:../../../os/rt/src/chregistry.c **** 
  52:../../../os/rt/src/chregistry.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  53:../../../os/rt/src/chregistry.c **** 
  54:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  55:../../../os/rt/src/chregistry.c **** /* Module exported variables.                                                */
  56:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  57:../../../os/rt/src/chregistry.c **** 
  58:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  59:../../../os/rt/src/chregistry.c **** /* Module local types.                                                       */
  60:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  61:../../../os/rt/src/chregistry.c **** 
  62:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  63:../../../os/rt/src/chregistry.c **** /* Module local variables.                                                   */
  64:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  65:../../../os/rt/src/chregistry.c **** 
  66:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  67:../../../os/rt/src/chregistry.c **** /* Module local functions.                                                   */
  68:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  69:../../../os/rt/src/chregistry.c **** 
  70:../../../os/rt/src/chregistry.c **** #define _offsetof(st, m)                                                    \
  71:../../../os/rt/src/chregistry.c ****   /*lint -save -e9005 -e9033 -e413 [11.8, 10.8 1.3] Normal pointers
  72:../../../os/rt/src/chregistry.c ****     arithmetic, it is safe.*/                                               \
  73:../../../os/rt/src/chregistry.c ****   ((size_t)((char *)&((st *)0)->m - (char *)0))                             \
  74:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
  75:../../../os/rt/src/chregistry.c **** 
  76:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  77:../../../os/rt/src/chregistry.c **** /* Module exported functions.                                                */
  78:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  79:../../../os/rt/src/chregistry.c **** 
  80:../../../os/rt/src/chregistry.c **** /*
  81:../../../os/rt/src/chregistry.c ****  * OS signature in ROM plus debug-related information.
  82:../../../os/rt/src/chregistry.c ****  */
  83:../../../os/rt/src/chregistry.c **** ROMCONST chdebug_t ch_debug = {
  84:../../../os/rt/src/chregistry.c ****   {'m', 'a', 'i', 'n'},
  85:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
  86:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (chdebug_t),
  87:../../../os/rt/src/chregistry.c ****   (uint16_t)(((unsigned)CH_KERNEL_MAJOR << 11U) |
  88:../../../os/rt/src/chregistry.c ****              ((unsigned)CH_KERNEL_MINOR << 6U) |
  89:../../../os/rt/src/chregistry.c ****              ((unsigned)CH_KERNEL_PATCH << 0U)),
  90:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (void *),
  91:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (systime_t),
  92:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (thread_t),
  93:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, prio),
  94:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, ctx),
  95:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, newer),
  96:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, older),
  97:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, name),
  98:../../../os/rt/src/chregistry.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  99:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, wabase),
 100:../../../os/rt/src/chregistry.c **** #else
 101:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
 102:../../../os/rt/src/chregistry.c **** #endif
 103:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, state),
 104:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, flags),
 105:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 106:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, refs),
 107:../../../os/rt/src/chregistry.c **** #else
 108:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
 109:../../../os/rt/src/chregistry.c **** #endif
 110:../../../os/rt/src/chregistry.c **** #if CH_CFG_TIME_QUANTUM > 0
 111:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, ticks),
 112:../../../os/rt/src/chregistry.c **** #else
 113:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
 114:../../../os/rt/src/chregistry.c **** #endif
 115:../../../os/rt/src/chregistry.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 116:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, time)
 117:../../../os/rt/src/chregistry.c **** #else
 118:../../../os/rt/src/chregistry.c ****   (uint8_t)0
 119:../../../os/rt/src/chregistry.c **** #endif
 120:../../../os/rt/src/chregistry.c **** };
 121:../../../os/rt/src/chregistry.c **** 
 122:../../../os/rt/src/chregistry.c **** /**
 123:../../../os/rt/src/chregistry.c ****  * @brief   Returns the first thread in the system.
 124:../../../os/rt/src/chregistry.c ****  * @details Returns the most ancient thread in the system, usually this is
 125:../../../os/rt/src/chregistry.c ****  *          the main thread unless it terminated. A reference is added to the
 126:../../../os/rt/src/chregistry.c ****  *          returned thread in order to make sure its status is not lost.
 127:../../../os/rt/src/chregistry.c ****  * @note    This function cannot return @p NULL because there is always at
 128:../../../os/rt/src/chregistry.c ****  *          least one thread in the system.
 129:../../../os/rt/src/chregistry.c ****  *
 130:../../../os/rt/src/chregistry.c ****  * @return              A reference to the most ancient thread.
 131:../../../os/rt/src/chregistry.c ****  *
 132:../../../os/rt/src/chregistry.c ****  * @api
 133:../../../os/rt/src/chregistry.c ****  */
 134:../../../os/rt/src/chregistry.c **** thread_t *chRegFirstThread(void) {
  16               		.loc 1 134 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LBB60:
  23               	.LBB61:
  24               	.LBB62:
  25               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  26               		.loc 2 437 0
  27               	/* #APP */
  28               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  29 0000 F894      		cli
  30               	 ;  0 "" 2
  31               	/* #NOAPP */
  32               	.LBE62:
  33               	.LBE61:
  34               	.LBE60:
 135:../../../os/rt/src/chregistry.c ****   thread_t *tp;
 136:../../../os/rt/src/chregistry.c **** 
 137:../../../os/rt/src/chregistry.c ****   chSysLock();
 138:../../../os/rt/src/chregistry.c ****   tp = ch.rlist.newer;
  35               		.loc 1 138 0
  36 0002 8091 0000 		lds r24,ch+7
  37 0006 9091 0000 		lds r25,ch+7+1
  38               	.LVL0:
  39               	.LBB63:
  40               	.LBB64:
  41               	.LBB65:
  42               	.LBB66:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  43               		.loc 2 447 0
  44               	/* #APP */
  45               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
  46 000a 7894      		sei
  47               	 ;  0 "" 2
  48               	/* #NOAPP */
  49               	.LBE66:
  50               	.LBE65:
  51               	.LBE64:
  52               	.LBE63:
 139:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 140:../../../os/rt/src/chregistry.c ****   tp->refs++;
 141:../../../os/rt/src/chregistry.c **** #endif
 142:../../../os/rt/src/chregistry.c ****   chSysUnlock();
 143:../../../os/rt/src/chregistry.c **** 
 144:../../../os/rt/src/chregistry.c ****   return tp;
 145:../../../os/rt/src/chregistry.c **** }
  53               		.loc 1 145 0
  54 000c 0895      		ret
  55               		.cfi_endproc
  56               	.LFE148:
  58               		.section	.text.chRegNextThread,"ax",@progbits
  59               	.global	chRegNextThread
  61               	chRegNextThread:
  62               	.LFB149:
 146:../../../os/rt/src/chregistry.c **** 
 147:../../../os/rt/src/chregistry.c **** /**
 148:../../../os/rt/src/chregistry.c ****  * @brief   Returns the thread next to the specified one.
 149:../../../os/rt/src/chregistry.c ****  * @details The reference counter of the specified thread is decremented and
 150:../../../os/rt/src/chregistry.c ****  *          the reference counter of the returned thread is incremented.
 151:../../../os/rt/src/chregistry.c ****  *
 152:../../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 153:../../../os/rt/src/chregistry.c ****  * @return              A reference to the next thread.
 154:../../../os/rt/src/chregistry.c ****  * @retval NULL         if there is no next thread.
 155:../../../os/rt/src/chregistry.c ****  *
 156:../../../os/rt/src/chregistry.c ****  * @api
 157:../../../os/rt/src/chregistry.c ****  */
 158:../../../os/rt/src/chregistry.c **** thread_t *chRegNextThread(thread_t *tp) {
  63               		.loc 1 158 0
  64               		.cfi_startproc
  65               	.LVL1:
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  70               	.LBB67:
  71               	.LBB68:
  72               	.LBB69:
 437:../../../os/common/ports/AVR/chcore.h **** }
  73               		.loc 2 437 0
  74               	/* #APP */
  75               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  76 0000 F894      		cli
  77               	 ;  0 "" 2
  78               	/* #NOAPP */
  79               	.LBE69:
  80               	.LBE68:
  81               	.LBE67:
 159:../../../os/rt/src/chregistry.c ****   thread_t *ntp;
 160:../../../os/rt/src/chregistry.c **** 
 161:../../../os/rt/src/chregistry.c ****   chSysLock();
 162:../../../os/rt/src/chregistry.c ****   ntp = tp->newer;
  82               		.loc 1 162 0
  83 0002 FC01      		movw r30,r24
  84 0004 8781      		ldd r24,Z+7
  85 0006 9085      		ldd r25,Z+8
  86               	.LVL2:
 163:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 164:../../../os/rt/src/chregistry.c ****   if (ntp == (thread_t *)&ch.rlist) {
  87               		.loc 1 164 0
  88 0008 F0E0      		ldi r31,hi8(ch)
  89 000a 8030      		cpi r24,lo8(ch)
  90 000c 9F07      		cpc r25,r31
  91 000e 01F0      		breq .L5
  92               	.LVL3:
  93               	.L3:
  94               	.LBB70:
  95               	.LBB71:
  96               	.LBB72:
  97               	.LBB73:
  98               		.loc 2 447 0
  99               	/* #APP */
 100               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 101 0010 7894      		sei
 102               	 ;  0 "" 2
 103               	/* #NOAPP */
 104               	.LBE73:
 105               	.LBE72:
 106               	.LBE71:
 107               	.LBE70:
 165:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 166:../../../os/rt/src/chregistry.c ****     ntp = NULL;
 167:../../../os/rt/src/chregistry.c ****   }
 168:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 169:../../../os/rt/src/chregistry.c ****   else {
 170:../../../os/rt/src/chregistry.c ****     chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 171:../../../os/rt/src/chregistry.c ****     ntp->refs++;
 172:../../../os/rt/src/chregistry.c ****   }
 173:../../../os/rt/src/chregistry.c **** #endif
 174:../../../os/rt/src/chregistry.c ****   chSysUnlock();
 175:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 176:../../../os/rt/src/chregistry.c ****   chThdRelease(tp);
 177:../../../os/rt/src/chregistry.c **** #endif
 178:../../../os/rt/src/chregistry.c **** 
 179:../../../os/rt/src/chregistry.c ****   return ntp;
 180:../../../os/rt/src/chregistry.c **** }
 108               		.loc 1 180 0
 109 0012 0895      		ret
 110               	.L5:
 166:../../../os/rt/src/chregistry.c ****   }
 111               		.loc 1 166 0
 112 0014 80E0      		ldi r24,0
 113 0016 90E0      		ldi r25,0
 114               	.LVL4:
 115 0018 00C0      		rjmp .L3
 116               		.cfi_endproc
 117               	.LFE149:
 119               		.section	.text.chRegFindThreadByName,"ax",@progbits
 120               	.global	chRegFindThreadByName
 122               	chRegFindThreadByName:
 123               	.LFB150:
 181:../../../os/rt/src/chregistry.c **** 
 182:../../../os/rt/src/chregistry.c **** /**
 183:../../../os/rt/src/chregistry.c ****  * @brief   Retrieves a thread pointer by name.
 184:../../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 185:../../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 186:../../../os/rt/src/chregistry.c ****  *          returned.
 187:../../../os/rt/src/chregistry.c ****  *
 188:../../../os/rt/src/chregistry.c ****  * @param[in] name      the thread name
 189:../../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 190:../../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 191:../../../os/rt/src/chregistry.c ****  *
 192:../../../os/rt/src/chregistry.c ****  * @api
 193:../../../os/rt/src/chregistry.c ****  */
 194:../../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByName(const char *name) {
 124               		.loc 1 194 0
 125               		.cfi_startproc
 126               	.LVL5:
 127 0000 0F93      		push r16
 128               	.LCFI0:
 129               		.cfi_def_cfa_offset 3
 130               		.cfi_offset 16, -2
 131 0002 1F93      		push r17
 132               	.LCFI1:
 133               		.cfi_def_cfa_offset 4
 134               		.cfi_offset 17, -3
 135 0004 CF93      		push r28
 136               	.LCFI2:
 137               		.cfi_def_cfa_offset 5
 138               		.cfi_offset 28, -4
 139 0006 DF93      		push r29
 140               	.LCFI3:
 141               		.cfi_def_cfa_offset 6
 142               		.cfi_offset 29, -5
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 4 */
 146               	.L__stack_usage = 4
 147 0008 8C01      		movw r16,r24
 148               	.LBB74:
 149               	.LBB75:
 150               	.LBB76:
 151               	.LBB77:
 152               	.LBB78:
 437:../../../os/common/ports/AVR/chcore.h **** }
 153               		.loc 2 437 0
 154               	/* #APP */
 155               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 156 000a F894      		cli
 157               	 ;  0 "" 2
 158               	/* #NOAPP */
 159               	.LBE78:
 160               	.LBE77:
 161               	.LBE76:
 138:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 162               		.loc 1 138 0
 163 000c C091 0000 		lds r28,ch+7
 164 0010 D091 0000 		lds r29,ch+7+1
 165               	.LVL6:
 166               	.LBB79:
 167               	.LBB80:
 168               	.LBB81:
 169               	.LBB82:
 170               		.loc 2 447 0
 171               	/* #APP */
 172               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 173 0014 7894      		sei
 174               	 ;  0 "" 2
 175               	.LVL7:
 176               	/* #NOAPP */
 177               	.L9:
 178               	.LBE82:
 179               	.LBE81:
 180               	.LBE80:
 181               	.LBE79:
 182               	.LBE75:
 183               	.LBE74:
 195:../../../os/rt/src/chregistry.c ****   thread_t *ctp;
 196:../../../os/rt/src/chregistry.c **** 
 197:../../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 198:../../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 199:../../../os/rt/src/chregistry.c ****   do {
 200:../../../os/rt/src/chregistry.c ****     if (strcmp(chRegGetThreadNameX(ctp), name) == 0) {
 184               		.loc 1 200 0
 185 0016 B801      		movw r22,r16
 186 0018 8B85      		ldd r24,Y+11
 187 001a 9C85      		ldd r25,Y+12
 188 001c 0E94 0000 		call strcmp
 189               	.LVL8:
 190 0020 892B      		or r24,r25
 191 0022 01F0      		breq .L10
 192               	.LVL9:
 193               	.LBB83:
 194               	.LBB84:
 195               	.LBB85:
 196               	.LBB86:
 197               	.LBB87:
 437:../../../os/common/ports/AVR/chcore.h **** }
 198               		.loc 2 437 0
 199               	/* #APP */
 200               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 201 0024 F894      		cli
 202               	 ;  0 "" 2
 203               	/* #NOAPP */
 204               	.LBE87:
 205               	.LBE86:
 206               	.LBE85:
 162:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 207               		.loc 1 162 0
 208 0026 0F80      		ldd __tmp_reg__,Y+7
 209 0028 D885      		ldd r29,Y+8
 210 002a C02D      		mov r28,__tmp_reg__
 211               	.LVL10:
 164:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 212               		.loc 1 164 0
 213 002c 80E0      		ldi r24,hi8(ch)
 214 002e C030      		cpi r28,lo8(ch)
 215 0030 D807      		cpc r29,r24
 216 0032 01F0      		breq .L12
 217               	.LVL11:
 218               	.L8:
 219               	.LBB88:
 220               	.LBB89:
 221               	.LBB90:
 222               	.LBB91:
 223               		.loc 2 447 0
 224               	/* #APP */
 225               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 226 0034 7894      		sei
 227               	 ;  0 "" 2
 228               	.LVL12:
 229               	/* #NOAPP */
 230               	.LBE91:
 231               	.LBE90:
 232               	.LBE89:
 233               	.LBE88:
 234               	.LBE84:
 235               	.LBE83:
 201:../../../os/rt/src/chregistry.c ****       return ctp;
 202:../../../os/rt/src/chregistry.c ****     }
 203:../../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 204:../../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 236               		.loc 1 204 0
 237 0036 2097      		sbiw r28,0
 238 0038 01F4      		brne .L9
 205:../../../os/rt/src/chregistry.c **** 
 206:../../../os/rt/src/chregistry.c ****   return NULL;
 239               		.loc 1 206 0
 240 003a 80E0      		ldi r24,0
 241 003c 90E0      		ldi r25,0
 242               	/* epilogue start */
 207:../../../os/rt/src/chregistry.c **** }
 243               		.loc 1 207 0
 244 003e DF91      		pop r29
 245 0040 CF91      		pop r28
 246 0042 1F91      		pop r17
 247 0044 0F91      		pop r16
 248               	.LVL13:
 249 0046 0895      		ret
 250               	.LVL14:
 251               	.L10:
 252 0048 CE01      		movw r24,r28
 253               	/* epilogue start */
 254 004a DF91      		pop r29
 255 004c CF91      		pop r28
 256               	.LVL15:
 257 004e 1F91      		pop r17
 258 0050 0F91      		pop r16
 259               	.LVL16:
 260 0052 0895      		ret
 261               	.LVL17:
 262               	.L12:
 263               	.LBB93:
 264               	.LBB92:
 166:../../../os/rt/src/chregistry.c ****   }
 265               		.loc 1 166 0
 266 0054 C0E0      		ldi r28,0
 267 0056 D0E0      		ldi r29,0
 268               	.LVL18:
 269 0058 00C0      		rjmp .L8
 270               	.LBE92:
 271               	.LBE93:
 272               		.cfi_endproc
 273               	.LFE150:
 275               		.section	.text.chRegFindThreadByPointer,"ax",@progbits
 276               	.global	chRegFindThreadByPointer
 278               	chRegFindThreadByPointer:
 279               	.LFB151:
 208:../../../os/rt/src/chregistry.c **** 
 209:../../../os/rt/src/chregistry.c **** /**
 210:../../../os/rt/src/chregistry.c ****  * @brief   Confirms that a pointer is a valid thread pointer.
 211:../../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 212:../../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 213:../../../os/rt/src/chregistry.c ****  *          returned.
 214:../../../os/rt/src/chregistry.c ****  *
 215:../../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 216:../../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 217:../../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 218:../../../os/rt/src/chregistry.c ****  *
 219:../../../os/rt/src/chregistry.c ****  * @api
 220:../../../os/rt/src/chregistry.c ****  */
 221:../../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByPointer(thread_t *tp) {
 280               		.loc 1 221 0
 281               		.cfi_startproc
 282               	.LVL19:
 283               	/* prologue: function */
 284               	/* frame size = 0 */
 285               	/* stack size = 0 */
 286               	.L__stack_usage = 0
 287               	.LBB94:
 288               	.LBB95:
 289               	.LBB96:
 290               	.LBB97:
 291               	.LBB98:
 437:../../../os/common/ports/AVR/chcore.h **** }
 292               		.loc 2 437 0
 293               	/* #APP */
 294               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 295 0000 F894      		cli
 296               	 ;  0 "" 2
 297               	/* #NOAPP */
 298               	.LBE98:
 299               	.LBE97:
 300               	.LBE96:
 138:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 301               		.loc 1 138 0
 302 0002 E091 0000 		lds r30,ch+7
 303 0006 F091 0000 		lds r31,ch+7+1
 304               	.LVL20:
 305               	.LBB99:
 306               	.LBB100:
 307               	.LBB101:
 308               	.LBB102:
 309               		.loc 2 447 0
 310               	/* #APP */
 311               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 312 000a 7894      		sei
 313               	 ;  0 "" 2
 314               	.LVL21:
 315               	/* #NOAPP */
 316               	.LBE102:
 317               	.LBE101:
 318               	.LBE100:
 319               	.LBE99:
 320               	.LBE95:
 321               	.LBE94:
 222:../../../os/rt/src/chregistry.c ****   thread_t *ctp;
 223:../../../os/rt/src/chregistry.c **** 
 224:../../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 225:../../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 226:../../../os/rt/src/chregistry.c ****   do {
 227:../../../os/rt/src/chregistry.c ****     if (ctp == tp) {
 322               		.loc 1 227 0
 323 000c 8E17      		cp r24,r30
 324 000e 9F07      		cpc r25,r31
 325 0010 01F4      		brne .L16
 326 0012 00C0      		rjmp .L21
 327               	.LVL22:
 328               	.L17:
 329               	.LBB103:
 330               	.LBB104:
 331               	.LBB105:
 332               	.LBB106:
 333               	.LBB107:
 334               	.LBB108:
 335               		.loc 2 447 0
 336               	/* #APP */
 337               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 338 0014 7894      		sei
 339               	 ;  0 "" 2
 340               	.LVL23:
 341               	/* #NOAPP */
 342               	.LBE108:
 343               	.LBE107:
 344               	.LBE106:
 345               	.LBE105:
 346               	.LBE104:
 347               	.LBE103:
 228:../../../os/rt/src/chregistry.c ****       return ctp;
 229:../../../os/rt/src/chregistry.c ****     }
 230:../../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 231:../../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 348               		.loc 1 231 0
 349 0016 3097      		sbiw r30,0
 350 0018 01F0      		breq .L22
 351               	.L18:
 352               	.LVL24:
 227:../../../os/rt/src/chregistry.c ****       return ctp;
 353               		.loc 1 227 0
 354 001a 8E17      		cp r24,r30
 355 001c 9F07      		cpc r25,r31
 356 001e 01F0      		breq .L14
 357               	.L16:
 358               	.LVL25:
 359               	.LBB117:
 360               	.LBB116:
 361               	.LBB112:
 362               	.LBB113:
 363               	.LBB114:
 437:../../../os/common/ports/AVR/chcore.h **** }
 364               		.loc 2 437 0
 365               	/* #APP */
 366               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 367 0020 F894      		cli
 368               	 ;  0 "" 2
 369               	/* #NOAPP */
 370               	.LBE114:
 371               	.LBE113:
 372               	.LBE112:
 162:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 373               		.loc 1 162 0
 374 0022 0780      		ldd __tmp_reg__,Z+7
 375 0024 F085      		ldd r31,Z+8
 376 0026 E02D      		mov r30,__tmp_reg__
 377               	.LVL26:
 164:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 378               		.loc 1 164 0
 379 0028 20E0      		ldi r18,hi8(ch)
 380 002a E030      		cpi r30,lo8(ch)
 381 002c F207      		cpc r31,r18
 382 002e 01F4      		brne .L17
 166:../../../os/rt/src/chregistry.c ****   }
 383               		.loc 1 166 0
 384 0030 E0E0      		ldi r30,0
 385 0032 F0E0      		ldi r31,0
 386               	.LVL27:
 387               	.LBB115:
 388               	.LBB111:
 389               	.LBB110:
 390               	.LBB109:
 391               		.loc 2 447 0
 392               	/* #APP */
 393               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 394 0034 7894      		sei
 395               	 ;  0 "" 2
 396               	.LVL28:
 397               	/* #NOAPP */
 398               	.LBE109:
 399               	.LBE110:
 400               	.LBE111:
 401               	.LBE115:
 402               	.LBE116:
 403               	.LBE117:
 404               		.loc 1 231 0
 405 0036 3097      		sbiw r30,0
 406 0038 01F4      		brne .L18
 407               	.L22:
 232:../../../os/rt/src/chregistry.c **** 
 233:../../../os/rt/src/chregistry.c ****   return NULL;
 408               		.loc 1 233 0
 409 003a 80E0      		ldi r24,0
 410               	.LVL29:
 411 003c 90E0      		ldi r25,0
 412               	.L14:
 234:../../../os/rt/src/chregistry.c **** }
 413               		.loc 1 234 0
 414 003e 0895      		ret
 415               	.LVL30:
 416               	.L21:
 417 0040 0895      		ret
 418               		.cfi_endproc
 419               	.LFE151:
 421               	.global	ch_debug
 422               		.section	.rodata.ch_debug,"a",@progbits
 425               	ch_debug:
 426 0000 6D        		.byte	109
 427 0001 61        		.byte	97
 428 0002 69        		.byte	105
 429 0003 6E        		.byte	110
 430 0004 00        		.byte	0
 431 0005 16        		.byte	22
 432 0006 4028      		.word	10304
 433 0008 02        		.byte	2
 434 0009 02        		.byte	2
 435 000a 1C        		.byte	28
 436 000b 04        		.byte	4
 437 000c 05        		.byte	5
 438 000d 07        		.byte	7
 439 000e 09        		.byte	9
 440 000f 0B        		.byte	11
 441 0010 00        		.byte	0
 442 0011 0D        		.byte	13
 443 0012 0E        		.byte	14
 444 0013 00        		.byte	0
 445 0014 00        		.byte	0
 446 0015 00        		.byte	0
 447               		.text
 448               	.Letext0:
 449               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 450               		.file 4 "/usr/lib/avr/include/stdint.h"
 451               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 452               		.file 6 "../../../os/rt/include/chsystypes.h"
 453               		.file 7 "../../../os/rt/include/chschd.h"
 454               		.file 8 "../../../os/rt/include/chtime.h"
 455               		.file 9 "../../../os/rt/include/chsem.h"
 456               		.file 10 "../../../os/rt/include/chmtx.h"
 457               		.file 11 "../../../os/rt/include/chregistry.h"
 458               		.file 12 "../../../os/rt/include/chsys.h"
 459               		.file 13 "/usr/lib/avr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chregistry.c
     /tmp/cckydMkd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckydMkd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckydMkd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckydMkd.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckydMkd.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckydMkd.s:13     .text.chRegFirstThread:0000000000000000 chRegFirstThread
     /tmp/cckydMkd.s:61     .text.chRegNextThread:0000000000000000 chRegNextThread
     /tmp/cckydMkd.s:122    .text.chRegFindThreadByName:0000000000000000 chRegFindThreadByName
     /tmp/cckydMkd.s:278    .text.chRegFindThreadByPointer:0000000000000000 chRegFindThreadByPointer
     /tmp/cckydMkd.s:425    .rodata.ch_debug:0000000000000000 ch_debug

UNDEFINED SYMBOLS
ch
strcmp
__do_copy_data
